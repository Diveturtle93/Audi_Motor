
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005454  08005454  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005454  08005454  00015454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800545c  0800545c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08005470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08005470  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011825  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd1  00000000  00000000  0003185f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00034530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  00035020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aed4  00000000  00000000  000359c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010216  00000000  00000000  0006089c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd346  00000000  00000000  00070ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ddf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002970  00000000  00000000  0016de4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080050d8 	.word	0x080050d8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080050d8 	.word	0x080050d8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint8_t Reg = data[0];
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	73fb      	strb	r3, [r7, #15]
	uint16_t speed = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	81bb      	strh	r3, [r7, #12]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b30      	cmp	r3, #48	; 0x30
 8000556:	d113      	bne.n	8000580 <BAMOCAN_ID+0x40>
	{
		// Register fuer aktuelle Drehzahl, speed = n
		case BAMOCAR_REG_SPEED_ACT:
			speed = ((data[2]<<8) + data[1]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3302      	adds	r3, #2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	b29a      	uxth	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	4413      	add	r3, r2
 800056e:	81bb      	strh	r3, [r7, #12]
			motor1.Drehzahl = speed;
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <BAMOCAN_ID+0x54>)
 8000572:	89bb      	ldrh	r3, [r7, #12]
 8000574:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Aktuelle Drehzahl\n", 18);
 8000576:	2112      	movs	r1, #18
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <BAMOCAN_ID+0x58>)
 800057a:	f000 f811 	bl	80005a0 <uartTransmit>
#endif

			break;
 800057e:	e004      	b.n	800058a <BAMOCAN_ID+0x4a>


		// Default Mitteilung falls Auwertung für Register noch nicht definiert ist
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000580:	2121      	movs	r1, #33	; 0x21
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <BAMOCAN_ID+0x5c>)
 8000584:	f000 f80c 	bl	80005a0 <uartTransmit>
			break;
 8000588:	bf00      	nop
	}
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000003c 	.word	0x2000003c
 8000598:	080050f0 	.word	0x080050f0
 800059c:	08005104 	.word	0x08005104

080005a0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <uartTransmit+0x24>)
 80005b6:	f004 f8c1 	bl	800473c <HAL_UART_Transmit>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000130 	.word	0x20000130

080005c8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f004 fd7a 	bl	80050d4 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe27 	bl	8000238 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f107 010c 	add.w	r1, r7, #12
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <uartTransmitNumber+0x3c>)
 80005f8:	f004 f8a0 	bl	800473c <HAL_UART_Transmit>
}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000130 	.word	0x20000130

08000608 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 800060c:	2112      	movs	r1, #18
 800060e:	4822      	ldr	r0, [pc, #136]	; (8000698 <collectMiddlewareInfo+0x90>)
 8000610:	f7ff ffc6 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);					// CMSIS Version anzeigen
 8000614:	210a      	movs	r1, #10
 8000616:	2005      	movs	r0, #5
 8000618:	f7ff ffd6 	bl	80005c8 <uartTransmitNumber>
	uartTransmit(".", 1);
 800061c:	2101      	movs	r1, #1
 800061e:	481f      	ldr	r0, [pc, #124]	; (800069c <collectMiddlewareInfo+0x94>)
 8000620:	f7ff ffbe 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);					// CMSIS Version anzeigen
 8000624:	210a      	movs	r1, #10
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff ffce 	bl	80005c8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));		// Hal Version anzeigen
 800062c:	2110      	movs	r1, #16
 800062e:	481c      	ldr	r0, [pc, #112]	; (80006a0 <collectMiddlewareInfo+0x98>)
 8000630:	f7ff ffb6 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000634:	f001 fb0a 	bl	8001c4c <HAL_GetHalVersion>
 8000638:	4603      	mov	r3, r0
 800063a:	0e1b      	lsrs	r3, r3, #24
 800063c:	b2db      	uxtb	r3, r3
 800063e:	210a      	movs	r1, #10
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffc1 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 8000646:	2101      	movs	r1, #1
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <collectMiddlewareInfo+0x94>)
 800064a:	f7ff ffa9 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800064e:	f001 fafd 	bl	8001c4c <HAL_GetHalVersion>
 8000652:	4603      	mov	r3, r0
 8000654:	0c1b      	lsrs	r3, r3, #16
 8000656:	b2db      	uxtb	r3, r3
 8000658:	210a      	movs	r1, #10
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffb4 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 8000660:	2101      	movs	r1, #1
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <collectMiddlewareInfo+0x94>)
 8000664:	f7ff ff9c 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000668:	f001 faf0 	bl	8001c4c <HAL_GetHalVersion>
 800066c:	4603      	mov	r3, r0
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b2db      	uxtb	r3, r3
 8000672:	210a      	movs	r1, #10
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffa7 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 800067a:	2101      	movs	r1, #1
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <collectMiddlewareInfo+0x94>)
 800067e:	f7ff ff8f 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000682:	f001 fae3 	bl	8001c4c <HAL_GetHalVersion>
 8000686:	4603      	mov	r3, r0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	210a      	movs	r1, #10
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff9b 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);					// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08005128 	.word	0x08005128
 800069c:	0800513c 	.word	0x0800513c
 80006a0:	08005140 	.word	0x08005140

080006a4 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 80006a8:	2110      	movs	r1, #16
 80006aa:	4816      	ldr	r0, [pc, #88]	; (8000704 <collectSoftwareInfo+0x60>)
 80006ac:	f7ff ff78 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));						// Git Commit anzeigen
 80006b0:	2108      	movs	r1, #8
 80006b2:	4815      	ldr	r0, [pc, #84]	; (8000708 <collectSoftwareInfo+0x64>)
 80006b4:	f7ff ff74 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80006b8:	210f      	movs	r1, #15
 80006ba:	4814      	ldr	r0, [pc, #80]	; (800070c <collectSoftwareInfo+0x68>)
 80006bc:	f7ff ff70 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));						// Git Branch anzeigen
 80006c0:	210c      	movs	r1, #12
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <collectSoftwareInfo+0x6c>)
 80006c4:	f7ff ff6c 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 80006c8:	210d      	movs	r1, #13
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <collectSoftwareInfo+0x70>)
 80006cc:	f7ff ff68 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));							// Git Hash anzeigen
 80006d0:	2129      	movs	r1, #41	; 0x29
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <collectSoftwareInfo+0x74>)
 80006d4:	f7ff ff64 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80006d8:	210f      	movs	r1, #15
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <collectSoftwareInfo+0x78>)
 80006dc:	f7ff ff60 	bl	80005a0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));						// Kompilierdatum anzeigen
 80006e0:	210c      	movs	r1, #12
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <collectSoftwareInfo+0x7c>)
 80006e4:	f7ff ff5c 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80006e8:	210f      	movs	r1, #15
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <collectSoftwareInfo+0x80>)
 80006ec:	f7ff ff58 	bl	80005a0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));						// Kompilierzeit anzeigen
 80006f0:	2109      	movs	r1, #9
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <collectSoftwareInfo+0x84>)
 80006f4:	f7ff ff54 	bl	80005a0 <uartTransmit>

	uartTransmit("\n", 1);
 80006f8:	2101      	movs	r1, #1
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <collectSoftwareInfo+0x88>)
 80006fc:	f7ff ff50 	bl	80005a0 <uartTransmit>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08005150 	.word	0x08005150
 8000708:	08005160 	.word	0x08005160
 800070c:	08005168 	.word	0x08005168
 8000710:	08005178 	.word	0x08005178
 8000714:	08005184 	.word	0x08005184
 8000718:	08005194 	.word	0x08005194
 800071c:	080051c0 	.word	0x080051c0
 8000720:	080051d0 	.word	0x080051d0
 8000724:	080051dc 	.word	0x080051dc
 8000728:	080051ec 	.word	0x080051ec
 800072c:	080051f8 	.word	0x080051f8

08000730 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000736:	2113      	movs	r1, #19
 8000738:	483b      	ldr	r0, [pc, #236]	; (8000828 <collectHardwareInfo+0xf8>)
 800073a:	f7ff ff31 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);								// Mikrocontroller Typ
 800073e:	f001 fa9b 	bl	8001c78 <HAL_GetDEVID>
 8000742:	4603      	mov	r3, r0
 8000744:	210a      	movs	r1, #10
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff3e 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 800074c:	2115      	movs	r1, #21
 800074e:	4837      	ldr	r0, [pc, #220]	; (800082c <collectHardwareInfo+0xfc>)
 8000750:	f7ff ff26 	bl	80005a0 <uartTransmit>
	
	switch(HAL_GetREVID())												// Mikrocontroller Revision
 8000754:	f001 fa84 	bl	8001c60 <HAL_GetREVID>
 8000758:	4603      	mov	r3, r0
 800075a:	f242 0201 	movw	r2, #8193	; 0x2001
 800075e:	4293      	cmp	r3, r2
 8000760:	d016      	beq.n	8000790 <collectHardwareInfo+0x60>
 8000762:	f242 0201 	movw	r2, #8193	; 0x2001
 8000766:	4293      	cmp	r3, r2
 8000768:	d817      	bhi.n	800079a <collectHardwareInfo+0x6a>
 800076a:	f241 0201 	movw	r2, #4097	; 0x1001
 800076e:	4293      	cmp	r3, r2
 8000770:	d004      	beq.n	800077c <collectHardwareInfo+0x4c>
 8000772:	f241 0203 	movw	r2, #4099	; 0x1003
 8000776:	4293      	cmp	r3, r2
 8000778:	d005      	beq.n	8000786 <collectHardwareInfo+0x56>
 800077a:	e00e      	b.n	800079a <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 800077c:	2101      	movs	r1, #1
 800077e:	482c      	ldr	r0, [pc, #176]	; (8000830 <collectHardwareInfo+0x100>)
 8000780:	f7ff ff0e 	bl	80005a0 <uartTransmit>
			break;
 8000784:	e011      	b.n	80007aa <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000786:	2101      	movs	r1, #1
 8000788:	482a      	ldr	r0, [pc, #168]	; (8000834 <collectHardwareInfo+0x104>)
 800078a:	f7ff ff09 	bl	80005a0 <uartTransmit>
			break;
 800078e:	e00c      	b.n	80007aa <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000790:	2101      	movs	r1, #1
 8000792:	4829      	ldr	r0, [pc, #164]	; (8000838 <collectHardwareInfo+0x108>)
 8000794:	f7ff ff04 	bl	80005a0 <uartTransmit>
			break;
 8000798:	e007      	b.n	80007aa <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800079a:	f001 fa61 	bl	8001c60 <HAL_GetREVID>
 800079e:	4603      	mov	r3, r0
 80007a0:	210a      	movs	r1, #10
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff10 	bl	80005c8 <uartTransmitNumber>
			break;
 80007a8:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80007aa:	2113      	movs	r1, #19
 80007ac:	4823      	ldr	r0, [pc, #140]	; (800083c <collectHardwareInfo+0x10c>)
 80007ae:	f7ff fef7 	bl	80005a0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();					// Systemfrequenz ausgeben
 80007b2:	f003 fa63 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 80007b6:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a21      	ldr	r2, [pc, #132]	; (8000840 <collectHardwareInfo+0x110>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	0c9b      	lsrs	r3, r3, #18
 80007c2:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80007c4:	210a      	movs	r1, #10
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fefe 	bl	80005c8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80007cc:	2104      	movs	r1, #4
 80007ce:	481d      	ldr	r0, [pc, #116]	; (8000844 <collectHardwareInfo+0x114>)
 80007d0:	f7ff fee6 	bl	80005a0 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80007d4:	210f      	movs	r1, #15
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <collectHardwareInfo+0x118>)
 80007d8:	f7ff fee2 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);								// UID0 ausgeben
 80007dc:	f001 fa5a 	bl	8001c94 <HAL_GetUIDw0>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2110      	movs	r1, #16
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff feef 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80007ea:	2101      	movs	r1, #1
 80007ec:	4817      	ldr	r0, [pc, #92]	; (800084c <collectHardwareInfo+0x11c>)
 80007ee:	f7ff fed7 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);								// UID1 ausgeben
 80007f2:	f001 fa5b 	bl	8001cac <HAL_GetUIDw1>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2110      	movs	r1, #16
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fee4 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000800:	2101      	movs	r1, #1
 8000802:	4812      	ldr	r0, [pc, #72]	; (800084c <collectHardwareInfo+0x11c>)
 8000804:	f7ff fecc 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);								// UID2 ausgeben
 8000808:	f001 fa5c 	bl	8001cc4 <HAL_GetUIDw2>
 800080c:	4603      	mov	r3, r0
 800080e:	2110      	movs	r1, #16
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fed9 	bl	80005c8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000816:	2101      	movs	r1, #1
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <collectHardwareInfo+0x120>)
 800081a:	f7ff fec1 	bl	80005a0 <uartTransmit>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	080051fc 	.word	0x080051fc
 800082c:	08005210 	.word	0x08005210
 8000830:	08005228 	.word	0x08005228
 8000834:	0800522c 	.word	0x0800522c
 8000838:	08005230 	.word	0x08005230
 800083c:	08005234 	.word	0x08005234
 8000840:	431bde83 	.word	0x431bde83
 8000844:	08005248 	.word	0x08005248
 8000848:	08005250 	.word	0x08005250
 800084c:	08005260 	.word	0x08005260
 8000850:	080051f8 	.word	0x080051f8

08000854 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000858:	2111      	movs	r1, #17
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <collectSystemInfo+0x34>)
 800085c:	f7ff fea0 	bl	80005a0 <uartTransmit>
	collectHardwareInfo();												// Sammelt Hardware Informationen und gibt diese über Uart aus
 8000860:	f7ff ff66 	bl	8000730 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000864:	2111      	movs	r1, #17
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <collectSystemInfo+0x38>)
 8000868:	f7ff fe9a 	bl	80005a0 <uartTransmit>
	collectSoftwareInfo();												// Sammelt Software Informationen und gibt diese über Uart aus
 800086c:	f7ff ff1a 	bl	80006a4 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000870:	2113      	movs	r1, #19
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <collectSystemInfo+0x3c>)
 8000874:	f7ff fe94 	bl	80005a0 <uartTransmit>
	collectMiddlewareInfo();											// Sammelt Middleware Informationen und gibt diese über Uart aus
 8000878:	f7ff fec6 	bl	8000608 <collectMiddlewareInfo>

	uartTransmit("\n", 1);
 800087c:	2101      	movs	r1, #1
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <collectSystemInfo+0x40>)
 8000880:	f7ff fe8e 	bl	80005a0 <uartTransmit>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08005264 	.word	0x08005264
 800088c:	08005278 	.word	0x08005278
 8000890:	0800528c 	.word	0x0800528c
 8000894:	080051f8 	.word	0x080051f8

08000898 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800089e:	2300      	movs	r3, #0
 80008a0:	71fb      	strb	r3, [r7, #7]

	// Prüfe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <readResetSource+0xa0>)
 80008a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3301      	adds	r3, #1
 80008b2:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <readResetSource+0xa0>)
 80008b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	3302      	adds	r3, #2
 80008c4:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <readResetSource+0xa0>)
 80008c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da02      	bge.n	80008d4 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	3304      	adds	r3, #4
 80008d2:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <readResetSource+0xa0>)
 80008d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	3308      	adds	r3, #8
 80008e4:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <readResetSource+0xa0>)
 80008e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	3310      	adds	r3, #16
 80008f6:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <readResetSource+0xa0>)
 80008fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	3320      	adds	r3, #32
 8000908:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <readResetSource+0xa0>)
 800090c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800090e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	3340      	adds	r3, #64	; 0x40
 800091a:	71fb      	strb	r3, [r7, #7]
	}

	// Lösche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <readResetSource+0xa0>)
 800091e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <readResetSource+0xa0>)
 8000922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000926:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000928:	79fb      	ldrb	r3, [r7, #7]
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000946:	2106      	movs	r1, #6
 8000948:	482a      	ldr	r0, [pc, #168]	; (80009f4 <printResetSource+0xb8>)
 800094a:	f7ff fe29 	bl	80005a0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d104      	bne.n	800095e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000954:	210f      	movs	r1, #15
 8000956:	4828      	ldr	r0, [pc, #160]	; (80009f8 <printResetSource+0xbc>)
 8000958:	f7ff fe22 	bl	80005a0 <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 800095c:	e046      	b.n	80009ec <printResetSource+0xb0>
		if (reset_flags & IWDG1)										// Interner watchdog Reset
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000968:	2118      	movs	r1, #24
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <printResetSource+0xc0>)
 800096c:	f7ff fe18 	bl	80005a0 <uartTransmit>
		if (reset_flags & WWDG1)										// Window watchdog Reset
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 800097a:	2116      	movs	r1, #22
 800097c:	4820      	ldr	r0, [pc, #128]	; (8000a00 <printResetSource+0xc4>)
 800097e:	f7ff fe0f 	bl	80005a0 <uartTransmit>
		if (reset_flags & CPURST1)										// CPU Reset
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 800098c:	210a      	movs	r1, #10
 800098e:	481d      	ldr	r0, [pc, #116]	; (8000a04 <printResetSource+0xc8>)
 8000990:	f7ff fe06 	bl	80005a0 <uartTransmit>
		if (reset_flags & BORST1)										// Brown out Reset
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800099e:	2110      	movs	r1, #16
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <printResetSource+0xcc>)
 80009a2:	f7ff fdfd 	bl	80005a0 <uartTransmit>
		if (reset_flags & PORST1)										//Power on Reset / Power down Reser
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80009b0:	210f      	movs	r1, #15
 80009b2:	4816      	ldr	r0, [pc, #88]	; (8000a0c <printResetSource+0xd0>)
 80009b4:	f7ff fdf4 	bl	80005a0 <uartTransmit>
		if (reset_flags & SFTRST1)										// Software Reset
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80009c2:	210f      	movs	r1, #15
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <printResetSource+0xd4>)
 80009c6:	f7ff fdeb 	bl	80005a0 <uartTransmit>
		if (reset_flags & PINRST1)										//NRST pin
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 80009d4:	210a      	movs	r1, #10
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <printResetSource+0xd8>)
 80009d8:	f7ff fde2 	bl	80005a0 <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	da03      	bge.n	80009ec <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 80009e4:	2105      	movs	r1, #5
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <printResetSource+0xdc>)
 80009e8:	f7ff fdda 	bl	80005a0 <uartTransmit>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	080052a0 	.word	0x080052a0
 80009f8:	080052a8 	.word	0x080052a8
 80009fc:	080052b8 	.word	0x080052b8
 8000a00:	080052d4 	.word	0x080052d4
 8000a04:	080052ec 	.word	0x080052ec
 8000a08:	080052f8 	.word	0x080052f8
 8000a0c:	0800530c 	.word	0x0800530c
 8000a10:	0800531c 	.word	0x0800531c
 8000a14:	0800532c 	.word	0x0800532c
 8000a18:	08005338 	.word	0x08005338

08000a1c <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {												// HAL OK
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d104      	bne.n	8000a36 <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	480f      	ldr	r0, [pc, #60]	; (8000a6c <hal_error+0x50>)
 8000a30:	f7ff fdb6 	bl	80005a0 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {									// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000a34:	e016      	b.n	8000a64 <hal_error+0x48>
	else if (status == HAL_ERROR) {										// HAL Error
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000a3c:	210a      	movs	r1, #10
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <hal_error+0x54>)
 8000a40:	f7ff fdae 	bl	80005a0 <uartTransmit>
}
 8000a44:	e00e      	b.n	8000a64 <hal_error+0x48>
	else if (status == HAL_BUSY) {										// HAL Beschäftigt
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d104      	bne.n	8000a56 <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000a4c:	2109      	movs	r1, #9
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <hal_error+0x58>)
 8000a50:	f7ff fda6 	bl	80005a0 <uartTransmit>
}
 8000a54:	e006      	b.n	8000a64 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {									// HAL Timeout
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d103      	bne.n	8000a64 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <hal_error+0x5c>)
 8000a60:	f7ff fd9e 	bl	80005a0 <uartTransmit>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	08005340 	.word	0x08005340
 8000a70:	08005348 	.word	0x08005348
 8000a74:	08005354 	.word	0x08005354
 8000a78:	08005360 	.word	0x08005360

08000a7c <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);
 8000a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a84:	48ce      	ldr	r0, [pc, #824]	; (8000dc0 <readall_inputs+0x344>)
 8000a86:	f002 fcdd 	bl	8003444 <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	b2d9      	uxtb	r1, r3
 8000a92:	4acc      	ldr	r2, [pc, #816]	; (8000dc4 <readall_inputs+0x348>)
 8000a94:	7813      	ldrb	r3, [r2, #0]
 8000a96:	f361 0300 	bfi	r3, r1, #0, #1
 8000a9a:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);
 8000a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa0:	48c7      	ldr	r0, [pc, #796]	; (8000dc0 <readall_inputs+0x344>)
 8000aa2:	f002 fccf 	bl	8003444 <HAL_GPIO_ReadPin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	b2d9      	uxtb	r1, r3
 8000aae:	4ac5      	ldr	r2, [pc, #788]	; (8000dc4 <readall_inputs+0x348>)
 8000ab0:	7813      	ldrb	r3, [r2, #0]
 8000ab2:	f361 0341 	bfi	r3, r1, #1, #1
 8000ab6:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);
 8000ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abc:	48c0      	ldr	r0, [pc, #768]	; (8000dc0 <readall_inputs+0x344>)
 8000abe:	f002 fcc1 	bl	8003444 <HAL_GPIO_ReadPin>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	b2d9      	uxtb	r1, r3
 8000aca:	4abe      	ldr	r2, [pc, #760]	; (8000dc4 <readall_inputs+0x348>)
 8000acc:	7813      	ldrb	r3, [r2, #0]
 8000ace:	f361 0382 	bfi	r3, r1, #2, #1
 8000ad2:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);
 8000ad4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad8:	48b9      	ldr	r0, [pc, #740]	; (8000dc0 <readall_inputs+0x344>)
 8000ada:	f002 fcb3 	bl	8003444 <HAL_GPIO_ReadPin>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	b2d9      	uxtb	r1, r3
 8000ae6:	4ab7      	ldr	r2, [pc, #732]	; (8000dc4 <readall_inputs+0x348>)
 8000ae8:	7813      	ldrb	r3, [r2, #0]
 8000aea:	f361 03c3 	bfi	r3, r1, #3, #1
 8000aee:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);
 8000af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af4:	48b2      	ldr	r0, [pc, #712]	; (8000dc0 <readall_inputs+0x344>)
 8000af6:	f002 fca5 	bl	8003444 <HAL_GPIO_ReadPin>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b2d9      	uxtb	r1, r3
 8000b02:	4ab0      	ldr	r2, [pc, #704]	; (8000dc4 <readall_inputs+0x348>)
 8000b04:	7813      	ldrb	r3, [r2, #0]
 8000b06:	f361 1304 	bfi	r3, r1, #4, #1
 8000b0a:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);
 8000b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b10:	48ad      	ldr	r0, [pc, #692]	; (8000dc8 <readall_inputs+0x34c>)
 8000b12:	f002 fc97 	bl	8003444 <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	b2d9      	uxtb	r1, r3
 8000b1e:	4aa9      	ldr	r2, [pc, #676]	; (8000dc4 <readall_inputs+0x348>)
 8000b20:	7813      	ldrb	r3, [r2, #0]
 8000b22:	f361 1345 	bfi	r3, r1, #5, #1
 8000b26:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);
 8000b28:	2102      	movs	r1, #2
 8000b2a:	48a7      	ldr	r0, [pc, #668]	; (8000dc8 <readall_inputs+0x34c>)
 8000b2c:	f002 fc8a 	bl	8003444 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	b2d9      	uxtb	r1, r3
 8000b38:	4aa2      	ldr	r2, [pc, #648]	; (8000dc4 <readall_inputs+0x348>)
 8000b3a:	7813      	ldrb	r3, [r2, #0]
 8000b3c:	f361 1386 	bfi	r3, r1, #6, #1
 8000b40:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);
 8000b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b46:	48a1      	ldr	r0, [pc, #644]	; (8000dcc <readall_inputs+0x350>)
 8000b48:	f002 fc7c 	bl	8003444 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	b2d9      	uxtb	r1, r3
 8000b54:	4a9b      	ldr	r2, [pc, #620]	; (8000dc4 <readall_inputs+0x348>)
 8000b56:	7813      	ldrb	r3, [r2, #0]
 8000b58:	f361 13c7 	bfi	r3, r1, #7, #1
 8000b5c:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	489b      	ldr	r0, [pc, #620]	; (8000dd0 <readall_inputs+0x354>)
 8000b64:	f002 fc6e 	bl	8003444 <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	b2d9      	uxtb	r1, r3
 8000b70:	4a94      	ldr	r2, [pc, #592]	; (8000dc4 <readall_inputs+0x348>)
 8000b72:	7853      	ldrb	r3, [r2, #1]
 8000b74:	f361 0300 	bfi	r3, r1, #0, #1
 8000b78:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4895      	ldr	r0, [pc, #596]	; (8000dd4 <readall_inputs+0x358>)
 8000b7e:	f002 fc61 	bl	8003444 <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	b2d9      	uxtb	r1, r3
 8000b8a:	4a8e      	ldr	r2, [pc, #568]	; (8000dc4 <readall_inputs+0x348>)
 8000b8c:	7853      	ldrb	r3, [r2, #1]
 8000b8e:	f361 0341 	bfi	r3, r1, #1, #1
 8000b92:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000b94:	2101      	movs	r1, #1
 8000b96:	488c      	ldr	r0, [pc, #560]	; (8000dc8 <readall_inputs+0x34c>)
 8000b98:	f002 fc54 	bl	8003444 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	b2d9      	uxtb	r1, r3
 8000ba4:	4a87      	ldr	r2, [pc, #540]	; (8000dc4 <readall_inputs+0x348>)
 8000ba6:	7853      	ldrb	r3, [r2, #1]
 8000ba8:	f361 0382 	bfi	r3, r1, #2, #1
 8000bac:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	4883      	ldr	r0, [pc, #524]	; (8000dc0 <readall_inputs+0x344>)
 8000bb2:	f002 fc47 	bl	8003444 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	b2d9      	uxtb	r1, r3
 8000bbe:	4a81      	ldr	r2, [pc, #516]	; (8000dc4 <readall_inputs+0x348>)
 8000bc0:	7853      	ldrb	r3, [r2, #1]
 8000bc2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000bc6:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4883      	ldr	r0, [pc, #524]	; (8000dd8 <readall_inputs+0x35c>)
 8000bcc:	f002 fc3a 	bl	8003444 <HAL_GPIO_ReadPin>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	b2d9      	uxtb	r1, r3
 8000bd8:	4a7a      	ldr	r2, [pc, #488]	; (8000dc4 <readall_inputs+0x348>)
 8000bda:	7853      	ldrb	r3, [r2, #1]
 8000bdc:	f361 1304 	bfi	r3, r1, #4, #1
 8000be0:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);
 8000be2:	2104      	movs	r1, #4
 8000be4:	487c      	ldr	r0, [pc, #496]	; (8000dd8 <readall_inputs+0x35c>)
 8000be6:	f002 fc2d 	bl	8003444 <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	b2d9      	uxtb	r1, r3
 8000bf2:	4a74      	ldr	r2, [pc, #464]	; (8000dc4 <readall_inputs+0x348>)
 8000bf4:	7853      	ldrb	r3, [r2, #1]
 8000bf6:	f361 1345 	bfi	r3, r1, #5, #1
 8000bfa:	7053      	strb	r3, [r2, #1]
	//system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);
	//system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4876      	ldr	r0, [pc, #472]	; (8000dd8 <readall_inputs+0x35c>)
 8000c00:	f002 fc20 	bl	8003444 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	b2d9      	uxtb	r1, r3
 8000c0c:	4a73      	ldr	r2, [pc, #460]	; (8000ddc <readall_inputs+0x360>)
 8000c0e:	7813      	ldrb	r3, [r2, #0]
 8000c10:	f361 0300 	bfi	r3, r1, #0, #1
 8000c14:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);
 8000c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1a:	4869      	ldr	r0, [pc, #420]	; (8000dc0 <readall_inputs+0x344>)
 8000c1c:	f002 fc12 	bl	8003444 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	b2d9      	uxtb	r1, r3
 8000c28:	4a6c      	ldr	r2, [pc, #432]	; (8000ddc <readall_inputs+0x360>)
 8000c2a:	7813      	ldrb	r3, [r2, #0]
 8000c2c:	f361 0341 	bfi	r3, r1, #1, #1
 8000c30:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);
 8000c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c36:	4862      	ldr	r0, [pc, #392]	; (8000dc0 <readall_inputs+0x344>)
 8000c38:	f002 fc04 	bl	8003444 <HAL_GPIO_ReadPin>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	b2d9      	uxtb	r1, r3
 8000c44:	4a65      	ldr	r2, [pc, #404]	; (8000ddc <readall_inputs+0x360>)
 8000c46:	7813      	ldrb	r3, [r2, #0]
 8000c48:	f361 0382 	bfi	r3, r1, #2, #1
 8000c4c:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);
 8000c4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c52:	485e      	ldr	r0, [pc, #376]	; (8000dcc <readall_inputs+0x350>)
 8000c54:	f002 fbf6 	bl	8003444 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	b2d9      	uxtb	r1, r3
 8000c60:	4a5e      	ldr	r2, [pc, #376]	; (8000ddc <readall_inputs+0x360>)
 8000c62:	7813      	ldrb	r3, [r2, #0]
 8000c64:	f361 03c3 	bfi	r3, r1, #3, #1
 8000c68:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCCDC_FAULT_GPIO_Port, DCCDC_FAULT_Pin);
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4859      	ldr	r0, [pc, #356]	; (8000dd4 <readall_inputs+0x358>)
 8000c6e:	f002 fbe9 	bl	8003444 <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	b2d9      	uxtb	r1, r3
 8000c7a:	4a58      	ldr	r2, [pc, #352]	; (8000ddc <readall_inputs+0x360>)
 8000c7c:	7813      	ldrb	r3, [r2, #0]
 8000c7e:	f361 1304 	bfi	r3, r1, #4, #1
 8000c82:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);
 8000c84:	2110      	movs	r1, #16
 8000c86:	4853      	ldr	r0, [pc, #332]	; (8000dd4 <readall_inputs+0x358>)
 8000c88:	f002 fbdc 	bl	8003444 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	b2d9      	uxtb	r1, r3
 8000c94:	4a52      	ldr	r2, [pc, #328]	; (8000de0 <readall_inputs+0x364>)
 8000c96:	7813      	ldrb	r3, [r2, #0]
 8000c98:	f361 0300 	bfi	r3, r1, #0, #1
 8000c9c:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	484b      	ldr	r0, [pc, #300]	; (8000dd0 <readall_inputs+0x354>)
 8000ca2:	f002 fbcf 	bl	8003444 <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	b2d9      	uxtb	r1, r3
 8000cae:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <readall_inputs+0x364>)
 8000cb0:	7813      	ldrb	r3, [r2, #0]
 8000cb2:	f361 0341 	bfi	r3, r1, #1, #1
 8000cb6:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);
 8000cb8:	2108      	movs	r1, #8
 8000cba:	4841      	ldr	r0, [pc, #260]	; (8000dc0 <readall_inputs+0x344>)
 8000cbc:	f002 fbc2 	bl	8003444 <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2d9      	uxtb	r1, r3
 8000cc8:	4a45      	ldr	r2, [pc, #276]	; (8000de0 <readall_inputs+0x364>)
 8000cca:	7813      	ldrb	r3, [r2, #0]
 8000ccc:	f361 0382 	bfi	r3, r1, #2, #1
 8000cd0:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);
 8000cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd6:	483f      	ldr	r0, [pc, #252]	; (8000dd4 <readall_inputs+0x358>)
 8000cd8:	f002 fbb4 	bl	8003444 <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2d9      	uxtb	r1, r3
 8000ce4:	4a3e      	ldr	r2, [pc, #248]	; (8000de0 <readall_inputs+0x364>)
 8000ce6:	7813      	ldrb	r3, [r2, #0]
 8000ce8:	f361 03c3 	bfi	r3, r1, #3, #1
 8000cec:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);
 8000cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf2:	4839      	ldr	r0, [pc, #228]	; (8000dd8 <readall_inputs+0x35c>)
 8000cf4:	f002 fba6 	bl	8003444 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	b2d9      	uxtb	r1, r3
 8000d00:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <readall_inputs+0x364>)
 8000d02:	7813      	ldrb	r3, [r2, #0]
 8000d04:	f361 1304 	bfi	r3, r1, #4, #1
 8000d08:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	482c      	ldr	r0, [pc, #176]	; (8000dc0 <readall_inputs+0x344>)
 8000d0e:	f002 fb99 	bl	8003444 <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	b2d9      	uxtb	r1, r3
 8000d1a:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <readall_inputs+0x364>)
 8000d1c:	7813      	ldrb	r3, [r2, #0]
 8000d1e:	f361 1345 	bfi	r3, r1, #5, #1
 8000d22:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);
 8000d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d28:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <readall_inputs+0x354>)
 8000d2a:	f002 fb8b 	bl	8003444 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <readall_inputs+0x364>)
 8000d38:	7813      	ldrb	r3, [r2, #0]
 8000d3a:	f361 1386 	bfi	r3, r1, #6, #1
 8000d3e:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);
 8000d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d44:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <readall_inputs+0x354>)
 8000d46:	f002 fb7d 	bl	8003444 <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2d9      	uxtb	r1, r3
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <readall_inputs+0x364>)
 8000d54:	7813      	ldrb	r3, [r2, #0]
 8000d56:	f361 13c7 	bfi	r3, r1, #7, #1
 8000d5a:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	4821      	ldr	r0, [pc, #132]	; (8000de4 <readall_inputs+0x368>)
 8000d60:	f002 fb70 	bl	8003444 <HAL_GPIO_ReadPin>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	b2d9      	uxtb	r1, r3
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <readall_inputs+0x364>)
 8000d6e:	7853      	ldrb	r3, [r2, #1]
 8000d70:	f361 0300 	bfi	r3, r1, #0, #1
 8000d74:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);
 8000d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7a:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <readall_inputs+0x35c>)
 8000d7c:	f002 fb62 	bl	8003444 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	b2d9      	uxtb	r1, r3
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <readall_inputs+0x364>)
 8000d8a:	7853      	ldrb	r3, [r2, #1]
 8000d8c:	f361 0341 	bfi	r3, r1, #1, #1
 8000d90:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);
 8000d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <readall_inputs+0x35c>)
 8000d98:	f002 fb54 	bl	8003444 <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	b2d9      	uxtb	r1, r3
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <readall_inputs+0x364>)
 8000da6:	7853      	ldrb	r3, [r2, #1]
 8000da8:	f361 0382 	bfi	r3, r1, #2, #1
 8000dac:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);
 8000dae:	2120      	movs	r1, #32
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <readall_inputs+0x358>)
 8000db2:	f002 fb47 	bl	8003444 <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2d9      	uxtb	r1, r3
 8000dbe:	e013      	b.n	8000de8 <readall_inputs+0x36c>
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	20000044 	.word	0x20000044
 8000dc8:	40021400 	.word	0x40021400
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	2000004c 	.word	0x2000004c
 8000de0:	20000048 	.word	0x20000048
 8000de4:	40020800 	.word	0x40020800
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <readall_inputs+0x3e4>)
 8000dea:	7853      	ldrb	r3, [r2, #1]
 8000dec:	f361 03c3 	bfi	r3, r1, #3, #1
 8000df0:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	481b      	ldr	r0, [pc, #108]	; (8000e64 <readall_inputs+0x3e8>)
 8000df6:	f002 fb25 	bl	8003444 <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <readall_inputs+0x3e4>)
 8000e04:	7853      	ldrb	r3, [r2, #1]
 8000e06:	f361 1304 	bfi	r3, r1, #4, #1
 8000e0a:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	4815      	ldr	r0, [pc, #84]	; (8000e64 <readall_inputs+0x3e8>)
 8000e10:	f002 fb18 	bl	8003444 <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	b2d9      	uxtb	r1, r3
 8000e1c:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <readall_inputs+0x3e4>)
 8000e1e:	7853      	ldrb	r3, [r2, #1]
 8000e20:	f361 1345 	bfi	r3, r1, #5, #1
 8000e24:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);
 8000e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <readall_inputs+0x3e8>)
 8000e2c:	f002 fb0a 	bl	8003444 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	b2d9      	uxtb	r1, r3
 8000e38:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <readall_inputs+0x3e4>)
 8000e3a:	7853      	ldrb	r3, [r2, #1]
 8000e3c:	f361 1386 	bfi	r3, r1, #6, #1
 8000e40:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);
 8000e42:	2120      	movs	r1, #32
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <readall_inputs+0x3ec>)
 8000e46:	f002 fafd 	bl	8003444 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	b2d9      	uxtb	r1, r3
 8000e52:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <readall_inputs+0x3e4>)
 8000e54:	7853      	ldrb	r3, [r2, #1]
 8000e56:	f361 13c7 	bfi	r3, r1, #7, #1
 8000e5a:	7053      	strb	r3, [r2, #1]
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000048 	.word	0x20000048
 8000e64:	40021800 	.word	0x40021800
 8000e68:	40021000 	.word	0x40021000

08000e6c <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000e70:	f000 fee0 	bl	8001c34 <HAL_GetTick>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8e:	4b64      	ldr	r3, [pc, #400]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000e90:	4a64      	ldr	r2, [pc, #400]	; (8001024 <MX_ADC1_Init+0x1a8>)
 8000e92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e94:	4b62      	ldr	r3, [pc, #392]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9c:	4b60      	ldr	r3, [pc, #384]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ea2:	4b5f      	ldr	r3, [pc, #380]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea8:	4b5d      	ldr	r3, [pc, #372]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eae:	4b5c      	ldr	r3, [pc, #368]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	4b5a      	ldr	r3, [pc, #360]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebc:	4b58      	ldr	r3, [pc, #352]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ebe:	4a5a      	ldr	r2, [pc, #360]	; (8001028 <MX_ADC1_Init+0x1ac>)
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec2:	4b57      	ldr	r3, [pc, #348]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8000ec8:	4b55      	ldr	r3, [pc, #340]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000eca:	220a      	movs	r2, #10
 8000ecc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ece:	4b54      	ldr	r3, [pc, #336]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed6:	4b52      	ldr	r3, [pc, #328]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000edc:	4850      	ldr	r0, [pc, #320]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ede:	f000 fefd 	bl	8001cdc <HAL_ADC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ee8:	f000 fd42 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000eec:	230e      	movs	r3, #14
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	4848      	ldr	r0, [pc, #288]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000efe:	f000 ff31 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f08:	f000 fd32 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4841      	ldr	r0, [pc, #260]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f1a:	f000 ff23 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f24:	f000 fd24 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4839      	ldr	r0, [pc, #228]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f3a:	f000 ff13 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000f44:	f000 fd14 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4619      	mov	r1, r3
 8000f54:	4832      	ldr	r0, [pc, #200]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f56:	f000 ff05 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000f60:	f000 fd06 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f64:	230f      	movs	r3, #15
 8000f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	482a      	ldr	r0, [pc, #168]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f76:	f000 fef5 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000f80:	f000 fcf6 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f84:	2303      	movs	r3, #3
 8000f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f88:	2306      	movs	r3, #6
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4822      	ldr	r0, [pc, #136]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f96:	f000 fee5 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8000fa0:	f000 fce6 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481b      	ldr	r0, [pc, #108]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000fb2:	f000 fed7 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000fbc:	f000 fcd8 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_ADC1_Init+0x1b0>)
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000fce:	f000 fec9 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8000fd8:	f000 fcca 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000fee:	f000 feb9 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8000ff8:	f000 fcba 	bl	8001970 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ffc:	2309      	movs	r3, #9
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001000:	230a      	movs	r3, #10
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_ADC1_Init+0x1a4>)
 800100a:	f000 feab 	bl	8001d64 <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001014:	f000 fcac 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000050 	.word	0x20000050
 8001024:	40012000 	.word	0x40012000
 8001028:	0f000001 	.word	0x0f000001
 800102c:	10000012 	.word	0x10000012

08001030 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <HAL_ADC_MspInit+0xd4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d153      	bne.n	80010fa <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a26      	ldr	r2, [pc, #152]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 80010b2:	23f8      	movs	r3, #248	; 0xf8
 80010b4:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <HAL_ADC_MspInit+0xdc>)
 80010c6:	f002 f811 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 80010ca:	2330      	movs	r3, #48	; 0x30
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <HAL_ADC_MspInit+0xe0>)
 80010de:	f002 f805 	bl	80030ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 80010e2:	2303      	movs	r3, #3
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <HAL_ADC_MspInit+0xe4>)
 80010f6:	f001 fff9 	bl	80030ec <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010fa:	bf00      	nop
 80010fc:	3730      	adds	r7, #48	; 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40012000 	.word	0x40012000
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020800 	.word	0x40020800
 8001114:	40020400 	.word	0x40020400

08001118 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_CAN3_Init+0x64>)
 800111e:	4a18      	ldr	r2, [pc, #96]	; (8001180 <MX_CAN3_Init+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_CAN3_Init+0x64>)
 8001124:	2206      	movs	r2, #6
 8001126:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_CAN3_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_CAN3_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_CAN3_Init+0x64>)
 8001136:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800113a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_CAN3_Init+0x64>)
 800113e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001142:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_CAN3_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_CAN3_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_CAN3_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_CAN3_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_CAN3_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_CAN3_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_CAN3_Init+0x64>)
 800116a:	f001 f83f 	bl	80021ec <HAL_CAN_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001174:	f000 fbfc 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000098 	.word	0x20000098
 8001180:	40003400 	.word	0x40003400

08001184 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a27      	ldr	r2, [pc, #156]	; (8001240 <HAL_CAN_MspInit+0xbc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d148      	bne.n	8001238 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a26      	ldr	r2, [pc, #152]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a20      	ldr	r2, [pc, #128]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001206:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001218:	230b      	movs	r3, #11
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_CAN_MspInit+0xc4>)
 8001224:	f001 ff62 	bl	80030ec <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2069      	movs	r0, #105	; 0x69
 800122e:	f001 ff26 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001232:	2069      	movs	r0, #105	; 0x69
 8001234:	f001 ff3f 	bl	80030b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40003400 	.word	0x40003400
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	4bb6      	ldr	r3, [pc, #728]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4ab5      	ldr	r2, [pc, #724]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4bb3      	ldr	r3, [pc, #716]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	623b      	str	r3, [r7, #32]
 8001278:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4bb0      	ldr	r3, [pc, #704]	; (800153c <MX_GPIO_Init+0x2f0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4aaf      	ldr	r2, [pc, #700]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4bad      	ldr	r3, [pc, #692]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	4baa      	ldr	r3, [pc, #680]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4aa9      	ldr	r2, [pc, #676]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4ba7      	ldr	r3, [pc, #668]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	4ba4      	ldr	r3, [pc, #656]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4aa3      	ldr	r2, [pc, #652]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4ba1      	ldr	r3, [pc, #644]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b9e      	ldr	r3, [pc, #632]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a9d      	ldr	r2, [pc, #628]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b9b      	ldr	r3, [pc, #620]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b98      	ldr	r3, [pc, #608]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a97      	ldr	r2, [pc, #604]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b95      	ldr	r3, [pc, #596]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f2:	4b92      	ldr	r3, [pc, #584]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a91      	ldr	r2, [pc, #580]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b8f      	ldr	r3, [pc, #572]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b8c      	ldr	r3, [pc, #560]	; (800153c <MX_GPIO_Init+0x2f0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a8b      	ldr	r2, [pc, #556]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001322:	2200      	movs	r2, #0
 8001324:	f248 0187 	movw	r1, #32903	; 0x8087
 8001328:	4885      	ldr	r0, [pc, #532]	; (8001540 <MX_GPIO_Init+0x2f4>)
 800132a:	f002 f8a3 	bl	8003474 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f242 0108 	movw	r1, #8200	; 0x2008
 8001334:	4883      	ldr	r0, [pc, #524]	; (8001544 <MX_GPIO_Init+0x2f8>)
 8001336:	f002 f89d 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800133a:	2200      	movs	r2, #0
 800133c:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8001340:	4881      	ldr	r0, [pc, #516]	; (8001548 <MX_GPIO_Init+0x2fc>)
 8001342:	f002 f897 	bl	8003474 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001346:	2200      	movs	r2, #0
 8001348:	f647 0194 	movw	r1, #30868	; 0x7894
 800134c:	487f      	ldr	r0, [pc, #508]	; (800154c <MX_GPIO_Init+0x300>)
 800134e:	f002 f891 	bl	8003474 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001352:	2200      	movs	r2, #0
 8001354:	f64e 2188 	movw	r1, #60040	; 0xea88
 8001358:	487d      	ldr	r0, [pc, #500]	; (8001550 <MX_GPIO_Init+0x304>)
 800135a:	f002 f88b 	bl	8003474 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 800135e:	2200      	movs	r2, #0
 8001360:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001364:	487b      	ldr	r0, [pc, #492]	; (8001554 <MX_GPIO_Init+0x308>)
 8001366:	f002 f885 	bl	8003474 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001370:	4879      	ldr	r0, [pc, #484]	; (8001558 <MX_GPIO_Init+0x30c>)
 8001372:	f002 f87f 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001376:	f248 0387 	movw	r3, #32903	; 0x8087
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	486c      	ldr	r0, [pc, #432]	; (8001540 <MX_GPIO_Init+0x2f4>)
 8001390:	f001 feac 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001394:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4865      	ldr	r0, [pc, #404]	; (8001540 <MX_GPIO_Init+0x2f4>)
 80013aa:	f001 fe9f 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80013ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	485f      	ldr	r0, [pc, #380]	; (8001544 <MX_GPIO_Init+0x2f8>)
 80013c8:	f001 fe90 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80013cc:	f64d 7347 	movw	r3, #57159	; 0xdf47
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	4858      	ldr	r0, [pc, #352]	; (8001544 <MX_GPIO_Init+0x2f8>)
 80013e2:	f001 fe83 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 80013e6:	f640 0303 	movw	r3, #2051	; 0x803
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	4853      	ldr	r0, [pc, #332]	; (8001548 <MX_GPIO_Init+0x2fc>)
 80013fc:	f001 fe76 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001400:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	484b      	ldr	r0, [pc, #300]	; (8001548 <MX_GPIO_Init+0x2fc>)
 800141a:	f001 fe67 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 800141e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001424:	2303      	movs	r3, #3
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <MX_GPIO_Init+0x2fc>)
 8001434:	f001 fe5a 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8001438:	2308      	movs	r3, #8
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2302      	movs	r3, #2
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	483d      	ldr	r0, [pc, #244]	; (8001544 <MX_GPIO_Init+0x2f8>)
 8001450:	f001 fe4c 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8001454:	f640 6307 	movw	r3, #3591	; 0xe07
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	483b      	ldr	r0, [pc, #236]	; (8001558 <MX_GPIO_Init+0x30c>)
 800146a:	f001 fe3f 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800146e:	f647 0394 	movw	r3, #30868	; 0x7894
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4831      	ldr	r0, [pc, #196]	; (800154c <MX_GPIO_Init+0x300>)
 8001488:	f001 fe30 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 800148c:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	482c      	ldr	r0, [pc, #176]	; (8001554 <MX_GPIO_Init+0x308>)
 80014a2:	f001 fe23 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 80014a6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4824      	ldr	r0, [pc, #144]	; (800154c <MX_GPIO_Init+0x300>)
 80014bc:	f001 fe16 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 80014c0:	f241 5310 	movw	r3, #5392	; 0x1510
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	481e      	ldr	r0, [pc, #120]	; (8001550 <MX_GPIO_Init+0x304>)
 80014d6:	f001 fe09 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80014da:	f64e 2388 	movw	r3, #60040	; 0xea88
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4817      	ldr	r0, [pc, #92]	; (8001550 <MX_GPIO_Init+0x304>)
 80014f4:	f001 fdfa 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80014f8:	f64e 630c 	movw	r3, #60940	; 0xee0c
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4810      	ldr	r0, [pc, #64]	; (8001554 <MX_GPIO_Init+0x308>)
 8001512:	f001 fdeb 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_GPIO_Init+0x2f8>)
 800152a:	f001 fddf 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	e00f      	b.n	800155c <MX_GPIO_Init+0x310>
 800153c:	40023800 	.word	0x40023800
 8001540:	40021000 	.word	0x40021000
 8001544:	40020800 	.word	0x40020800
 8001548:	40021400 	.word	0x40021400
 800154c:	40020400 	.word	0x40020400
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021800 	.word	0x40021800
 8001558:	40020000 	.word	0x40020000
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <MX_GPIO_Init+0x35c>)
 800156a:	f001 fdbf 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 800156e:	2307      	movs	r3, #7
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001572:	2303      	movs	r3, #3
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <MX_GPIO_Init+0x360>)
 8001582:	f001 fdb3 	bl	80030ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001586:	f44f 7358 	mov.w	r3, #864	; 0x360
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158c:	2303      	movs	r3, #3
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_GPIO_Init+0x364>)
 800159c:	f001 fda6 	bl	80030ec <HAL_GPIO_Init>

}
 80015a0:	bf00      	nop
 80015a2:	3738      	adds	r7, #56	; 0x38
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40020400 	.word	0x40020400

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ba:	f000 faea 	bl	8001b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015be:	f000 f92f 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c2:	f7ff fe43 	bl	800124c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015c6:	f000 fa47 	bl	8001a58 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80015ca:	f7ff fda5 	bl	8001118 <MX_CAN3_Init>
  MX_ADC1_Init();
 80015ce:	f7ff fc55 	bl	8000e7c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80015d2:	f7ff f961 	bl	8000898 <readResetSource>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f9af 	bl	800093c <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART  "\nUART3 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80015de:	213a      	movs	r1, #58	; 0x3a
 80015e0:	487c      	ldr	r0, [pc, #496]	; (80017d4 <main+0x220>)
 80015e2:	f7fe ffdd 	bl	80005a0 <uartTransmit>

  	/* Sammel Systeminformationen */
  	collectSystemInfo();
 80015e6:	f7ff f935 	bl	8000854 <collectSystemInfo>
#endif

  	/* Lese alle Eingaenge */
  	readall_inputs();
 80015ea:	f7ff fa47 	bl	8000a7c <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 80015ee:	487a      	ldr	r0, [pc, #488]	; (80017d8 <main+0x224>)
 80015f0:	f000 ffe4 	bl	80025bc <HAL_CAN_Start>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b78      	ldr	r3, [pc, #480]	; (80017dc <main+0x228>)
 80015fa:	701a      	strb	r2, [r3, #0]
 80015fc:	4b77      	ldr	r3, [pc, #476]	; (80017dc <main+0x228>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <main+0x5e>
  	{
  		/* Start Error */
  		hal_error(status);
 8001604:	4b75      	ldr	r3, [pc, #468]	; (80017dc <main+0x228>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fa07 	bl	8000a1c <hal_error>
  		Error_Handler();
 800160e:	f000 f9af 	bl	8001970 <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 8001612:	210a      	movs	r1, #10
 8001614:	4872      	ldr	r0, [pc, #456]	; (80017e0 <main+0x22c>)
 8001616:	f7fe ffc3 	bl	80005a0 <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 800161a:	2102      	movs	r1, #2
 800161c:	486e      	ldr	r0, [pc, #440]	; (80017d8 <main+0x224>)
 800161e:	f001 f9fe 	bl	8002a1e <HAL_CAN_ActivateNotification>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b6d      	ldr	r3, [pc, #436]	; (80017dc <main+0x228>)
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <main+0x228>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <main+0x8c>
  	{
  		/* Notification Error */
  		hal_error(status);
 8001632:	4b6a      	ldr	r3, [pc, #424]	; (80017dc <main+0x228>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff f9f0 	bl	8000a1c <hal_error>
  		Error_Handler();
 800163c:	f000 f998 	bl	8001970 <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8001640:	210d      	movs	r1, #13
 8001642:	4868      	ldr	r0, [pc, #416]	; (80017e4 <main+0x230>)
 8001644:	f7fe ffac 	bl	80005a0 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001648:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <main+0x234>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800164e:	4b66      	ldr	r3, [pc, #408]	; (80017e8 <main+0x234>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001654:	4b64      	ldr	r3, [pc, #400]	; (80017e8 <main+0x234>)
 8001656:	2201      	movs	r2, #1
 8001658:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <main+0x234>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8001660:	4b61      	ldr	r3, [pc, #388]	; (80017e8 <main+0x234>)
 8001662:	2200      	movs	r2, #0
 8001664:	605a      	str	r2, [r3, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001666:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <main+0x234>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 800166c:	4b5e      	ldr	r3, [pc, #376]	; (80017e8 <main+0x234>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
    sFilterConfig.FilterFIFOAssignment = 0;
 8001672:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <main+0x234>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8001678:	4b5b      	ldr	r3, [pc, #364]	; (80017e8 <main+0x234>)
 800167a:	2201      	movs	r2, #1
 800167c:	621a      	str	r2, [r3, #32]

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 800167e:	495a      	ldr	r1, [pc, #360]	; (80017e8 <main+0x234>)
 8001680:	4855      	ldr	r0, [pc, #340]	; (80017d8 <main+0x224>)
 8001682:	f000 feaf 	bl	80023e4 <HAL_CAN_ConfigFilter>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	4b54      	ldr	r3, [pc, #336]	; (80017dc <main+0x228>)
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <main+0x228>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <main+0xf0>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <main+0x228>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f9be 	bl	8000a1c <hal_error>
  		Error_Handler();
 80016a0:	f000 f966 	bl	8001970 <Error_Handler>
    }

    // Sendenachricht erstellen
  	TxMessage.StdId = 0x123;
 80016a4:	4b51      	ldr	r3, [pc, #324]	; (80017ec <main+0x238>)
 80016a6:	f240 1223 	movw	r2, #291	; 0x123
 80016aa:	601a      	str	r2, [r3, #0]
  	TxMessage.ExtId = 0;
 80016ac:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <main+0x238>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  	TxMessage.RTR = CAN_RTR_DATA;
 80016b2:	4b4e      	ldr	r3, [pc, #312]	; (80017ec <main+0x238>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
  	TxMessage.IDE = CAN_ID_STD;
 80016b8:	4b4c      	ldr	r3, [pc, #304]	; (80017ec <main+0x238>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  	TxMessage.DLC = 8;
 80016be:	4b4b      	ldr	r3, [pc, #300]	; (80017ec <main+0x238>)
 80016c0:	2208      	movs	r2, #8
 80016c2:	611a      	str	r2, [r3, #16]
  	TxMessage.TransmitGlobalTime=DISABLE;
 80016c4:	4b49      	ldr	r3, [pc, #292]	; (80017ec <main+0x238>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	751a      	strb	r2, [r3, #20]

  	for (uint8_t j = 0; j < 8; j++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	e008      	b.n	80016e2 <main+0x12e>
  		TxData[j] = (j + 1);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	3201      	adds	r2, #1
 80016d6:	b2d1      	uxtb	r1, r2
 80016d8:	4a45      	ldr	r2, [pc, #276]	; (80017f0 <main+0x23c>)
 80016da:	54d1      	strb	r1, [r2, r3]
  	for (uint8_t j = 0; j < 8; j++)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	3301      	adds	r3, #1
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	2b07      	cmp	r3, #7
 80016e6:	d9f3      	bls.n	80016d0 <main+0x11c>

  	uartTransmit("\nStarte While\n\n", 15);
 80016e8:	210f      	movs	r1, #15
 80016ea:	4842      	ldr	r0, [pc, #264]	; (80017f4 <main+0x240>)
 80016ec:	f7fe ff58 	bl	80005a0 <uartTransmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (millis() - lastcan >= 5)
 80016f0:	f7ff fbbc 	bl	8000e6c <millis>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <main+0x244>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d94b      	bls.n	8001798 <main+0x1e4>
		{
			// Wenn Nachricht über den CAN-Bus empfangen wurde
			if (can_change == 1)
 8001700:	4b3e      	ldr	r3, [pc, #248]	; (80017fc <main+0x248>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d147      	bne.n	8001798 <main+0x1e4>
			{
				// Nachricht ID über UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <main+0x24c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2110      	movs	r1, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff5a 	bl	80005c8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 8001714:	2101      	movs	r1, #1
 8001716:	483b      	ldr	r0, [pc, #236]	; (8001804 <main+0x250>)
 8001718:	f7fe ff42 	bl	80005a0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 800171c:	2300      	movs	r3, #0
 800171e:	71bb      	strb	r3, [r7, #6]
 8001720:	e009      	b.n	8001736 <main+0x182>
				{
					uartTransmitNumber(RxData[i], 16);
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	4a38      	ldr	r2, [pc, #224]	; (8001808 <main+0x254>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	2110      	movs	r1, #16
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff4c 	bl	80005c8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	3301      	adds	r3, #1
 8001734:	71bb      	strb	r3, [r7, #6]
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <main+0x24c>)
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d3f0      	bcc.n	8001722 <main+0x16e>
				}
				uartTransmit("\n", 1);
 8001740:	2101      	movs	r1, #1
 8001742:	4832      	ldr	r0, [pc, #200]	; (800180c <main+0x258>)
 8001744:	f7fe ff2c 	bl	80005a0 <uartTransmit>

				// Sortieren der IDs nach Geräten
				switch (RxMessage.StdId)
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <main+0x24c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f240 1211 	movw	r2, #273	; 0x111
 8001750:	4293      	cmp	r3, r2
 8001752:	d007      	beq.n	8001764 <main+0x1b0>
 8001754:	f240 1281 	movw	r2, #385	; 0x181
 8001758:	4293      	cmp	r3, r2
 800175a:	d108      	bne.n	800176e <main+0x1ba>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0]);
 800175c:	482a      	ldr	r0, [pc, #168]	; (8001808 <main+0x254>)
 800175e:	f7fe feef 	bl	8000540 <BAMOCAN_ID>
						break;
 8001762:	e009      	b.n	8001778 <main+0x1c4>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 8001764:	2117      	movs	r1, #23
 8001766:	482a      	ldr	r0, [pc, #168]	; (8001810 <main+0x25c>)
 8001768:	f7fe ff1a 	bl	80005a0 <uartTransmit>
						break;
 800176c:	e004      	b.n	8001778 <main+0x1c4>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 800176e:	2118      	movs	r1, #24
 8001770:	4828      	ldr	r0, [pc, #160]	; (8001814 <main+0x260>)
 8001772:	f7fe ff15 	bl	80005a0 <uartTransmit>
						break;
 8001776:	bf00      	nop
				}

				TxData[2] = motor1.output[2];
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <main+0x264>)
 800177a:	789a      	ldrb	r2, [r3, #2]
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <main+0x23c>)
 800177e:	709a      	strb	r2, [r3, #2]
				TxData[3] = motor1.output[3];
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <main+0x264>)
 8001782:	78da      	ldrb	r2, [r3, #3]
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <main+0x23c>)
 8001786:	70da      	strb	r2, [r3, #3]
				lastcan = millis();
 8001788:	f7ff fb70 	bl	8000e6c <millis>
 800178c:	4603      	mov	r3, r0
 800178e:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <main+0x244>)
 8001790:	6013      	str	r3, [r2, #0]
				can_change = 0;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <main+0x248>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
			}
		}

		// Sende CAN Nachricht auf CAN-Bus
		if (millis() - lastsendcan >= 993)
 8001798:	f7ff fb68 	bl	8000e6c <millis>
 800179c:	4602      	mov	r2, r0
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <main+0x268>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 80017a8:	d9a2      	bls.n	80016f0 <main+0x13c>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 80017aa:	2301      	movs	r3, #1
 80017ac:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <main+0x23c>)
 80017ae:	490f      	ldr	r1, [pc, #60]	; (80017ec <main+0x238>)
 80017b0:	4809      	ldr	r0, [pc, #36]	; (80017d8 <main+0x224>)
 80017b2:	f000 ff47 	bl	8002644 <HAL_CAN_AddTxMessage>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <main+0x228>)
 80017bc:	701a      	strb	r2, [r3, #0]
			hal_error(status);
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <main+0x228>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff f92a 	bl	8000a1c <hal_error>
			lastsendcan = millis();
 80017c8:	f7ff fb50 	bl	8000e6c <millis>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <main+0x268>)
 80017d0:	6013      	str	r3, [r2, #0]
		if (millis() - lastcan >= 5)
 80017d2:	e78d      	b.n	80016f0 <main+0x13c>
 80017d4:	08005370 	.word	0x08005370
 80017d8:	20000098 	.word	0x20000098
 80017dc:	2000012c 	.word	0x2000012c
 80017e0:	080053ac 	.word	0x080053ac
 80017e4:	080053b8 	.word	0x080053b8
 80017e8:	200000c0 	.word	0x200000c0
 80017ec:	200000f8 	.word	0x200000f8
 80017f0:	200000e8 	.word	0x200000e8
 80017f4:	080053c8 	.word	0x080053c8
 80017f8:	2000002c 	.word	0x2000002c
 80017fc:	20000028 	.word	0x20000028
 8001800:	20000110 	.word	0x20000110
 8001804:	080053d8 	.word	0x080053d8
 8001808:	200000f0 	.word	0x200000f0
 800180c:	080053dc 	.word	0x080053dc
 8001810:	080053e0 	.word	0x080053e0
 8001814:	080053f8 	.word	0x080053f8
 8001818:	2000003c 	.word	0x2000003c
 800181c:	20000030 	.word	0x20000030

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0b8      	sub	sp, #224	; 0xe0
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800182a:	2234      	movs	r2, #52	; 0x34
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f003 fc06 	bl	8005040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	2290      	movs	r2, #144	; 0x90
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fbf7 	bl	8005040 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b39      	ldr	r3, [pc, #228]	; (8001938 <SystemClock_Config+0x118>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a38      	ldr	r2, [pc, #224]	; (8001938 <SystemClock_Config+0x118>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <SystemClock_Config+0x118>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800186a:	4b34      	ldr	r3, [pc, #208]	; (800193c <SystemClock_Config+0x11c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001872:	4a32      	ldr	r2, [pc, #200]	; (800193c <SystemClock_Config+0x11c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <SystemClock_Config+0x11c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001886:	2301      	movs	r3, #1
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800188c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80018a2:	2319      	movs	r3, #25
 80018a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80018a8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80018ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018c0:	4618      	mov	r0, r3
 80018c2:	f001 fe41 	bl	8003548 <HAL_RCC_OscConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80018cc:	f000 f850 	bl	8001970 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018d0:	f001 fdea 	bl	80034a8 <HAL_PWREx_EnableOverDrive>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80018da:	f000 f849 	bl	8001970 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018de:	230f      	movs	r3, #15
 80018e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e4:	2302      	movs	r3, #2
 80018e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001902:	2103      	movs	r1, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f002 f8cd 	bl	8003aa4 <HAL_RCC_ClockConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001910:	f000 f82e 	bl	8001970 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001918:	2300      	movs	r3, #0
 800191a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191c:	f107 0308 	add.w	r3, r7, #8
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fa95 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800192c:	f000 f820 	bl	8001970 <Error_Handler>
  }
}
 8001930:	bf00      	nop
 8001932:	37e0      	adds	r7, #224	; 0xe0
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000

08001940 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800194a:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 800194c:	2100      	movs	r1, #0
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 ff53 	bl	80027fa <HAL_CAN_GetRxMessage>
	can_change = 1;
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200000f0 	.word	0x200000f0
 8001968:	20000110 	.word	0x20000110
 800196c:	20000028 	.word	0x20000028

08001970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001974:	b672      	cpsid	i
}
 8001976:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001978:	e7fe      	b.n	8001978 <Error_Handler+0x8>
	...

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x44>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_MspInit+0x44>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x44>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_MspInit+0x44>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_MspInit+0x44>)
 80019a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a4:	6453      	str	r3, [r2, #68]	; 0x44
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_MspInit+0x44>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <NMI_Handler+0x4>

080019ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <HardFault_Handler+0x4>

080019d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <MemManage_Handler+0x4>

080019d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019da:	e7fe      	b.n	80019da <BusFault_Handler+0x4>

080019dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <UsageFault_Handler+0x4>

080019e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a10:	f000 f8fc 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <CAN3_RX0_IRQHandler+0x10>)
 8001a1e:	f001 f824 	bl	8002a6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000098 	.word	0x20000098

08001a2c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <SystemInit+0x28>)
 8001a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <SystemInit+0x28>)
 8001a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SystemInit+0x28>)
 8001a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a46:	609a      	str	r2, [r3, #8]
#endif
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <MX_USART2_UART_Init+0x5c>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_USART2_UART_Init+0x58>)
 8001a9c:	f002 fe00 	bl	80046a0 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001aa6:	f7ff ff63 	bl	8001970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000130 	.word	0x20000130
 8001ab4:	40004400 	.word	0x40004400

08001ab8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_UART_MspInit+0x7c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d127      	bne.n	8001b2a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ada:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_UART_MspInit+0x80>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a16      	ldr	r2, [pc, #88]	; (8001b38 <HAL_UART_MspInit+0x80>)
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_UART_MspInit+0x80>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_UART_MspInit+0x80>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <HAL_UART_MspInit+0x80>)
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_UART_MspInit+0x80>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8001b0a:	2360      	movs	r3, #96	; 0x60
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <HAL_UART_MspInit+0x84>)
 8001b26:	f001 fae1 	bl	80030ec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	; 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40004400 	.word	0x40004400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020c00 	.word	0x40020c00

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b46:	e003      	b.n	8001b50 <LoopCopyDataInit>

08001b48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b4e:	3104      	adds	r1, #4

08001b50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b50:	480b      	ldr	r0, [pc, #44]	; (8001b80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b58:	d3f6      	bcc.n	8001b48 <CopyDataInit>
  ldr  r2, =_sbss
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b5c:	e002      	b.n	8001b64 <LoopFillZerobss>

08001b5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b60:	f842 3b04 	str.w	r3, [r2], #4

08001b64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b64:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b68:	d3f9      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b6a:	f7ff ff5f 	bl	8001a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f003 fa43 	bl	8004ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff fd1f 	bl	80015b4 <main>
  bx  lr    
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b78:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001b7c:	08005464 	.word	0x08005464
  ldr  r0, =_sdata
 8001b80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b84:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001b88:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001b8c:	200001b8 	.word	0x200001b8

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>

08001b92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b96:	2003      	movs	r0, #3
 8001b98:	f001 fa66 	bl	8003068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f000 f805 	bl	8001bac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001ba2:	f7ff feeb 	bl	800197c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 fa81 	bl	80030d2 <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f001 fa49 	bl	800307e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	; (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	200001b4 	.word	0x200001b4

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	200001b4 	.word	0x200001b4

08001c4c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8001c50:	4b02      	ldr	r3, [pc, #8]	; (8001c5c <HAL_GetHalVersion+0x10>)
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	01020900 	.word	0x01020900

08001c60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetREVID+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0c1b      	lsrs	r3, r3, #16
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e0042000 	.word	0xe0042000

08001c78 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_GetDEVID+0x18>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e0042000 	.word	0xe0042000

08001c94 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001c98:	4b03      	ldr	r3, [pc, #12]	; (8001ca8 <HAL_GetUIDw0+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	1ff0f420 	.word	0x1ff0f420

08001cac <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetUIDw1+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	1ff0f424 	.word	0x1ff0f424

08001cc4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetUIDw2+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	1ff0f428 	.word	0x1ff0f428

08001cdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e031      	b.n	8001d56 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff f998 	bl	8001030 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_ADC_Init+0x84>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	f043 0202 	orr.w	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f964 	bl	8001ff8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	f023 0303 	bic.w	r3, r3, #3
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
 8001d46:	e001      	b.n	8001d4c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	ffffeefd 	.word	0xffffeefd

08001d64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1c>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e12a      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x272>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d93a      	bls.n	8001e06 <HAL_ADC_ConfigChannel+0xa2>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d98:	d035      	beq.n	8001e06 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68d9      	ldr	r1, [r3, #12]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	461a      	mov	r2, r3
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	3b1e      	subs	r3, #30
 8001db0:	2207      	movs	r2, #7
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <HAL_ADC_ConfigChannel+0x280>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d10a      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68d9      	ldr	r1, [r3, #12]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	061a      	lsls	r2, r3, #24
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dde:	e035      	b.n	8001e4c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68d9      	ldr	r1, [r3, #12]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4618      	mov	r0, r3
 8001df2:	4603      	mov	r3, r0
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4403      	add	r3, r0
 8001df8:	3b1e      	subs	r3, #30
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e04:	e022      	b.n	8001e4c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6919      	ldr	r1, [r3, #16]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43da      	mvns	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	400a      	ands	r2, r1
 8001e28:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6919      	ldr	r1, [r3, #16]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4403      	add	r3, r0
 8001e42:	409a      	lsls	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b06      	cmp	r3, #6
 8001e52:	d824      	bhi.n	8001e9e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b05      	subs	r3, #5
 8001e66:	221f      	movs	r2, #31
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	400a      	ands	r2, r1
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b05      	subs	r3, #5
 8001e90:	fa00 f203 	lsl.w	r2, r0, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e9c:	e04c      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	d824      	bhi.n	8001ef0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b23      	subs	r3, #35	; 0x23
 8001eb8:	221f      	movs	r2, #31
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b23      	subs	r3, #35	; 0x23
 8001ee2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	631a      	str	r2, [r3, #48]	; 0x30
 8001eee:	e023      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b41      	subs	r3, #65	; 0x41
 8001f02:	221f      	movs	r2, #31
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43da      	mvns	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	400a      	ands	r2, r1
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b41      	subs	r3, #65	; 0x41
 8001f2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a2a      	ldr	r2, [pc, #168]	; (8001fe8 <HAL_ADC_ConfigChannel+0x284>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10a      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1f4>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f4a:	d105      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_ADC_ConfigChannel+0x288>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a26      	ldr	r2, [pc, #152]	; (8001fec <HAL_ADC_ConfigChannel+0x288>)
 8001f52:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f56:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <HAL_ADC_ConfigChannel+0x284>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d109      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x212>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b12      	cmp	r3, #18
 8001f68:	d105      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001f6a:	4b20      	ldr	r3, [pc, #128]	; (8001fec <HAL_ADC_ConfigChannel+0x288>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <HAL_ADC_ConfigChannel+0x288>)
 8001f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f74:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <HAL_ADC_ConfigChannel+0x284>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d125      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x268>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <HAL_ADC_ConfigChannel+0x280>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d003      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x22e>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b11      	cmp	r3, #17
 8001f90:	d11c      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_ADC_ConfigChannel+0x288>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <HAL_ADC_ConfigChannel+0x288>)
 8001f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f9c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_ADC_ConfigChannel+0x280>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d111      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_ADC_ConfigChannel+0x28c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a11      	ldr	r2, [pc, #68]	; (8001ff4 <HAL_ADC_ConfigChannel+0x290>)
 8001fae:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb2:	0c9a      	lsrs	r2, r3, #18
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001fbe:	e002      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1f9      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	10000012 	.word	0x10000012
 8001fe8:	40012000 	.word	0x40012000
 8001fec:	40012300 	.word	0x40012300
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	431bde83 	.word	0x431bde83

08001ff8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002000:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <ADC_Init+0x1ec>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <ADC_Init+0x1ec>)
 8002006:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800200a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800200c:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <ADC_Init+0x1ec>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4973      	ldr	r1, [pc, #460]	; (80021e4 <ADC_Init+0x1ec>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	021a      	lsls	r2, r3, #8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800204c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800206e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <ADC_Init+0x1f0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d022      	beq.n	80020d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800209a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6899      	ldr	r1, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	e00f      	b.n	80020f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0202 	bic.w	r2, r2, #2
 8002100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	005a      	lsls	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800212e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800213e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	3b01      	subs	r3, #1
 800214c:	035a      	lsls	r2, r3, #13
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	e007      	b.n	8002168 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002166:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	3b01      	subs	r3, #1
 8002184:	051a      	lsls	r2, r3, #20
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800219c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021aa:	025a      	lsls	r2, r3, #9
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6899      	ldr	r1, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	029a      	lsls	r2, r3, #10
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	609a      	str	r2, [r3, #8]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	40012300 	.word	0x40012300
 80021e8:	0f000001 	.word	0x0f000001

080021ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0ed      	b.n	80023da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d102      	bne.n	8002210 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe ffba 	bl	8001184 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0202 	bic.w	r2, r2, #2
 800221e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002220:	f7ff fd08 	bl	8001c34 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002226:	e012      	b.n	800224e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002228:	f7ff fd04 	bl	8001c34 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b0a      	cmp	r3, #10
 8002234:	d90b      	bls.n	800224e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2205      	movs	r2, #5
 8002246:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0c5      	b.n	80023da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1e5      	bne.n	8002228 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800226c:	f7ff fce2 	bl	8001c34 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002272:	e012      	b.n	800229a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002274:	f7ff fcde 	bl	8001c34 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b0a      	cmp	r3, #10
 8002280:	d90b      	bls.n	800229a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2205      	movs	r2, #5
 8002292:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e09f      	b.n	80023da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0e5      	beq.n	8002274 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7e1b      	ldrb	r3, [r3, #24]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d108      	bne.n	80022c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e007      	b.n	80022d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	7e5b      	ldrb	r3, [r3, #25]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d108      	bne.n	80022ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e007      	b.n	80022fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	7e9b      	ldrb	r3, [r3, #26]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d108      	bne.n	8002316 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0220 	orr.w	r2, r2, #32
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	e007      	b.n	8002326 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0220 	bic.w	r2, r2, #32
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7edb      	ldrb	r3, [r3, #27]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0210 	bic.w	r2, r2, #16
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e007      	b.n	8002350 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0210 	orr.w	r2, r2, #16
 800234e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7f1b      	ldrb	r3, [r3, #28]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d108      	bne.n	800236a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0208 	orr.w	r2, r2, #8
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	e007      	b.n	800237a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0208 	bic.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7f5b      	ldrb	r3, [r3, #29]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d108      	bne.n	8002394 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0204 	orr.w	r2, r2, #4
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e007      	b.n	80023a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0204 	bic.w	r2, r2, #4
 80023a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	ea42 0103 	orr.w	r1, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d003      	beq.n	800240a <HAL_CAN_ConfigFilter+0x26>
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	2b02      	cmp	r3, #2
 8002406:	f040 80c7 	bne.w	8002598 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_CAN_ConfigFilter+0x1d0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d001      	beq.n	8002418 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002414:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_CAN_ConfigFilter+0x1d4>)
 8002416:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800241e:	f043 0201 	orr.w	r2, r3, #1
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4a63      	ldr	r2, [pc, #396]	; (80025b8 <HAL_CAN_ConfigFilter+0x1d4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d111      	bne.n	8002454 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002436:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	431a      	orrs	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2201      	movs	r2, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d123      	bne.n	80024c6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43db      	mvns	r3, r3
 8002488:	401a      	ands	r2, r3
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3248      	adds	r2, #72	; 0x48
 80024a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024bc:	6979      	ldr	r1, [r7, #20]
 80024be:	3348      	adds	r3, #72	; 0x48
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	440b      	add	r3, r1
 80024c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d122      	bne.n	8002514 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3248      	adds	r2, #72	; 0x48
 80024f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002508:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800250a:	6979      	ldr	r1, [r7, #20]
 800250c:	3348      	adds	r3, #72	; 0x48
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800252e:	e007      	b.n	8002540 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	431a      	orrs	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800255a:	e007      	b.n	800256c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	431a      	orrs	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d107      	bne.n	8002584 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800258a:	f023 0201 	bic.w	r2, r3, #1
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e006      	b.n	80025a6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40003400 	.word	0x40003400
 80025b8:	40006400 	.word	0x40006400

080025bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d12e      	bne.n	800262e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025e8:	f7ff fb24 	bl	8001c34 <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025ee:	e012      	b.n	8002616 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025f0:	f7ff fb20 	bl	8001c34 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b0a      	cmp	r3, #10
 80025fc:	d90b      	bls.n	8002616 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2205      	movs	r2, #5
 800260e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e012      	b.n	800263c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e5      	bne.n	80025f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e006      	b.n	800263c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002658:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002662:	7ffb      	ldrb	r3, [r7, #31]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d003      	beq.n	8002670 <HAL_CAN_AddTxMessage+0x2c>
 8002668:	7ffb      	ldrb	r3, [r7, #31]
 800266a:	2b02      	cmp	r3, #2
 800266c:	f040 80b8 	bne.w	80027e0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80a0 	beq.w	80027d0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	0e1b      	lsrs	r3, r3, #24
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d907      	bls.n	80026b0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e09e      	b.n	80027ee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026b0:	2201      	movs	r2, #1
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	409a      	lsls	r2, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	6809      	ldr	r1, [r1, #0]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3318      	adds	r3, #24
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	440b      	add	r3, r1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e00f      	b.n	80026fe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026ee:	68f9      	ldr	r1, [r7, #12]
 80026f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	3318      	adds	r3, #24
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	440b      	add	r3, r1
 80026fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6819      	ldr	r1, [r3, #0]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3318      	adds	r3, #24
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	440b      	add	r3, r1
 800270e:	3304      	adds	r3, #4
 8002710:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	7d1b      	ldrb	r3, [r3, #20]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d111      	bne.n	800273e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3318      	adds	r3, #24
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	4413      	add	r3, r2
 8002726:	3304      	adds	r3, #4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	6811      	ldr	r1, [r2, #0]
 800272e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3318      	adds	r3, #24
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	440b      	add	r3, r1
 800273a:	3304      	adds	r3, #4
 800273c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3307      	adds	r3, #7
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	061a      	lsls	r2, r3, #24
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3306      	adds	r3, #6
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3305      	adds	r3, #5
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	4313      	orrs	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	3204      	adds	r2, #4
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	4610      	mov	r0, r2
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	6811      	ldr	r1, [r2, #0]
 8002766:	ea43 0200 	orr.w	r2, r3, r0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	440b      	add	r3, r1
 8002770:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002774:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3303      	adds	r3, #3
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	061a      	lsls	r2, r3, #24
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3302      	adds	r3, #2
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3301      	adds	r3, #1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	4313      	orrs	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	4610      	mov	r0, r2
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	6811      	ldr	r1, [r2, #0]
 800279c:	ea43 0200 	orr.w	r2, r3, r0
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	440b      	add	r3, r1
 80027a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	3318      	adds	r3, #24
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	4413      	add	r3, r2
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	6811      	ldr	r1, [r2, #0]
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3318      	adds	r3, #24
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	440b      	add	r3, r1
 80027ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e00e      	b.n	80027ee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e006      	b.n	80027ee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d003      	beq.n	800281e <HAL_CAN_GetRxMessage+0x24>
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b02      	cmp	r3, #2
 800281a:	f040 80f3 	bne.w	8002a04 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10e      	bne.n	8002842 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0e7      	b.n	8002a12 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0d8      	b.n	8002a12 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	331b      	adds	r3, #27
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4413      	add	r3, r2
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0204 	and.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	331b      	adds	r3, #27
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	4413      	add	r3, r2
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0d5b      	lsrs	r3, r3, #21
 800288e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	331b      	adds	r3, #27
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	4413      	add	r3, r2
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	331b      	adds	r3, #27
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4413      	add	r3, r2
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0202 	and.w	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	331b      	adds	r3, #27
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	4413      	add	r3, r2
 80028d2:	3304      	adds	r3, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 020f 	and.w	r2, r3, #15
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	331b      	adds	r3, #27
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	331b      	adds	r3, #27
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	0c1b      	lsrs	r3, r3, #16
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	4413      	add	r3, r2
 8002918:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	4413      	add	r3, r2
 800292e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	0a1a      	lsrs	r2, r3, #8
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	4413      	add	r3, r2
 8002948:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	0c1a      	lsrs	r2, r3, #16
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	3302      	adds	r3, #2
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	4413      	add	r3, r2
 8002962:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e1a      	lsrs	r2, r3, #24
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3303      	adds	r3, #3
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	4413      	add	r3, r2
 800297c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	3304      	adds	r3, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4413      	add	r3, r2
 8002994:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0a1a      	lsrs	r2, r3, #8
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	3305      	adds	r3, #5
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	0c1a      	lsrs	r2, r3, #16
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	3306      	adds	r3, #6
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0e1a      	lsrs	r2, r3, #24
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	3307      	adds	r3, #7
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d108      	bne.n	80029f0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0220 	orr.w	r2, r2, #32
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	e007      	b.n	8002a00 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0220 	orr.w	r2, r2, #32
 80029fe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e006      	b.n	8002a12 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
  }
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b085      	sub	sp, #20
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d002      	beq.n	8002a3c <HAL_CAN_ActivateNotification+0x1e>
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d109      	bne.n	8002a50 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6959      	ldr	r1, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e006      	b.n	8002a5e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b08a      	sub	sp, #40	; 0x28
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d07c      	beq.n	8002baa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d023      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f983 	bl	8002dd8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ad2:	e016      	b.n	8002b02 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae6:	e00c      	b.n	8002b02 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e002      	b.n	8002b02 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f989 	bl	8002e14 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d024      	beq.n	8002b56 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d003      	beq.n	8002b28 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f963 	bl	8002dec <HAL_CAN_TxMailbox1CompleteCallback>
 8002b26:	e016      	b.n	8002b56 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	e00c      	b.n	8002b56 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	e002      	b.n	8002b56 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f969 	bl	8002e28 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d024      	beq.n	8002baa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f943 	bl	8002e00 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b7a:	e016      	b.n	8002baa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d004      	beq.n	8002b90 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e00c      	b.n	8002baa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	e002      	b.n	8002baa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f949 	bl	8002e3c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2210      	movs	r2, #16
 8002bcc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d006      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2208      	movs	r2, #8
 8002be8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f930 	bl	8002e50 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f7fe fe99 	bl	8001940 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2210      	movs	r2, #16
 8002c30:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00b      	beq.n	8002c54 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f912 	bl	8002e78 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f8f9 	bl	8002e64 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00b      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f8fc 	bl	8002e8c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2208      	movs	r2, #8
 8002cae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f8f5 	bl	8002ea0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d07b      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d072      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d008      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f043 0302 	orr.w	r3, r3, #2
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	f043 0304 	orr.w	r3, r3, #4
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d043      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d03e      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d38:	2b60      	cmp	r3, #96	; 0x60
 8002d3a:	d02b      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x32a>
 8002d3c:	2b60      	cmp	r3, #96	; 0x60
 8002d3e:	d82e      	bhi.n	8002d9e <HAL_CAN_IRQHandler+0x334>
 8002d40:	2b50      	cmp	r3, #80	; 0x50
 8002d42:	d022      	beq.n	8002d8a <HAL_CAN_IRQHandler+0x320>
 8002d44:	2b50      	cmp	r3, #80	; 0x50
 8002d46:	d82a      	bhi.n	8002d9e <HAL_CAN_IRQHandler+0x334>
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d019      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x316>
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d826      	bhi.n	8002d9e <HAL_CAN_IRQHandler+0x334>
 8002d50:	2b30      	cmp	r3, #48	; 0x30
 8002d52:	d010      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x30c>
 8002d54:	2b30      	cmp	r3, #48	; 0x30
 8002d56:	d822      	bhi.n	8002d9e <HAL_CAN_IRQHandler+0x334>
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d002      	beq.n	8002d62 <HAL_CAN_IRQHandler+0x2f8>
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d005      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d60:	e01d      	b.n	8002d9e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d6a:	e019      	b.n	8002da0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	f043 0310 	orr.w	r3, r3, #16
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d74:	e014      	b.n	8002da0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f043 0320 	orr.w	r3, r3, #32
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d7e:	e00f      	b.n	8002da0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d88:	e00a      	b.n	8002da0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d92:	e005      	b.n	8002da0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d9c:	e000      	b.n	8002da0 <HAL_CAN_IRQHandler+0x336>
            break;
 8002d9e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699a      	ldr	r2, [r3, #24]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2204      	movs	r2, #4
 8002db6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d008      	beq.n	8002dd0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f872 	bl	8002eb4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <__NVIC_SetPriorityGrouping+0x40>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00
 8002f0c:	05fa0000 	.word	0x05fa0000

08002f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <__NVIC_GetPriorityGrouping+0x18>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	f003 0307 	and.w	r3, r3, #7
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	db0b      	blt.n	8002f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	4907      	ldr	r1, [pc, #28]	; (8002f64 <__NVIC_EnableIRQ+0x38>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000e100 	.word	0xe000e100

08002f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db0a      	blt.n	8002f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	490c      	ldr	r1, [pc, #48]	; (8002fb4 <__NVIC_SetPriority+0x4c>)
 8002f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f90:	e00a      	b.n	8002fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <__NVIC_SetPriority+0x50>)
 8002f98:	79fb      	ldrb	r3, [r7, #7]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	761a      	strb	r2, [r3, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f1c3 0307 	rsb	r3, r3, #7
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	bf28      	it	cs
 8002fda:	2304      	movcs	r3, #4
 8002fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d902      	bls.n	8002fec <NVIC_EncodePriority+0x30>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3b03      	subs	r3, #3
 8002fea:	e000      	b.n	8002fee <NVIC_EncodePriority+0x32>
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	401a      	ands	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003004:	f04f 31ff 	mov.w	r1, #4294967295
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43d9      	mvns	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	4313      	orrs	r3, r2
         );
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	; 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003034:	d301      	bcc.n	800303a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003036:	2301      	movs	r3, #1
 8003038:	e00f      	b.n	800305a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <SysTick_Config+0x40>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003042:	210f      	movs	r1, #15
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f7ff ff8e 	bl	8002f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <SysTick_Config+0x40>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <SysTick_Config+0x40>)
 8003054:	2207      	movs	r2, #7
 8003056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	e000e010 	.word	0xe000e010

08003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff29 	bl	8002ec8 <__NVIC_SetPriorityGrouping>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800308c:	2300      	movs	r3, #0
 800308e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003090:	f7ff ff3e 	bl	8002f10 <__NVIC_GetPriorityGrouping>
 8003094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	6978      	ldr	r0, [r7, #20]
 800309c:	f7ff ff8e 	bl	8002fbc <NVIC_EncodePriority>
 80030a0:	4602      	mov	r2, r0
 80030a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff5d 	bl	8002f68 <__NVIC_SetPriority>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4603      	mov	r3, r0
 80030be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff31 	bl	8002f2c <__NVIC_EnableIRQ>
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff ffa2 	bl	8003024 <SysTick_Config>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e175      	b.n	80033f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800310c:	2201      	movs	r2, #1
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	429a      	cmp	r2, r3
 8003126:	f040 8164 	bne.w	80033f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d00b      	beq.n	800314a <HAL_GPIO_Init+0x5e>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800313e:	2b11      	cmp	r3, #17
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b12      	cmp	r3, #18
 8003148:	d130      	bne.n	80031ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	2203      	movs	r2, #3
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003180:	2201      	movs	r2, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 0201 	and.w	r2, r3, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_Init+0x100>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b12      	cmp	r3, #18
 80031ea:	d123      	bne.n	8003234 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	08da      	lsrs	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3208      	adds	r2, #8
 80031f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	08da      	lsrs	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3208      	adds	r2, #8
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80be 	beq.w	80033f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_GPIO_Init+0x324>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4a65      	ldr	r2, [pc, #404]	; (8003410 <HAL_GPIO_Init+0x324>)
 800327c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003280:	6453      	str	r3, [r2, #68]	; 0x44
 8003282:	4b63      	ldr	r3, [pc, #396]	; (8003410 <HAL_GPIO_Init+0x324>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800328e:	4a61      	ldr	r2, [pc, #388]	; (8003414 <HAL_GPIO_Init+0x328>)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	220f      	movs	r2, #15
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	4013      	ands	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_GPIO_Init+0x32c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d037      	beq.n	800332a <HAL_GPIO_Init+0x23e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a57      	ldr	r2, [pc, #348]	; (800341c <HAL_GPIO_Init+0x330>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d031      	beq.n	8003326 <HAL_GPIO_Init+0x23a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a56      	ldr	r2, [pc, #344]	; (8003420 <HAL_GPIO_Init+0x334>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d02b      	beq.n	8003322 <HAL_GPIO_Init+0x236>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a55      	ldr	r2, [pc, #340]	; (8003424 <HAL_GPIO_Init+0x338>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d025      	beq.n	800331e <HAL_GPIO_Init+0x232>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a54      	ldr	r2, [pc, #336]	; (8003428 <HAL_GPIO_Init+0x33c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01f      	beq.n	800331a <HAL_GPIO_Init+0x22e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a53      	ldr	r2, [pc, #332]	; (800342c <HAL_GPIO_Init+0x340>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d019      	beq.n	8003316 <HAL_GPIO_Init+0x22a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a52      	ldr	r2, [pc, #328]	; (8003430 <HAL_GPIO_Init+0x344>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_GPIO_Init+0x226>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a51      	ldr	r2, [pc, #324]	; (8003434 <HAL_GPIO_Init+0x348>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00d      	beq.n	800330e <HAL_GPIO_Init+0x222>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a50      	ldr	r2, [pc, #320]	; (8003438 <HAL_GPIO_Init+0x34c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x21e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4f      	ldr	r2, [pc, #316]	; (800343c <HAL_GPIO_Init+0x350>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_GPIO_Init+0x21a>
 8003302:	2309      	movs	r3, #9
 8003304:	e012      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003306:	230a      	movs	r3, #10
 8003308:	e010      	b.n	800332c <HAL_GPIO_Init+0x240>
 800330a:	2308      	movs	r3, #8
 800330c:	e00e      	b.n	800332c <HAL_GPIO_Init+0x240>
 800330e:	2307      	movs	r3, #7
 8003310:	e00c      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003312:	2306      	movs	r3, #6
 8003314:	e00a      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003316:	2305      	movs	r3, #5
 8003318:	e008      	b.n	800332c <HAL_GPIO_Init+0x240>
 800331a:	2304      	movs	r3, #4
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x240>
 800331e:	2303      	movs	r3, #3
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x240>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x240>
 800332a:	2300      	movs	r3, #0
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	f002 0203 	and.w	r2, r2, #3
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800333c:	4935      	ldr	r1, [pc, #212]	; (8003414 <HAL_GPIO_Init+0x328>)
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <HAL_GPIO_Init+0x354>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800336e:	4a34      	ldr	r2, [pc, #208]	; (8003440 <HAL_GPIO_Init+0x354>)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_GPIO_Init+0x354>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003398:	4a29      	ldr	r2, [pc, #164]	; (8003440 <HAL_GPIO_Init+0x354>)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339e:	4b28      	ldr	r3, [pc, #160]	; (8003440 <HAL_GPIO_Init+0x354>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c2:	4a1f      	ldr	r2, [pc, #124]	; (8003440 <HAL_GPIO_Init+0x354>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c8:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_GPIO_Init+0x354>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ec:	4a14      	ldr	r2, [pc, #80]	; (8003440 <HAL_GPIO_Init+0x354>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3301      	adds	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	f67f ae86 	bls.w	800310c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	3724      	adds	r7, #36	; 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800
 8003414:	40013800 	.word	0x40013800
 8003418:	40020000 	.word	0x40020000
 800341c:	40020400 	.word	0x40020400
 8003420:	40020800 	.word	0x40020800
 8003424:	40020c00 	.word	0x40020c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40021400 	.word	0x40021400
 8003430:	40021800 	.word	0x40021800
 8003434:	40021c00 	.word	0x40021c00
 8003438:	40022000 	.word	0x40022000
 800343c:	40022400 	.word	0x40022400
 8003440:	40013c00 	.word	0x40013c00

08003444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
 8003460:	e001      	b.n	8003466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
 8003480:	4613      	mov	r3, r2
 8003482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003484:	787b      	ldrb	r3, [r7, #1]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003490:	e003      	b.n	800349a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	041a      	lsls	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	619a      	str	r2, [r3, #24]
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_PWREx_EnableOverDrive+0x98>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	4a22      	ldr	r2, [pc, #136]	; (8003540 <HAL_PWREx_EnableOverDrive+0x98>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6413      	str	r3, [r2, #64]	; 0x40
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_PWREx_EnableOverDrive+0x98>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	603b      	str	r3, [r7, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80034ca:	4b1e      	ldr	r3, [pc, #120]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d6:	f7fe fbad 	bl	8001c34 <HAL_GetTick>
 80034da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034dc:	e009      	b.n	80034f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034de:	f7fe fba9 	bl	8001c34 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034ec:	d901      	bls.n	80034f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e022      	b.n	8003538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034f2:	4b14      	ldr	r3, [pc, #80]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fe:	d1ee      	bne.n	80034de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003500:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0f      	ldr	r2, [pc, #60]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800350a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800350c:	f7fe fb92 	bl	8001c34 <HAL_GetTick>
 8003510:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003512:	e009      	b.n	8003528 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003514:	f7fe fb8e 	bl	8001c34 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003522:	d901      	bls.n	8003528 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e007      	b.n	8003538 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_PWREx_EnableOverDrive+0x9c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003534:	d1ee      	bne.n	8003514 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40023800 	.word	0x40023800
 8003544:	40007000 	.word	0x40007000

08003548 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e29b      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8087 	beq.w	800367a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800356c:	4b96      	ldr	r3, [pc, #600]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 030c 	and.w	r3, r3, #12
 8003574:	2b04      	cmp	r3, #4
 8003576:	d00c      	beq.n	8003592 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003578:	4b93      	ldr	r3, [pc, #588]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	2b08      	cmp	r3, #8
 8003582:	d112      	bne.n	80035aa <HAL_RCC_OscConfig+0x62>
 8003584:	4b90      	ldr	r3, [pc, #576]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003590:	d10b      	bne.n	80035aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003592:	4b8d      	ldr	r3, [pc, #564]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d06c      	beq.n	8003678 <HAL_RCC_OscConfig+0x130>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d168      	bne.n	8003678 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e275      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x7a>
 80035b4:	4b84      	ldr	r3, [pc, #528]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a83      	ldr	r2, [pc, #524]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	e02e      	b.n	8003620 <HAL_RCC_OscConfig+0xd8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x9c>
 80035ca:	4b7f      	ldr	r3, [pc, #508]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a7e      	ldr	r2, [pc, #504]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b7c      	ldr	r3, [pc, #496]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a7b      	ldr	r2, [pc, #492]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e01d      	b.n	8003620 <HAL_RCC_OscConfig+0xd8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0xc0>
 80035ee:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a75      	ldr	r2, [pc, #468]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b73      	ldr	r3, [pc, #460]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a72      	ldr	r2, [pc, #456]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0xd8>
 8003608:	4b6f      	ldr	r3, [pc, #444]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a6e      	ldr	r2, [pc, #440]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b6c      	ldr	r3, [pc, #432]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6b      	ldr	r2, [pc, #428]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe fb04 	bl	8001c34 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7fe fb00 	bl	8001c34 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e229      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b61      	ldr	r3, [pc, #388]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0xe8>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fe faf0 	bl	8001c34 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003658:	f7fe faec 	bl	8001c34 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e215      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b57      	ldr	r3, [pc, #348]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x110>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d069      	beq.n	800375a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003686:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b4d      	ldr	r3, [pc, #308]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b08      	cmp	r3, #8
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x190>
 800369e:	4b4a      	ldr	r3, [pc, #296]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b47      	ldr	r3, [pc, #284]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x17a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1e9      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b41      	ldr	r3, [pc, #260]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	493d      	ldr	r1, [pc, #244]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e040      	b.n	800375a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d023      	beq.n	8003728 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a38      	ldr	r2, [pc, #224]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe faa2 	bl	8001c34 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe fa9e 	bl	8001c34 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e1c7      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b30      	ldr	r3, [pc, #192]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4929      	ldr	r1, [pc, #164]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
 8003726:	e018      	b.n	800375a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003728:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a26      	ldr	r2, [pc, #152]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003734:	f7fe fa7e 	bl	8001c34 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800373c:	f7fe fa7a 	bl	8001c34 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1a3      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d038      	beq.n	80037d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d019      	beq.n	80037a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003772:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fe fa5b 	bl	8001c34 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003782:	f7fe fa57 	bl	8001c34 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e180      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 8003796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x23a>
 80037a0:	e01a      	b.n	80037d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a2:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80037a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a6:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <HAL_RCC_OscConfig+0x280>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ae:	f7fe fa41 	bl	8001c34 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037b6:	f7fe fa3d 	bl	8001c34 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d903      	bls.n	80037cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e166      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
 80037c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b92      	ldr	r3, [pc, #584]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80037ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1ee      	bne.n	80037b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a4 	beq.w	800392e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037e6:	4b8c      	ldr	r3, [pc, #560]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f2:	4b89      	ldr	r3, [pc, #548]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a88      	ldr	r2, [pc, #544]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80037f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b86      	ldr	r3, [pc, #536]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003806:	60bb      	str	r3, [r7, #8]
 8003808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380a:	2301      	movs	r3, #1
 800380c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800380e:	4b83      	ldr	r3, [pc, #524]	; (8003a1c <HAL_RCC_OscConfig+0x4d4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003816:	2b00      	cmp	r3, #0
 8003818:	d118      	bne.n	800384c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800381a:	4b80      	ldr	r3, [pc, #512]	; (8003a1c <HAL_RCC_OscConfig+0x4d4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a7f      	ldr	r2, [pc, #508]	; (8003a1c <HAL_RCC_OscConfig+0x4d4>)
 8003820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003826:	f7fe fa05 	bl	8001c34 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382e:	f7fe fa01 	bl	8001c34 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b64      	cmp	r3, #100	; 0x64
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e12a      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003840:	4b76      	ldr	r3, [pc, #472]	; (8003a1c <HAL_RCC_OscConfig+0x4d4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d106      	bne.n	8003862 <HAL_RCC_OscConfig+0x31a>
 8003854:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a6f      	ldr	r2, [pc, #444]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	e02d      	b.n	80038be <HAL_RCC_OscConfig+0x376>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10c      	bne.n	8003884 <HAL_RCC_OscConfig+0x33c>
 800386a:	4b6b      	ldr	r3, [pc, #428]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	4a6a      	ldr	r2, [pc, #424]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	6713      	str	r3, [r2, #112]	; 0x70
 8003876:	4b68      	ldr	r3, [pc, #416]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a67      	ldr	r2, [pc, #412]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800387c:	f023 0304 	bic.w	r3, r3, #4
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
 8003882:	e01c      	b.n	80038be <HAL_RCC_OscConfig+0x376>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b05      	cmp	r3, #5
 800388a:	d10c      	bne.n	80038a6 <HAL_RCC_OscConfig+0x35e>
 800388c:	4b62      	ldr	r3, [pc, #392]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	4a61      	ldr	r2, [pc, #388]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003892:	f043 0304 	orr.w	r3, r3, #4
 8003896:	6713      	str	r3, [r2, #112]	; 0x70
 8003898:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389c:	4a5e      	ldr	r2, [pc, #376]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	; 0x70
 80038a4:	e00b      	b.n	80038be <HAL_RCC_OscConfig+0x376>
 80038a6:	4b5c      	ldr	r3, [pc, #368]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a5b      	ldr	r2, [pc, #364]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
 80038b2:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d015      	beq.n	80038f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c6:	f7fe f9b5 	bl	8001c34 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fe f9b1 	bl	8001c34 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0d8      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ee      	beq.n	80038ce <HAL_RCC_OscConfig+0x386>
 80038f0:	e014      	b.n	800391c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fe f99f 	bl	8001c34 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fe f99b 	bl	8001c34 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0c2      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003910:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ee      	bne.n	80038fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800391c:	7dfb      	ldrb	r3, [r7, #23]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d105      	bne.n	800392e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a3c      	ldr	r2, [pc, #240]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80ae 	beq.w	8003a94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003938:	4b37      	ldr	r3, [pc, #220]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 030c 	and.w	r3, r3, #12
 8003940:	2b08      	cmp	r3, #8
 8003942:	d06d      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d14b      	bne.n	80039e4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394c:	4b32      	ldr	r3, [pc, #200]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a31      	ldr	r2, [pc, #196]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003958:	f7fe f96c 	bl	8001c34 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7fe f968 	bl	8001c34 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e091      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a8:	071b      	lsls	r3, r3, #28
 80039aa:	491b      	ldr	r1, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fe f93a 	bl	8001c34 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fe f936 	bl	8001c34 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e05f      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x47c>
 80039e2:	e057      	b.n	8003a94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e4:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0b      	ldr	r2, [pc, #44]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 80039ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe f920 	bl	8001c34 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f8:	f7fe f91c 	bl	8001c34 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e045      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_RCC_OscConfig+0x4d0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4b0>
 8003a16:	e03d      	b.n	8003a94 <HAL_RCC_OscConfig+0x54c>
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a20:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <HAL_RCC_OscConfig+0x558>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d030      	beq.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d129      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d122      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a50:	4013      	ands	r3, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d119      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d10f      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d107      	bne.n	8003a90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800

08003aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0d0      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b6a      	ldr	r3, [pc, #424]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d910      	bls.n	8003aec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b67      	ldr	r3, [pc, #412]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 020f 	bic.w	r2, r3, #15
 8003ad2:	4965      	ldr	r1, [pc, #404]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0b8      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d020      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b04:	4b59      	ldr	r3, [pc, #356]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a58      	ldr	r2, [pc, #352]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b1c:	4b53      	ldr	r3, [pc, #332]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a52      	ldr	r2, [pc, #328]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b28:	4b50      	ldr	r3, [pc, #320]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	494d      	ldr	r1, [pc, #308]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d040      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d115      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e07f      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b66:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d109      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e073      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b76:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e06b      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b86:	4b39      	ldr	r3, [pc, #228]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 0203 	bic.w	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4936      	ldr	r1, [pc, #216]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b98:	f7fe f84c 	bl	8001c34 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	e00a      	b.n	8003bb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba0:	f7fe f848 	bl	8001c34 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e053      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 020c 	and.w	r2, r3, #12
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d1eb      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d210      	bcs.n	8003bf8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 020f 	bic.w	r2, r3, #15
 8003bde:	4922      	ldr	r1, [pc, #136]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b20      	ldr	r3, [pc, #128]	; (8003c68 <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e032      	b.n	8003c5e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c04:	4b19      	ldr	r3, [pc, #100]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4916      	ldr	r1, [pc, #88]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	490e      	ldr	r1, [pc, #56]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c36:	f000 f821 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_ClockConfig+0x1c8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	490a      	ldr	r1, [pc, #40]	; (8003c70 <HAL_RCC_ClockConfig+0x1cc>)
 8003c48:	5ccb      	ldrb	r3, [r1, r3]
 8003c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <HAL_RCC_ClockConfig+0x1d0>)
 8003c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c52:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x1d4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fd ffa8 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40023c00 	.word	0x40023c00
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	08005414 	.word	0x08005414
 8003c74:	20000000 	.word	0x20000000
 8003c78:	20000004 	.word	0x20000004

08003c7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c7c:	b5b0      	push	{r4, r5, r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003c82:	2100      	movs	r1, #0
 8003c84:	6079      	str	r1, [r7, #4]
 8003c86:	2100      	movs	r1, #0
 8003c88:	60f9      	str	r1, [r7, #12]
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003c8e:	2100      	movs	r1, #0
 8003c90:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c92:	4952      	ldr	r1, [pc, #328]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x160>)
 8003c94:	6889      	ldr	r1, [r1, #8]
 8003c96:	f001 010c 	and.w	r1, r1, #12
 8003c9a:	2908      	cmp	r1, #8
 8003c9c:	d00d      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x3e>
 8003c9e:	2908      	cmp	r1, #8
 8003ca0:	f200 8094 	bhi.w	8003dcc <HAL_RCC_GetSysClockFreq+0x150>
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x32>
 8003ca8:	2904      	cmp	r1, #4
 8003caa:	d003      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x38>
 8003cac:	e08e      	b.n	8003dcc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cae:	4b4c      	ldr	r3, [pc, #304]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003cb0:	60bb      	str	r3, [r7, #8]
      break;
 8003cb2:	e08e      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cb4:	4b4b      	ldr	r3, [pc, #300]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003cb6:	60bb      	str	r3, [r7, #8]
      break;
 8003cb8:	e08b      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cba:	4948      	ldr	r1, [pc, #288]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x160>)
 8003cbc:	6849      	ldr	r1, [r1, #4]
 8003cbe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003cc2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003cc4:	4945      	ldr	r1, [pc, #276]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x160>)
 8003cc6:	6849      	ldr	r1, [r1, #4]
 8003cc8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003ccc:	2900      	cmp	r1, #0
 8003cce:	d024      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd0:	4942      	ldr	r1, [pc, #264]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x160>)
 8003cd2:	6849      	ldr	r1, [r1, #4]
 8003cd4:	0989      	lsrs	r1, r1, #6
 8003cd6:	4608      	mov	r0, r1
 8003cd8:	f04f 0100 	mov.w	r1, #0
 8003cdc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ce0:	f04f 0500 	mov.w	r5, #0
 8003ce4:	ea00 0204 	and.w	r2, r0, r4
 8003ce8:	ea01 0305 	and.w	r3, r1, r5
 8003cec:	493d      	ldr	r1, [pc, #244]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003cee:	fb01 f003 	mul.w	r0, r1, r3
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	fb01 f102 	mul.w	r1, r1, r2
 8003cf8:	1844      	adds	r4, r0, r1
 8003cfa:	493a      	ldr	r1, [pc, #232]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003cfc:	fba2 0101 	umull	r0, r1, r2, r1
 8003d00:	1863      	adds	r3, r4, r1
 8003d02:	4619      	mov	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	461a      	mov	r2, r3
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	f7fc fa9c 	bl	8000248 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e04a      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1a:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x160>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	461a      	mov	r2, r3
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d2a:	f04f 0100 	mov.w	r1, #0
 8003d2e:	ea02 0400 	and.w	r4, r2, r0
 8003d32:	ea03 0501 	and.w	r5, r3, r1
 8003d36:	4620      	mov	r0, r4
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	014b      	lsls	r3, r1, #5
 8003d44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d48:	0142      	lsls	r2, r0, #5
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	1b00      	subs	r0, r0, r4
 8003d50:	eb61 0105 	sbc.w	r1, r1, r5
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	018b      	lsls	r3, r1, #6
 8003d5e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d62:	0182      	lsls	r2, r0, #6
 8003d64:	1a12      	subs	r2, r2, r0
 8003d66:	eb63 0301 	sbc.w	r3, r3, r1
 8003d6a:	f04f 0000 	mov.w	r0, #0
 8003d6e:	f04f 0100 	mov.w	r1, #0
 8003d72:	00d9      	lsls	r1, r3, #3
 8003d74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d78:	00d0      	lsls	r0, r2, #3
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	1912      	adds	r2, r2, r4
 8003d80:	eb45 0303 	adc.w	r3, r5, r3
 8003d84:	f04f 0000 	mov.w	r0, #0
 8003d88:	f04f 0100 	mov.w	r1, #0
 8003d8c:	0299      	lsls	r1, r3, #10
 8003d8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d92:	0290      	lsls	r0, r2, #10
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	f7fc fa50 	bl	8000248 <__aeabi_uldivmod>
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4613      	mov	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003db0:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x160>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	60bb      	str	r3, [r7, #8]
      break;
 8003dca:	e002      	b.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003dce:	60bb      	str	r3, [r7, #8]
      break;
 8003dd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bdb0      	pop	{r4, r5, r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	017d7840 	.word	0x017d7840

08003de8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000000 	.word	0x20000000

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e04:	f7ff fff0 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0a9b      	lsrs	r3, r3, #10
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08005424 	.word	0x08005424

08003e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e2c:	f7ff ffdc 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0b5b      	lsrs	r3, r3, #13
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08005424 	.word	0x08005424

08003e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d012      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e78:	4b69      	ldr	r3, [pc, #420]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a68      	ldr	r2, [pc, #416]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e82:	6093      	str	r3, [r2, #8]
 8003e84:	4b66      	ldr	r3, [pc, #408]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8c:	4964      	ldr	r1, [pc, #400]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d017      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eaa:	4b5d      	ldr	r3, [pc, #372]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	4959      	ldr	r1, [pc, #356]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec8:	d101      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d017      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ee6:	4b4e      	ldr	r3, [pc, #312]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	494a      	ldr	r1, [pc, #296]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f04:	d101      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 808b 	beq.w	800404a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f34:	4b3a      	ldr	r3, [pc, #232]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	4a39      	ldr	r2, [pc, #228]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f40:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f4c:	4b35      	ldr	r3, [pc, #212]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a34      	ldr	r2, [pc, #208]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f58:	f7fd fe6c 	bl	8001c34 <HAL_GetTick>
 8003f5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fd fe68 	bl	8001c34 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e38f      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f72:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f7e:	4b28      	ldr	r3, [pc, #160]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d035      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d02e      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a1a      	ldr	r2, [pc, #104]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fbe:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fc4:	4b16      	ldr	r3, [pc, #88]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d114      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fe30 	bl	8001c34 <HAL_GetTick>
 8003fd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd8:	f7fd fe2c 	bl	8001c34 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e351      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ee      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004006:	d111      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004016:	400b      	ands	r3, r1
 8004018:	4901      	ldr	r1, [pc, #4]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
 800401e:	e00b      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000
 8004028:	0ffffcff 	.word	0x0ffffcff
 800402c:	4bb3      	ldr	r3, [pc, #716]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4ab2      	ldr	r2, [pc, #712]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004032:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004036:	6093      	str	r3, [r2, #8]
 8004038:	4bb0      	ldr	r3, [pc, #704]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800403a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	49ad      	ldr	r1, [pc, #692]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004046:	4313      	orrs	r3, r2
 8004048:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004056:	4ba9      	ldr	r3, [pc, #676]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800405c:	4aa7      	ldr	r2, [pc, #668]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004062:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004066:	4ba5      	ldr	r3, [pc, #660]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004068:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	49a2      	ldr	r1, [pc, #648]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004084:	4b9d      	ldr	r3, [pc, #628]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004092:	499a      	ldr	r1, [pc, #616]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040a6:	4b95      	ldr	r3, [pc, #596]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b4:	4991      	ldr	r1, [pc, #580]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040c8:	4b8c      	ldr	r3, [pc, #560]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d6:	4989      	ldr	r1, [pc, #548]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ea:	4b84      	ldr	r3, [pc, #528]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4980      	ldr	r1, [pc, #512]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800410c:	4b7b      	ldr	r3, [pc, #492]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	4978      	ldr	r1, [pc, #480]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800412e:	4b73      	ldr	r3, [pc, #460]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f023 020c 	bic.w	r2, r3, #12
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	496f      	ldr	r1, [pc, #444]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004150:	4b6a      	ldr	r3, [pc, #424]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	4967      	ldr	r1, [pc, #412]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004172:	4b62      	ldr	r3, [pc, #392]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	495e      	ldr	r1, [pc, #376]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004194:	4b59      	ldr	r3, [pc, #356]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	4956      	ldr	r1, [pc, #344]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041b6:	4b51      	ldr	r3, [pc, #324]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	494d      	ldr	r1, [pc, #308]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041d8:	4b48      	ldr	r3, [pc, #288]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	4945      	ldr	r1, [pc, #276]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041fa:	4b40      	ldr	r3, [pc, #256]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004208:	493c      	ldr	r1, [pc, #240]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800421c:	4b37      	ldr	r3, [pc, #220]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422a:	4934      	ldr	r1, [pc, #208]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d011      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800423e:	4b2f      	ldr	r3, [pc, #188]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424c:	492b      	ldr	r1, [pc, #172]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800425c:	d101      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800427e:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004284:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428c:	491b      	ldr	r1, [pc, #108]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042a0:	4b16      	ldr	r3, [pc, #88]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b0:	4912      	ldr	r1, [pc, #72]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00b      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042c4:	4b0d      	ldr	r3, [pc, #52]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d4:	4909      	ldr	r1, [pc, #36]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042e8:	4b04      	ldr	r3, [pc, #16]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	e002      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80042fa:	bf00      	nop
 80042fc:	40023800 	.word	0x40023800
 8004300:	4986      	ldr	r1, [pc, #536]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004314:	4b81      	ldr	r3, [pc, #516]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800431a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004324:	497d      	ldr	r1, [pc, #500]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d006      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80d6 	beq.w	80044ec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004340:	4b76      	ldr	r3, [pc, #472]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a75      	ldr	r2, [pc, #468]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800434a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434c:	f7fd fc72 	bl	8001c34 <HAL_GetTick>
 8004350:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004352:	e008      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004354:	f7fd fc6e 	bl	8001c34 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e195      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004366:	4b6d      	ldr	r3, [pc, #436]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f0      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d021      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	2b00      	cmp	r3, #0
 8004384:	d11d      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004386:	4b65      	ldr	r3, [pc, #404]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800438c:	0c1b      	lsrs	r3, r3, #16
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439a:	0e1b      	lsrs	r3, r3, #24
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	019a      	lsls	r2, r3, #6
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	041b      	lsls	r3, r3, #16
 80043ac:	431a      	orrs	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	071b      	lsls	r3, r3, #28
 80043ba:	4958      	ldr	r1, [pc, #352]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d004      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d02e      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ec:	d129      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043ee:	4b4b      	ldr	r3, [pc, #300]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043fc:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004402:	0f1b      	lsrs	r3, r3, #28
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	019a      	lsls	r2, r3, #6
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	071b      	lsls	r3, r3, #28
 8004422:	493e      	ldr	r1, [pc, #248]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800442a:	4b3c      	ldr	r3, [pc, #240]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004430:	f023 021f 	bic.w	r2, r3, #31
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	3b01      	subs	r3, #1
 800443a:	4938      	ldr	r1, [pc, #224]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01d      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800444e:	4b33      	ldr	r3, [pc, #204]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004454:	0e1b      	lsrs	r3, r3, #24
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800445c:	4b2f      	ldr	r3, [pc, #188]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004462:	0f1b      	lsrs	r3, r3, #28
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	019a      	lsls	r2, r3, #6
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	431a      	orrs	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	061b      	lsls	r3, r3, #24
 800447c:	431a      	orrs	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	071b      	lsls	r3, r3, #28
 8004482:	4926      	ldr	r1, [pc, #152]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d011      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	019a      	lsls	r2, r3, #6
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	041b      	lsls	r3, r3, #16
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	071b      	lsls	r3, r3, #28
 80044b2:	491a      	ldr	r1, [pc, #104]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044ba:	4b18      	ldr	r3, [pc, #96]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a17      	ldr	r2, [pc, #92]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c6:	f7fd fbb5 	bl	8001c34 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044ce:	f7fd fbb1 	bl	8001c34 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b64      	cmp	r3, #100	; 0x64
 80044da:	d901      	bls.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0d8      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	f040 80ce 	bne.w	8004690 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a08      	ldr	r2, [pc, #32]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004500:	f7fd fb98 	bl	8001c34 <HAL_GetTick>
 8004504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004506:	e00b      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004508:	f7fd fb94 	bl	8001c34 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	; 0x64
 8004514:	d904      	bls.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0bb      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004520:	4b5e      	ldr	r3, [pc, #376]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800452c:	d0ec      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d009      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800454a:	2b00      	cmp	r3, #0
 800454c:	d02e      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d12a      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004556:	4b51      	ldr	r3, [pc, #324]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	0c1b      	lsrs	r3, r3, #16
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004564:	4b4d      	ldr	r3, [pc, #308]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	0f1b      	lsrs	r3, r3, #28
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	019a      	lsls	r2, r3, #6
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	071b      	lsls	r3, r3, #28
 800458a:	4944      	ldr	r1, [pc, #272]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004592:	4b42      	ldr	r3, [pc, #264]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	493d      	ldr	r1, [pc, #244]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d022      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c0:	d11d      	bne.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	0e1b      	lsrs	r3, r3, #24
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045d0:	4b32      	ldr	r3, [pc, #200]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	0f1b      	lsrs	r3, r3, #28
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	019a      	lsls	r2, r3, #6
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	431a      	orrs	r2, r3
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	061b      	lsls	r3, r3, #24
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	071b      	lsls	r3, r3, #28
 80045f6:	4929      	ldr	r1, [pc, #164]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d028      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	0e1b      	lsrs	r3, r3, #24
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004618:	4b20      	ldr	r3, [pc, #128]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	019a      	lsls	r2, r3, #6
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	061b      	lsls	r3, r3, #24
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	071b      	lsls	r3, r3, #28
 800463e:	4917      	ldr	r1, [pc, #92]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004646:	4b15      	ldr	r3, [pc, #84]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4911      	ldr	r1, [pc, #68]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0e      	ldr	r2, [pc, #56]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fd fae4 	bl	8001c34 <HAL_GetTick>
 800466c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004670:	f7fd fae0 	bl	8001c34 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e007      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800468a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800468e:	d1ef      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800

080046a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e040      	b.n	8004734 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd f9f8 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f8c0 	bl	8004864 <UART_SetConfig>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e022      	b.n	8004734 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fb16 	bl	8004d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800470a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800471a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 fb9d 	bl	8004e6c <UART_CheckIdleState>
 8004732:	4603      	mov	r3, r0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	4613      	mov	r3, r2
 800474a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004750:	2b20      	cmp	r3, #32
 8004752:	f040 8081 	bne.w	8004858 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_UART_Transmit+0x26>
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e079      	b.n	800485a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_UART_Transmit+0x38>
 8004770:	2302      	movs	r3, #2
 8004772:	e072      	b.n	800485a <HAL_UART_Transmit+0x11e>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2221      	movs	r2, #33	; 0x21
 8004788:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800478a:	f7fd fa53 	bl	8001c34 <HAL_GetTick>
 800478e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d108      	bne.n	80047bc <HAL_UART_Transmit+0x80>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e003      	b.n	80047c4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047cc:	e02c      	b.n	8004828 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2200      	movs	r2, #0
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 fb90 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e038      	b.n	800485a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	3302      	adds	r3, #2
 8004802:	61bb      	str	r3, [r7, #24]
 8004804:	e007      	b.n	8004816 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1cc      	bne.n	80047ce <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2200      	movs	r2, #0
 800483c:	2140      	movs	r1, #64	; 0x40
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fb5d 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e005      	b.n	800485a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3720      	adds	r7, #32
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	431a      	orrs	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4ba7      	ldr	r3, [pc, #668]	; (8004b2c <UART_SetConfig+0x2c8>)
 8004890:	4013      	ands	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	6979      	ldr	r1, [r7, #20]
 8004898:	430b      	orrs	r3, r1
 800489a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a95      	ldr	r2, [pc, #596]	; (8004b30 <UART_SetConfig+0x2cc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d120      	bne.n	8004922 <UART_SetConfig+0xbe>
 80048e0:	4b94      	ldr	r3, [pc, #592]	; (8004b34 <UART_SetConfig+0x2d0>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	d816      	bhi.n	800491c <UART_SetConfig+0xb8>
 80048ee:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <UART_SetConfig+0x90>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	08004905 	.word	0x08004905
 80048f8:	08004911 	.word	0x08004911
 80048fc:	0800490b 	.word	0x0800490b
 8004900:	08004917 	.word	0x08004917
 8004904:	2301      	movs	r3, #1
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e14f      	b.n	8004baa <UART_SetConfig+0x346>
 800490a:	2302      	movs	r3, #2
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e14c      	b.n	8004baa <UART_SetConfig+0x346>
 8004910:	2304      	movs	r3, #4
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e149      	b.n	8004baa <UART_SetConfig+0x346>
 8004916:	2308      	movs	r3, #8
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e146      	b.n	8004baa <UART_SetConfig+0x346>
 800491c:	2310      	movs	r3, #16
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e143      	b.n	8004baa <UART_SetConfig+0x346>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a84      	ldr	r2, [pc, #528]	; (8004b38 <UART_SetConfig+0x2d4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d132      	bne.n	8004992 <UART_SetConfig+0x12e>
 800492c:	4b81      	ldr	r3, [pc, #516]	; (8004b34 <UART_SetConfig+0x2d0>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b0c      	cmp	r3, #12
 8004938:	d828      	bhi.n	800498c <UART_SetConfig+0x128>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <UART_SetConfig+0xdc>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004975 	.word	0x08004975
 8004944:	0800498d 	.word	0x0800498d
 8004948:	0800498d 	.word	0x0800498d
 800494c:	0800498d 	.word	0x0800498d
 8004950:	08004981 	.word	0x08004981
 8004954:	0800498d 	.word	0x0800498d
 8004958:	0800498d 	.word	0x0800498d
 800495c:	0800498d 	.word	0x0800498d
 8004960:	0800497b 	.word	0x0800497b
 8004964:	0800498d 	.word	0x0800498d
 8004968:	0800498d 	.word	0x0800498d
 800496c:	0800498d 	.word	0x0800498d
 8004970:	08004987 	.word	0x08004987
 8004974:	2300      	movs	r3, #0
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e117      	b.n	8004baa <UART_SetConfig+0x346>
 800497a:	2302      	movs	r3, #2
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e114      	b.n	8004baa <UART_SetConfig+0x346>
 8004980:	2304      	movs	r3, #4
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	e111      	b.n	8004baa <UART_SetConfig+0x346>
 8004986:	2308      	movs	r3, #8
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	e10e      	b.n	8004baa <UART_SetConfig+0x346>
 800498c:	2310      	movs	r3, #16
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e10b      	b.n	8004baa <UART_SetConfig+0x346>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a69      	ldr	r2, [pc, #420]	; (8004b3c <UART_SetConfig+0x2d8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d120      	bne.n	80049de <UART_SetConfig+0x17a>
 800499c:	4b65      	ldr	r3, [pc, #404]	; (8004b34 <UART_SetConfig+0x2d0>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049a6:	2b30      	cmp	r3, #48	; 0x30
 80049a8:	d013      	beq.n	80049d2 <UART_SetConfig+0x16e>
 80049aa:	2b30      	cmp	r3, #48	; 0x30
 80049ac:	d814      	bhi.n	80049d8 <UART_SetConfig+0x174>
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d009      	beq.n	80049c6 <UART_SetConfig+0x162>
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d810      	bhi.n	80049d8 <UART_SetConfig+0x174>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <UART_SetConfig+0x15c>
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d006      	beq.n	80049cc <UART_SetConfig+0x168>
 80049be:	e00b      	b.n	80049d8 <UART_SetConfig+0x174>
 80049c0:	2300      	movs	r3, #0
 80049c2:	77fb      	strb	r3, [r7, #31]
 80049c4:	e0f1      	b.n	8004baa <UART_SetConfig+0x346>
 80049c6:	2302      	movs	r3, #2
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e0ee      	b.n	8004baa <UART_SetConfig+0x346>
 80049cc:	2304      	movs	r3, #4
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e0eb      	b.n	8004baa <UART_SetConfig+0x346>
 80049d2:	2308      	movs	r3, #8
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e0e8      	b.n	8004baa <UART_SetConfig+0x346>
 80049d8:	2310      	movs	r3, #16
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e0e5      	b.n	8004baa <UART_SetConfig+0x346>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a57      	ldr	r2, [pc, #348]	; (8004b40 <UART_SetConfig+0x2dc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d120      	bne.n	8004a2a <UART_SetConfig+0x1c6>
 80049e8:	4b52      	ldr	r3, [pc, #328]	; (8004b34 <UART_SetConfig+0x2d0>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049f2:	2bc0      	cmp	r3, #192	; 0xc0
 80049f4:	d013      	beq.n	8004a1e <UART_SetConfig+0x1ba>
 80049f6:	2bc0      	cmp	r3, #192	; 0xc0
 80049f8:	d814      	bhi.n	8004a24 <UART_SetConfig+0x1c0>
 80049fa:	2b80      	cmp	r3, #128	; 0x80
 80049fc:	d009      	beq.n	8004a12 <UART_SetConfig+0x1ae>
 80049fe:	2b80      	cmp	r3, #128	; 0x80
 8004a00:	d810      	bhi.n	8004a24 <UART_SetConfig+0x1c0>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <UART_SetConfig+0x1a8>
 8004a06:	2b40      	cmp	r3, #64	; 0x40
 8004a08:	d006      	beq.n	8004a18 <UART_SetConfig+0x1b4>
 8004a0a:	e00b      	b.n	8004a24 <UART_SetConfig+0x1c0>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	77fb      	strb	r3, [r7, #31]
 8004a10:	e0cb      	b.n	8004baa <UART_SetConfig+0x346>
 8004a12:	2302      	movs	r3, #2
 8004a14:	77fb      	strb	r3, [r7, #31]
 8004a16:	e0c8      	b.n	8004baa <UART_SetConfig+0x346>
 8004a18:	2304      	movs	r3, #4
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e0c5      	b.n	8004baa <UART_SetConfig+0x346>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e0c2      	b.n	8004baa <UART_SetConfig+0x346>
 8004a24:	2310      	movs	r3, #16
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e0bf      	b.n	8004baa <UART_SetConfig+0x346>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a45      	ldr	r2, [pc, #276]	; (8004b44 <UART_SetConfig+0x2e0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d125      	bne.n	8004a80 <UART_SetConfig+0x21c>
 8004a34:	4b3f      	ldr	r3, [pc, #252]	; (8004b34 <UART_SetConfig+0x2d0>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a42:	d017      	beq.n	8004a74 <UART_SetConfig+0x210>
 8004a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a48:	d817      	bhi.n	8004a7a <UART_SetConfig+0x216>
 8004a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4e:	d00b      	beq.n	8004a68 <UART_SetConfig+0x204>
 8004a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a54:	d811      	bhi.n	8004a7a <UART_SetConfig+0x216>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <UART_SetConfig+0x1fe>
 8004a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5e:	d006      	beq.n	8004a6e <UART_SetConfig+0x20a>
 8004a60:	e00b      	b.n	8004a7a <UART_SetConfig+0x216>
 8004a62:	2300      	movs	r3, #0
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e0a0      	b.n	8004baa <UART_SetConfig+0x346>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e09d      	b.n	8004baa <UART_SetConfig+0x346>
 8004a6e:	2304      	movs	r3, #4
 8004a70:	77fb      	strb	r3, [r7, #31]
 8004a72:	e09a      	b.n	8004baa <UART_SetConfig+0x346>
 8004a74:	2308      	movs	r3, #8
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e097      	b.n	8004baa <UART_SetConfig+0x346>
 8004a7a:	2310      	movs	r3, #16
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	e094      	b.n	8004baa <UART_SetConfig+0x346>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a30      	ldr	r2, [pc, #192]	; (8004b48 <UART_SetConfig+0x2e4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d125      	bne.n	8004ad6 <UART_SetConfig+0x272>
 8004a8a:	4b2a      	ldr	r3, [pc, #168]	; (8004b34 <UART_SetConfig+0x2d0>)
 8004a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a98:	d017      	beq.n	8004aca <UART_SetConfig+0x266>
 8004a9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a9e:	d817      	bhi.n	8004ad0 <UART_SetConfig+0x26c>
 8004aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa4:	d00b      	beq.n	8004abe <UART_SetConfig+0x25a>
 8004aa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aaa:	d811      	bhi.n	8004ad0 <UART_SetConfig+0x26c>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <UART_SetConfig+0x254>
 8004ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab4:	d006      	beq.n	8004ac4 <UART_SetConfig+0x260>
 8004ab6:	e00b      	b.n	8004ad0 <UART_SetConfig+0x26c>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e075      	b.n	8004baa <UART_SetConfig+0x346>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	77fb      	strb	r3, [r7, #31]
 8004ac2:	e072      	b.n	8004baa <UART_SetConfig+0x346>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e06f      	b.n	8004baa <UART_SetConfig+0x346>
 8004aca:	2308      	movs	r3, #8
 8004acc:	77fb      	strb	r3, [r7, #31]
 8004ace:	e06c      	b.n	8004baa <UART_SetConfig+0x346>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e069      	b.n	8004baa <UART_SetConfig+0x346>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <UART_SetConfig+0x2e8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d137      	bne.n	8004b50 <UART_SetConfig+0x2ec>
 8004ae0:	4b14      	ldr	r3, [pc, #80]	; (8004b34 <UART_SetConfig+0x2d0>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004aea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aee:	d017      	beq.n	8004b20 <UART_SetConfig+0x2bc>
 8004af0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004af4:	d817      	bhi.n	8004b26 <UART_SetConfig+0x2c2>
 8004af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afa:	d00b      	beq.n	8004b14 <UART_SetConfig+0x2b0>
 8004afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b00:	d811      	bhi.n	8004b26 <UART_SetConfig+0x2c2>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <UART_SetConfig+0x2aa>
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d006      	beq.n	8004b1a <UART_SetConfig+0x2b6>
 8004b0c:	e00b      	b.n	8004b26 <UART_SetConfig+0x2c2>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	77fb      	strb	r3, [r7, #31]
 8004b12:	e04a      	b.n	8004baa <UART_SetConfig+0x346>
 8004b14:	2302      	movs	r3, #2
 8004b16:	77fb      	strb	r3, [r7, #31]
 8004b18:	e047      	b.n	8004baa <UART_SetConfig+0x346>
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e044      	b.n	8004baa <UART_SetConfig+0x346>
 8004b20:	2308      	movs	r3, #8
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e041      	b.n	8004baa <UART_SetConfig+0x346>
 8004b26:	2310      	movs	r3, #16
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e03e      	b.n	8004baa <UART_SetConfig+0x346>
 8004b2c:	efff69f3 	.word	0xefff69f3
 8004b30:	40011000 	.word	0x40011000
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40004400 	.word	0x40004400
 8004b3c:	40004800 	.word	0x40004800
 8004b40:	40004c00 	.word	0x40004c00
 8004b44:	40005000 	.word	0x40005000
 8004b48:	40011400 	.word	0x40011400
 8004b4c:	40007800 	.word	0x40007800
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a71      	ldr	r2, [pc, #452]	; (8004d1c <UART_SetConfig+0x4b8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d125      	bne.n	8004ba6 <UART_SetConfig+0x342>
 8004b5a:	4b71      	ldr	r3, [pc, #452]	; (8004d20 <UART_SetConfig+0x4bc>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b68:	d017      	beq.n	8004b9a <UART_SetConfig+0x336>
 8004b6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b6e:	d817      	bhi.n	8004ba0 <UART_SetConfig+0x33c>
 8004b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b74:	d00b      	beq.n	8004b8e <UART_SetConfig+0x32a>
 8004b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7a:	d811      	bhi.n	8004ba0 <UART_SetConfig+0x33c>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <UART_SetConfig+0x324>
 8004b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b84:	d006      	beq.n	8004b94 <UART_SetConfig+0x330>
 8004b86:	e00b      	b.n	8004ba0 <UART_SetConfig+0x33c>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e00d      	b.n	8004baa <UART_SetConfig+0x346>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e00a      	b.n	8004baa <UART_SetConfig+0x346>
 8004b94:	2304      	movs	r3, #4
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e007      	b.n	8004baa <UART_SetConfig+0x346>
 8004b9a:	2308      	movs	r3, #8
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e004      	b.n	8004baa <UART_SetConfig+0x346>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e001      	b.n	8004baa <UART_SetConfig+0x346>
 8004ba6:	2310      	movs	r3, #16
 8004ba8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb2:	d15b      	bne.n	8004c6c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004bb4:	7ffb      	ldrb	r3, [r7, #31]
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d827      	bhi.n	8004c0a <UART_SetConfig+0x3a6>
 8004bba:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <UART_SetConfig+0x35c>)
 8004bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc0:	08004be5 	.word	0x08004be5
 8004bc4:	08004bed 	.word	0x08004bed
 8004bc8:	08004bf5 	.word	0x08004bf5
 8004bcc:	08004c0b 	.word	0x08004c0b
 8004bd0:	08004bfb 	.word	0x08004bfb
 8004bd4:	08004c0b 	.word	0x08004c0b
 8004bd8:	08004c0b 	.word	0x08004c0b
 8004bdc:	08004c0b 	.word	0x08004c0b
 8004be0:	08004c03 	.word	0x08004c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be4:	f7ff f90c 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8004be8:	61b8      	str	r0, [r7, #24]
        break;
 8004bea:	e013      	b.n	8004c14 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bec:	f7ff f91c 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8004bf0:	61b8      	str	r0, [r7, #24]
        break;
 8004bf2:	e00f      	b.n	8004c14 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <UART_SetConfig+0x4c0>)
 8004bf6:	61bb      	str	r3, [r7, #24]
        break;
 8004bf8:	e00c      	b.n	8004c14 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfa:	f7ff f83f 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8004bfe:	61b8      	str	r0, [r7, #24]
        break;
 8004c00:	e008      	b.n	8004c14 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c06:	61bb      	str	r3, [r7, #24]
        break;
 8004c08:	e004      	b.n	8004c14 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	77bb      	strb	r3, [r7, #30]
        break;
 8004c12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d074      	beq.n	8004d04 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	005a      	lsls	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	085b      	lsrs	r3, r3, #1
 8004c24:	441a      	add	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b0f      	cmp	r3, #15
 8004c36:	d916      	bls.n	8004c66 <UART_SetConfig+0x402>
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3e:	d212      	bcs.n	8004c66 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f023 030f 	bic.w	r3, r3, #15
 8004c48:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	085b      	lsrs	r3, r3, #1
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	89fb      	ldrh	r3, [r7, #14]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	89fa      	ldrh	r2, [r7, #14]
 8004c62:	60da      	str	r2, [r3, #12]
 8004c64:	e04e      	b.n	8004d04 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	77bb      	strb	r3, [r7, #30]
 8004c6a:	e04b      	b.n	8004d04 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c6c:	7ffb      	ldrb	r3, [r7, #31]
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d827      	bhi.n	8004cc2 <UART_SetConfig+0x45e>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0x414>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cc3 	.word	0x08004cc3
 8004c88:	08004cb3 	.word	0x08004cb3
 8004c8c:	08004cc3 	.word	0x08004cc3
 8004c90:	08004cc3 	.word	0x08004cc3
 8004c94:	08004cc3 	.word	0x08004cc3
 8004c98:	08004cbb 	.word	0x08004cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f7ff f8b0 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8004ca0:	61b8      	str	r0, [r7, #24]
        break;
 8004ca2:	e013      	b.n	8004ccc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7ff f8c0 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	61b8      	str	r0, [r7, #24]
        break;
 8004caa:	e00f      	b.n	8004ccc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <UART_SetConfig+0x4c0>)
 8004cae:	61bb      	str	r3, [r7, #24]
        break;
 8004cb0:	e00c      	b.n	8004ccc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb2:	f7fe ffe3 	bl	8003c7c <HAL_RCC_GetSysClockFreq>
 8004cb6:	61b8      	str	r0, [r7, #24]
        break;
 8004cb8:	e008      	b.n	8004ccc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cbe:	61bb      	str	r3, [r7, #24]
        break;
 8004cc0:	e004      	b.n	8004ccc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	77bb      	strb	r3, [r7, #30]
        break;
 8004cca:	bf00      	nop
    }

    if (pclk != 0U)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d018      	beq.n	8004d04 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	085a      	lsrs	r2, r3, #1
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	441a      	add	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b0f      	cmp	r3, #15
 8004cec:	d908      	bls.n	8004d00 <UART_SetConfig+0x49c>
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf4:	d204      	bcs.n	8004d00 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	e001      	b.n	8004d04 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d10:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40007c00 	.word	0x40007c00
 8004d20:	40023800 	.word	0x40023800
 8004d24:	00f42400 	.word	0x00f42400

08004d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00a      	beq.n	8004d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01a      	beq.n	8004e3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e26:	d10a      	bne.n	8004e3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	605a      	str	r2, [r3, #4]
  }
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e7c:	f7fc feda 	bl	8001c34 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d10e      	bne.n	8004eae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f82d 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e023      	b.n	8004ef6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d10e      	bne.n	8004eda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f817 	bl	8004efe <UART_WaitOnFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e00d      	b.n	8004ef6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	603b      	str	r3, [r7, #0]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0e:	e05e      	b.n	8004fce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d05a      	beq.n	8004fce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f18:	f7fc fe8c 	bl	8001c34 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x30>
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11b      	bne.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 0201 	bic.w	r2, r2, #1
 8004f4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e043      	b.n	8004fee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d02c      	beq.n	8004fce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f82:	d124      	bne.n	8004fce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e00f      	b.n	8004fee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	bf0c      	ite	eq
 8004fde:	2301      	moveq	r3, #1
 8004fe0:	2300      	movne	r3, #0
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d091      	beq.n	8004f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <__libc_init_array>:
 8004ff8:	b570      	push	{r4, r5, r6, lr}
 8004ffa:	4d0d      	ldr	r5, [pc, #52]	; (8005030 <__libc_init_array+0x38>)
 8004ffc:	4c0d      	ldr	r4, [pc, #52]	; (8005034 <__libc_init_array+0x3c>)
 8004ffe:	1b64      	subs	r4, r4, r5
 8005000:	10a4      	asrs	r4, r4, #2
 8005002:	2600      	movs	r6, #0
 8005004:	42a6      	cmp	r6, r4
 8005006:	d109      	bne.n	800501c <__libc_init_array+0x24>
 8005008:	4d0b      	ldr	r5, [pc, #44]	; (8005038 <__libc_init_array+0x40>)
 800500a:	4c0c      	ldr	r4, [pc, #48]	; (800503c <__libc_init_array+0x44>)
 800500c:	f000 f864 	bl	80050d8 <_init>
 8005010:	1b64      	subs	r4, r4, r5
 8005012:	10a4      	asrs	r4, r4, #2
 8005014:	2600      	movs	r6, #0
 8005016:	42a6      	cmp	r6, r4
 8005018:	d105      	bne.n	8005026 <__libc_init_array+0x2e>
 800501a:	bd70      	pop	{r4, r5, r6, pc}
 800501c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005020:	4798      	blx	r3
 8005022:	3601      	adds	r6, #1
 8005024:	e7ee      	b.n	8005004 <__libc_init_array+0xc>
 8005026:	f855 3b04 	ldr.w	r3, [r5], #4
 800502a:	4798      	blx	r3
 800502c:	3601      	adds	r6, #1
 800502e:	e7f2      	b.n	8005016 <__libc_init_array+0x1e>
 8005030:	0800545c 	.word	0x0800545c
 8005034:	0800545c 	.word	0x0800545c
 8005038:	0800545c 	.word	0x0800545c
 800503c:	08005460 	.word	0x08005460

08005040 <memset>:
 8005040:	4402      	add	r2, r0
 8005042:	4603      	mov	r3, r0
 8005044:	4293      	cmp	r3, r2
 8005046:	d100      	bne.n	800504a <memset+0xa>
 8005048:	4770      	bx	lr
 800504a:	f803 1b01 	strb.w	r1, [r3], #1
 800504e:	e7f9      	b.n	8005044 <memset+0x4>

08005050 <__utoa>:
 8005050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005052:	4c1f      	ldr	r4, [pc, #124]	; (80050d0 <__utoa+0x80>)
 8005054:	b08b      	sub	sp, #44	; 0x2c
 8005056:	4605      	mov	r5, r0
 8005058:	460b      	mov	r3, r1
 800505a:	466e      	mov	r6, sp
 800505c:	f104 0c20 	add.w	ip, r4, #32
 8005060:	6820      	ldr	r0, [r4, #0]
 8005062:	6861      	ldr	r1, [r4, #4]
 8005064:	4637      	mov	r7, r6
 8005066:	c703      	stmia	r7!, {r0, r1}
 8005068:	3408      	adds	r4, #8
 800506a:	4564      	cmp	r4, ip
 800506c:	463e      	mov	r6, r7
 800506e:	d1f7      	bne.n	8005060 <__utoa+0x10>
 8005070:	7921      	ldrb	r1, [r4, #4]
 8005072:	7139      	strb	r1, [r7, #4]
 8005074:	1e91      	subs	r1, r2, #2
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	6038      	str	r0, [r7, #0]
 800507a:	2922      	cmp	r1, #34	; 0x22
 800507c:	f04f 0100 	mov.w	r1, #0
 8005080:	d904      	bls.n	800508c <__utoa+0x3c>
 8005082:	7019      	strb	r1, [r3, #0]
 8005084:	460b      	mov	r3, r1
 8005086:	4618      	mov	r0, r3
 8005088:	b00b      	add	sp, #44	; 0x2c
 800508a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800508c:	1e58      	subs	r0, r3, #1
 800508e:	4684      	mov	ip, r0
 8005090:	fbb5 f7f2 	udiv	r7, r5, r2
 8005094:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005098:	fb02 5617 	mls	r6, r2, r7, r5
 800509c:	4476      	add	r6, lr
 800509e:	460c      	mov	r4, r1
 80050a0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80050a4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80050a8:	462e      	mov	r6, r5
 80050aa:	42b2      	cmp	r2, r6
 80050ac:	f101 0101 	add.w	r1, r1, #1
 80050b0:	463d      	mov	r5, r7
 80050b2:	d9ed      	bls.n	8005090 <__utoa+0x40>
 80050b4:	2200      	movs	r2, #0
 80050b6:	545a      	strb	r2, [r3, r1]
 80050b8:	1919      	adds	r1, r3, r4
 80050ba:	1aa5      	subs	r5, r4, r2
 80050bc:	42aa      	cmp	r2, r5
 80050be:	dae2      	bge.n	8005086 <__utoa+0x36>
 80050c0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80050c4:	780e      	ldrb	r6, [r1, #0]
 80050c6:	7006      	strb	r6, [r0, #0]
 80050c8:	3201      	adds	r2, #1
 80050ca:	f801 5901 	strb.w	r5, [r1], #-1
 80050ce:	e7f4      	b.n	80050ba <__utoa+0x6a>
 80050d0:	0800542c 	.word	0x0800542c

080050d4 <utoa>:
 80050d4:	f7ff bfbc 	b.w	8005050 <__utoa>

080050d8 <_init>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr

080050e4 <_fini>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	bf00      	nop
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr
