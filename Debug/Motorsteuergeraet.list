
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800569c  0800569c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a4  080056a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080056ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  080056b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  080056b8  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012692  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de7  00000000  00000000  000326cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  000354b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  00035fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae64  00000000  00000000  00036960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103bc  00000000  00000000  000617c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd3bd  00000000  00000000  00071b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016ef3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002994  00000000  00000000  0016ef90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005298 	.word	0x08005298

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005298 	.word	0x08005298

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data, uint8_t dlc)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
	uint8_t Reg = data[0];
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	733b      	strb	r3, [r7, #12]
	uint16_t speed = 0, strom;
 8000552:	2300      	movs	r3, #0
 8000554:	817b      	strh	r3, [r7, #10]

	switch (Reg)
 8000556:	7b3b      	ldrb	r3, [r7, #12]
 8000558:	2bd8      	cmp	r3, #216	; 0xd8
 800055a:	f000 80bb 	beq.w	80006d4 <BAMOCAN_ID+0x194>
 800055e:	2bd8      	cmp	r3, #216	; 0xd8
 8000560:	f300 80fe 	bgt.w	8000760 <BAMOCAN_ID+0x220>
 8000564:	2ba8      	cmp	r3, #168	; 0xa8
 8000566:	d012      	beq.n	800058e <BAMOCAN_ID+0x4e>
 8000568:	2ba8      	cmp	r3, #168	; 0xa8
 800056a:	f300 80f9 	bgt.w	8000760 <BAMOCAN_ID+0x220>
 800056e:	2b8f      	cmp	r3, #143	; 0x8f
 8000570:	d074      	beq.n	800065c <BAMOCAN_ID+0x11c>
 8000572:	2b8f      	cmp	r3, #143	; 0x8f
 8000574:	f300 80f4 	bgt.w	8000760 <BAMOCAN_ID+0x220>
 8000578:	2b5f      	cmp	r3, #95	; 0x5f
 800057a:	d022      	beq.n	80005c2 <BAMOCAN_ID+0x82>
 800057c:	2b5f      	cmp	r3, #95	; 0x5f
 800057e:	f300 80ef 	bgt.w	8000760 <BAMOCAN_ID+0x220>
 8000582:	2b1b      	cmp	r3, #27
 8000584:	f000 80d2 	beq.w	800072c <BAMOCAN_ID+0x1ec>
 8000588:	2b40      	cmp	r3, #64	; 0x40
 800058a:	d034      	beq.n	80005f6 <BAMOCAN_ID+0xb6>
 800058c:	e0e8      	b.n	8000760 <BAMOCAN_ID+0x220>
	{
		case BAMOCAR_REG_N_ACT_FILTER:
			speed = ((data[2]<<8) + data[1]);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3302      	adds	r3, #2
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b29b      	uxth	r3, r3
 8000596:	021b      	lsls	r3, r3, #8
 8000598:	b29a      	uxth	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	4413      	add	r3, r2
 80005a4:	817b      	strh	r3, [r7, #10]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motordrehzahl\n", 14);
 80005a6:	210e      	movs	r1, #14
 80005a8:	4872      	ldr	r0, [pc, #456]	; (8000774 <BAMOCAN_ID+0x234>)
 80005aa:	f000 f8ff 	bl	80007ac <uartTransmit>
			uartTransmitNumber(speed, 10);
 80005ae:	897b      	ldrh	r3, [r7, #10]
 80005b0:	210a      	movs	r1, #10
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f90e 	bl	80007d4 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005b8:	2101      	movs	r1, #1
 80005ba:	486f      	ldr	r0, [pc, #444]	; (8000778 <BAMOCAN_ID+0x238>)
 80005bc:	f000 f8f6 	bl	80007ac <uartTransmit>
#endif

			break;
 80005c0:	e0d3      	b.n	800076a <BAMOCAN_ID+0x22a>

		case BAMOCAR_REG_I_IST_FILTER:
			strom = ((data[2]<<8) + data[1]);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3302      	adds	r3, #2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3301      	adds	r3, #1
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b29b      	uxth	r3, r3
 80005d6:	4413      	add	r3, r2
 80005d8:	813b      	strh	r3, [r7, #8]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Motorstrom\n", 11);
 80005da:	210b      	movs	r1, #11
 80005dc:	4867      	ldr	r0, [pc, #412]	; (800077c <BAMOCAN_ID+0x23c>)
 80005de:	f000 f8e5 	bl	80007ac <uartTransmit>
			uartTransmitNumber(strom, 10);
 80005e2:	893b      	ldrh	r3, [r7, #8]
 80005e4:	210a      	movs	r1, #10
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f8f4 	bl	80007d4 <uartTransmitNumber>
			uartTransmit("\n", 1);
 80005ec:	2101      	movs	r1, #1
 80005ee:	4862      	ldr	r0, [pc, #392]	; (8000778 <BAMOCAN_ID+0x238>)
 80005f0:	f000 f8dc 	bl	80007ac <uartTransmit>
#endif

			break;
 80005f4:	e0b9      	b.n	800076a <BAMOCAN_ID+0x22a>

		case BAMOCAR_REG_STATUS:
			bamocar_stat.status1 = ((data[4] << 24) + (data[3] << 16) + (data[2] << 8) + data[1]);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3304      	adds	r3, #4
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	061a      	lsls	r2, r3, #24
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3303      	adds	r3, #3
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	041b      	lsls	r3, r3, #16
 8000606:	441a      	add	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3302      	adds	r3, #2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	4413      	add	r3, r2
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	3201      	adds	r2, #1
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	4413      	add	r3, r2
 800061a:	461a      	mov	r2, r3
 800061c:	4b58      	ldr	r3, [pc, #352]	; (8000780 <BAMOCAN_ID+0x240>)
 800061e:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Status\n", 15);
 8000620:	210f      	movs	r1, #15
 8000622:	4858      	ldr	r0, [pc, #352]	; (8000784 <BAMOCAN_ID+0x244>)
 8000624:	f000 f8c2 	bl	80007ac <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
 800062c:	e00e      	b.n	800064c <BAMOCAN_ID+0x10c>
			{
				uartTransmitNumber(bamocar_stat.status[i+1], 10);
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	3301      	adds	r3, #1
 8000632:	4a53      	ldr	r2, [pc, #332]	; (8000780 <BAMOCAN_ID+0x240>)
 8000634:	5cd3      	ldrb	r3, [r2, r3]
 8000636:	210a      	movs	r1, #10
 8000638:	4618      	mov	r0, r3
 800063a:	f000 f8cb 	bl	80007d4 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800063e:	2101      	movs	r1, #1
 8000640:	4851      	ldr	r0, [pc, #324]	; (8000788 <BAMOCAN_ID+0x248>)
 8000642:	f000 f8b3 	bl	80007ac <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	3301      	adds	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b03      	cmp	r3, #3
 8000650:	d9ed      	bls.n	800062e <BAMOCAN_ID+0xee>
			}
			uartTransmit("\n", 1);
 8000652:	2101      	movs	r1, #1
 8000654:	4848      	ldr	r0, [pc, #288]	; (8000778 <BAMOCAN_ID+0x238>)
 8000656:	f000 f8a9 	bl	80007ac <uartTransmit>
#endif

			break;
 800065a:	e086      	b.n	800076a <BAMOCAN_ID+0x22a>

		case BAMOCAR_REG_ERROR:
			bamocar_error.error1 = ((data[2] << 8) + data[1]);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3302      	adds	r3, #2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	b29a      	uxth	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	3301      	adds	r3, #1
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b29b      	uxth	r3, r3
 8000670:	4413      	add	r3, r2
 8000672:	b29a      	uxth	r2, r3
 8000674:	4b45      	ldr	r3, [pc, #276]	; (800078c <BAMOCAN_ID+0x24c>)
 8000676:	801a      	strh	r2, [r3, #0]
			bamocar_warnung.warnung1 = ((data[4] << 8) + data[3]);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3304      	adds	r3, #4
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b29b      	uxth	r3, r3
 8000680:	021b      	lsls	r3, r3, #8
 8000682:	b29a      	uxth	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3303      	adds	r3, #3
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b29b      	uxth	r3, r3
 800068c:	4413      	add	r3, r2
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b3f      	ldr	r3, [pc, #252]	; (8000790 <BAMOCAN_ID+0x250>)
 8000692:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar Error\n", 14);
 8000694:	210e      	movs	r1, #14
 8000696:	483f      	ldr	r0, [pc, #252]	; (8000794 <BAMOCAN_ID+0x254>)
 8000698:	f000 f888 	bl	80007ac <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 800069c:	2300      	movs	r3, #0
 800069e:	73bb      	strb	r3, [r7, #14]
 80006a0:	e010      	b.n	80006c4 <BAMOCAN_ID+0x184>
			{
				uartTransmitNumber(data[1+i], 10);
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	3301      	adds	r3, #1
 80006a6:	461a      	mov	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	210a      	movs	r1, #10
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f88f 	bl	80007d4 <uartTransmitNumber>
				uartTransmit(" ", 1);
 80006b6:	2101      	movs	r1, #1
 80006b8:	4833      	ldr	r0, [pc, #204]	; (8000788 <BAMOCAN_ID+0x248>)
 80006ba:	f000 f877 	bl	80007ac <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006be:	7bbb      	ldrb	r3, [r7, #14]
 80006c0:	3301      	adds	r3, #1
 80006c2:	73bb      	strb	r3, [r7, #14]
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d9eb      	bls.n	80006a2 <BAMOCAN_ID+0x162>
			}
			uartTransmit("\n", 1);
 80006ca:	2101      	movs	r1, #1
 80006cc:	482a      	ldr	r0, [pc, #168]	; (8000778 <BAMOCAN_ID+0x238>)
 80006ce:	f000 f86d 	bl	80007ac <uartTransmit>
#endif

			break;
 80006d2:	e04a      	b.n	800076a <BAMOCAN_ID+0x22a>

		case BAMOCAR_REG_STATUS_IO:
			bamocar_statIO.status1 = ((data[2] << 8) + data[1]);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3302      	adds	r3, #2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	b29a      	uxth	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	3301      	adds	r3, #1
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	4413      	add	r3, r2
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4b2a      	ldr	r3, [pc, #168]	; (8000798 <BAMOCAN_ID+0x258>)
 80006ee:	801a      	strh	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Bamocar IO Status\n", 18);
 80006f0:	2112      	movs	r1, #18
 80006f2:	482a      	ldr	r0, [pc, #168]	; (800079c <BAMOCAN_ID+0x25c>)
 80006f4:	f000 f85a 	bl	80007ac <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	737b      	strb	r3, [r7, #13]
 80006fc:	e00e      	b.n	800071c <BAMOCAN_ID+0x1dc>
			{
				uartTransmitNumber(bamocar_stat.status[i+1], 10);
 80006fe:	7b7b      	ldrb	r3, [r7, #13]
 8000700:	3301      	adds	r3, #1
 8000702:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <BAMOCAN_ID+0x240>)
 8000704:	5cd3      	ldrb	r3, [r2, r3]
 8000706:	210a      	movs	r1, #10
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f863 	bl	80007d4 <uartTransmitNumber>
				uartTransmit(" ", 1);
 800070e:	2101      	movs	r1, #1
 8000710:	481d      	ldr	r0, [pc, #116]	; (8000788 <BAMOCAN_ID+0x248>)
 8000712:	f000 f84b 	bl	80007ac <uartTransmit>
			for (uint8_t i = 0; i < 4; i++)
 8000716:	7b7b      	ldrb	r3, [r7, #13]
 8000718:	3301      	adds	r3, #1
 800071a:	737b      	strb	r3, [r7, #13]
 800071c:	7b7b      	ldrb	r3, [r7, #13]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d9ed      	bls.n	80006fe <BAMOCAN_ID+0x1be>
			}
			uartTransmit("\n", 1);
 8000722:	2101      	movs	r1, #1
 8000724:	4814      	ldr	r0, [pc, #80]	; (8000778 <BAMOCAN_ID+0x238>)
 8000726:	f000 f841 	bl	80007ac <uartTransmit>
#endif

			break;
 800072a:	e01e      	b.n	800076a <BAMOCAN_ID+0x22a>

		case BAMOCAR_REG_FIRMWARE:
			bamocar_data.data = ((data[2]<<8) + data[1]);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3302      	adds	r3, #2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	021b      	lsls	r3, r3, #8
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	3201      	adds	r2, #1
 8000738:	7812      	ldrb	r2, [r2, #0]
 800073a:	4413      	add	r3, r2
 800073c:	461a      	mov	r2, r3
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <BAMOCAN_ID+0x260>)
 8000740:	601a      	str	r2, [r3, #0]

// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Firmware\n", 9);
 8000742:	2109      	movs	r1, #9
 8000744:	4817      	ldr	r0, [pc, #92]	; (80007a4 <BAMOCAN_ID+0x264>)
 8000746:	f000 f831 	bl	80007ac <uartTransmit>
			uartTransmitNumber(bamocar_data.data, 16);
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <BAMOCAN_ID+0x260>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2110      	movs	r1, #16
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f83f 	bl	80007d4 <uartTransmitNumber>
			uartTransmit("\n", 1);
 8000756:	2101      	movs	r1, #1
 8000758:	4807      	ldr	r0, [pc, #28]	; (8000778 <BAMOCAN_ID+0x238>)
 800075a:	f000 f827 	bl	80007ac <uartTransmit>
#endif

			break;
 800075e:	e004      	b.n	800076a <BAMOCAN_ID+0x22a>

		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000760:	2121      	movs	r1, #33	; 0x21
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <BAMOCAN_ID+0x268>)
 8000764:	f000 f822 	bl	80007ac <uartTransmit>
			break;
 8000768:	bf00      	nop
	}
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	080052b0 	.word	0x080052b0
 8000778:	080052c0 	.word	0x080052c0
 800077c:	080052c4 	.word	0x080052c4
 8000780:	2000003c 	.word	0x2000003c
 8000784:	080052d0 	.word	0x080052d0
 8000788:	080052e0 	.word	0x080052e0
 800078c:	20000034 	.word	0x20000034
 8000790:	20000030 	.word	0x20000030
 8000794:	080052e4 	.word	0x080052e4
 8000798:	2000002c 	.word	0x2000002c
 800079c:	080052f4 	.word	0x080052f4
 80007a0:	20000038 	.word	0x20000038
 80007a4:	08005308 	.word	0x08005308
 80007a8:	08005314 	.word	0x08005314

080007ac <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <uartTransmit+0x24>)
 80007c2:	f004 f89b 	bl	80048fc <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000013c 	.word	0x2000013c

080007d4 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f004 fd54 	bl	8005294 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd21 	bl	8000238 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f107 010c 	add.w	r1, r7, #12
 80007fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000802:	4803      	ldr	r0, [pc, #12]	; (8000810 <uartTransmitNumber+0x3c>)
 8000804:	f004 f87a 	bl	80048fc <HAL_UART_Transmit>
}
 8000808:	bf00      	nop
 800080a:	3718      	adds	r7, #24
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000013c 	.word	0x2000013c

08000814 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 8000818:	2112      	movs	r1, #18
 800081a:	4822      	ldr	r0, [pc, #136]	; (80008a4 <collectMiddlewareInfo+0x90>)
 800081c:	f7ff ffc6 	bl	80007ac <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);					// CMSIS Version anzeigen
 8000820:	210a      	movs	r1, #10
 8000822:	2005      	movs	r0, #5
 8000824:	f7ff ffd6 	bl	80007d4 <uartTransmitNumber>
	uartTransmit(".", 1);
 8000828:	2101      	movs	r1, #1
 800082a:	481f      	ldr	r0, [pc, #124]	; (80008a8 <collectMiddlewareInfo+0x94>)
 800082c:	f7ff ffbe 	bl	80007ac <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);					// CMSIS Version anzeigen
 8000830:	210a      	movs	r1, #10
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff ffce 	bl	80007d4 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));		// Hal Version anzeigen
 8000838:	2110      	movs	r1, #16
 800083a:	481c      	ldr	r0, [pc, #112]	; (80008ac <collectMiddlewareInfo+0x98>)
 800083c:	f7ff ffb6 	bl	80007ac <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000840:	f001 fae4 	bl	8001e0c <HAL_GetHalVersion>
 8000844:	4603      	mov	r3, r0
 8000846:	0e1b      	lsrs	r3, r3, #24
 8000848:	b2db      	uxtb	r3, r3
 800084a:	210a      	movs	r1, #10
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ffc1 	bl	80007d4 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 8000852:	2101      	movs	r1, #1
 8000854:	4814      	ldr	r0, [pc, #80]	; (80008a8 <collectMiddlewareInfo+0x94>)
 8000856:	f7ff ffa9 	bl	80007ac <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800085a:	f001 fad7 	bl	8001e0c <HAL_GetHalVersion>
 800085e:	4603      	mov	r3, r0
 8000860:	0c1b      	lsrs	r3, r3, #16
 8000862:	b2db      	uxtb	r3, r3
 8000864:	210a      	movs	r1, #10
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ffb4 	bl	80007d4 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 800086c:	2101      	movs	r1, #1
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <collectMiddlewareInfo+0x94>)
 8000870:	f7ff ff9c 	bl	80007ac <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000874:	f001 faca 	bl	8001e0c <HAL_GetHalVersion>
 8000878:	4603      	mov	r3, r0
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b2db      	uxtb	r3, r3
 800087e:	210a      	movs	r1, #10
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ffa7 	bl	80007d4 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 8000886:	2101      	movs	r1, #1
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <collectMiddlewareInfo+0x94>)
 800088a:	f7ff ff8f 	bl	80007ac <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 800088e:	f001 fabd 	bl	8001e0c <HAL_GetHalVersion>
 8000892:	4603      	mov	r3, r0
 8000894:	b2db      	uxtb	r3, r3
 8000896:	210a      	movs	r1, #10
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff9b 	bl	80007d4 <uartTransmitNumber>
	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);					// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);
#endif
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08005390 	.word	0x08005390
 80008a8:	080053a4 	.word	0x080053a4
 80008ac:	080053a8 	.word	0x080053a8

080008b0 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 80008b4:	2110      	movs	r1, #16
 80008b6:	4816      	ldr	r0, [pc, #88]	; (8000910 <collectSoftwareInfo+0x60>)
 80008b8:	f7ff ff78 	bl	80007ac <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));						// Git Commit anzeigen
 80008bc:	2108      	movs	r1, #8
 80008be:	4815      	ldr	r0, [pc, #84]	; (8000914 <collectSoftwareInfo+0x64>)
 80008c0:	f7ff ff74 	bl	80007ac <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80008c4:	210f      	movs	r1, #15
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <collectSoftwareInfo+0x68>)
 80008c8:	f7ff ff70 	bl	80007ac <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));						// Git Branch anzeigen
 80008cc:	210c      	movs	r1, #12
 80008ce:	4813      	ldr	r0, [pc, #76]	; (800091c <collectSoftwareInfo+0x6c>)
 80008d0:	f7ff ff6c 	bl	80007ac <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 80008d4:	210d      	movs	r1, #13
 80008d6:	4812      	ldr	r0, [pc, #72]	; (8000920 <collectSoftwareInfo+0x70>)
 80008d8:	f7ff ff68 	bl	80007ac <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));							// Git Hash anzeigen
 80008dc:	2129      	movs	r1, #41	; 0x29
 80008de:	4811      	ldr	r0, [pc, #68]	; (8000924 <collectSoftwareInfo+0x74>)
 80008e0:	f7ff ff64 	bl	80007ac <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80008e4:	210f      	movs	r1, #15
 80008e6:	4810      	ldr	r0, [pc, #64]	; (8000928 <collectSoftwareInfo+0x78>)
 80008e8:	f7ff ff60 	bl	80007ac <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));						// Kompilierdatum anzeigen
 80008ec:	210c      	movs	r1, #12
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <collectSoftwareInfo+0x7c>)
 80008f0:	f7ff ff5c 	bl	80007ac <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80008f4:	210f      	movs	r1, #15
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <collectSoftwareInfo+0x80>)
 80008f8:	f7ff ff58 	bl	80007ac <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));						// Kompilierzeit anzeigen
 80008fc:	2109      	movs	r1, #9
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <collectSoftwareInfo+0x84>)
 8000900:	f7ff ff54 	bl	80007ac <uartTransmit>

	uartTransmit("\n", 1);
 8000904:	2101      	movs	r1, #1
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <collectSoftwareInfo+0x88>)
 8000908:	f7ff ff50 	bl	80007ac <uartTransmit>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	080053b8 	.word	0x080053b8
 8000914:	080053c8 	.word	0x080053c8
 8000918:	080053d0 	.word	0x080053d0
 800091c:	080053e0 	.word	0x080053e0
 8000920:	080053ec 	.word	0x080053ec
 8000924:	080053fc 	.word	0x080053fc
 8000928:	08005428 	.word	0x08005428
 800092c:	08005438 	.word	0x08005438
 8000930:	08005444 	.word	0x08005444
 8000934:	08005454 	.word	0x08005454
 8000938:	08005460 	.word	0x08005460

0800093c <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000942:	2113      	movs	r1, #19
 8000944:	483b      	ldr	r0, [pc, #236]	; (8000a34 <collectHardwareInfo+0xf8>)
 8000946:	f7ff ff31 	bl	80007ac <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);								// Mikrocontroller Typ
 800094a:	f001 fa75 	bl	8001e38 <HAL_GetDEVID>
 800094e:	4603      	mov	r3, r0
 8000950:	210a      	movs	r1, #10
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff3e 	bl	80007d4 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 8000958:	2115      	movs	r1, #21
 800095a:	4837      	ldr	r0, [pc, #220]	; (8000a38 <collectHardwareInfo+0xfc>)
 800095c:	f7ff ff26 	bl	80007ac <uartTransmit>
	
	switch(HAL_GetREVID())												// Mikrocontroller Revision
 8000960:	f001 fa5e 	bl	8001e20 <HAL_GetREVID>
 8000964:	4603      	mov	r3, r0
 8000966:	f242 0201 	movw	r2, #8193	; 0x2001
 800096a:	4293      	cmp	r3, r2
 800096c:	d016      	beq.n	800099c <collectHardwareInfo+0x60>
 800096e:	f242 0201 	movw	r2, #8193	; 0x2001
 8000972:	4293      	cmp	r3, r2
 8000974:	d817      	bhi.n	80009a6 <collectHardwareInfo+0x6a>
 8000976:	f241 0201 	movw	r2, #4097	; 0x1001
 800097a:	4293      	cmp	r3, r2
 800097c:	d004      	beq.n	8000988 <collectHardwareInfo+0x4c>
 800097e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000982:	4293      	cmp	r3, r2
 8000984:	d005      	beq.n	8000992 <collectHardwareInfo+0x56>
 8000986:	e00e      	b.n	80009a6 <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 8000988:	2101      	movs	r1, #1
 800098a:	482c      	ldr	r0, [pc, #176]	; (8000a3c <collectHardwareInfo+0x100>)
 800098c:	f7ff ff0e 	bl	80007ac <uartTransmit>
			break;
 8000990:	e011      	b.n	80009b6 <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000992:	2101      	movs	r1, #1
 8000994:	482a      	ldr	r0, [pc, #168]	; (8000a40 <collectHardwareInfo+0x104>)
 8000996:	f7ff ff09 	bl	80007ac <uartTransmit>
			break;
 800099a:	e00c      	b.n	80009b6 <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 800099c:	2101      	movs	r1, #1
 800099e:	4829      	ldr	r0, [pc, #164]	; (8000a44 <collectHardwareInfo+0x108>)
 80009a0:	f7ff ff04 	bl	80007ac <uartTransmit>
			break;
 80009a4:	e007      	b.n	80009b6 <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 80009a6:	f001 fa3b 	bl	8001e20 <HAL_GetREVID>
 80009aa:	4603      	mov	r3, r0
 80009ac:	210a      	movs	r1, #10
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff10 	bl	80007d4 <uartTransmitNumber>
			break;
 80009b4:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80009b6:	2113      	movs	r1, #19
 80009b8:	4823      	ldr	r0, [pc, #140]	; (8000a48 <collectHardwareInfo+0x10c>)
 80009ba:	f7ff fef7 	bl	80007ac <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();					// Systemfrequenz ausgeben
 80009be:	f003 fa3d 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 80009c2:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <collectHardwareInfo+0x110>)
 80009c8:	fba2 2303 	umull	r2, r3, r2, r3
 80009cc:	0c9b      	lsrs	r3, r3, #18
 80009ce:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80009d0:	210a      	movs	r1, #10
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fefe 	bl	80007d4 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80009d8:	2104      	movs	r1, #4
 80009da:	481d      	ldr	r0, [pc, #116]	; (8000a50 <collectHardwareInfo+0x114>)
 80009dc:	f7ff fee6 	bl	80007ac <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80009e0:	210f      	movs	r1, #15
 80009e2:	481c      	ldr	r0, [pc, #112]	; (8000a54 <collectHardwareInfo+0x118>)
 80009e4:	f7ff fee2 	bl	80007ac <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);								// UID0 ausgeben
 80009e8:	f001 fa34 	bl	8001e54 <HAL_GetUIDw0>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2110      	movs	r1, #16
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff feef 	bl	80007d4 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80009f6:	2101      	movs	r1, #1
 80009f8:	4817      	ldr	r0, [pc, #92]	; (8000a58 <collectHardwareInfo+0x11c>)
 80009fa:	f7ff fed7 	bl	80007ac <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);								// UID1 ausgeben
 80009fe:	f001 fa35 	bl	8001e6c <HAL_GetUIDw1>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2110      	movs	r1, #16
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fee4 	bl	80007d4 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4812      	ldr	r0, [pc, #72]	; (8000a58 <collectHardwareInfo+0x11c>)
 8000a10:	f7ff fecc 	bl	80007ac <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);								// UID2 ausgeben
 8000a14:	f001 fa36 	bl	8001e84 <HAL_GetUIDw2>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fed9 	bl	80007d4 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000a22:	2101      	movs	r1, #1
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <collectHardwareInfo+0x120>)
 8000a26:	f7ff fec1 	bl	80007ac <uartTransmit>
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	08005464 	.word	0x08005464
 8000a38:	08005478 	.word	0x08005478
 8000a3c:	08005490 	.word	0x08005490
 8000a40:	08005494 	.word	0x08005494
 8000a44:	08005498 	.word	0x08005498
 8000a48:	0800549c 	.word	0x0800549c
 8000a4c:	431bde83 	.word	0x431bde83
 8000a50:	080054b0 	.word	0x080054b0
 8000a54:	080054b8 	.word	0x080054b8
 8000a58:	080054c8 	.word	0x080054c8
 8000a5c:	08005460 	.word	0x08005460

08000a60 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000a64:	2111      	movs	r1, #17
 8000a66:	480b      	ldr	r0, [pc, #44]	; (8000a94 <collectSystemInfo+0x34>)
 8000a68:	f7ff fea0 	bl	80007ac <uartTransmit>
	collectHardwareInfo();												// Sammelt Hardware Informationen und gibt diese über Uart aus
 8000a6c:	f7ff ff66 	bl	800093c <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000a70:	2111      	movs	r1, #17
 8000a72:	4809      	ldr	r0, [pc, #36]	; (8000a98 <collectSystemInfo+0x38>)
 8000a74:	f7ff fe9a 	bl	80007ac <uartTransmit>
	collectSoftwareInfo();												// Sammelt Software Informationen und gibt diese über Uart aus
 8000a78:	f7ff ff1a 	bl	80008b0 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000a7c:	2113      	movs	r1, #19
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <collectSystemInfo+0x3c>)
 8000a80:	f7ff fe94 	bl	80007ac <uartTransmit>
	collectMiddlewareInfo();											// Sammelt Middleware Informationen und gibt diese über Uart aus
 8000a84:	f7ff fec6 	bl	8000814 <collectMiddlewareInfo>

	uartTransmit("\n", 1);
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <collectSystemInfo+0x40>)
 8000a8c:	f7ff fe8e 	bl	80007ac <uartTransmit>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	080054cc 	.word	0x080054cc
 8000a98:	080054e0 	.word	0x080054e0
 8000a9c:	080054f4 	.word	0x080054f4
 8000aa0:	08005460 	.word	0x08005460

08000aa4 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	71fb      	strb	r3, [r7, #7]

	// Prüfe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000aae:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <readResetSource+0xa0>)
 8000ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ab2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	3301      	adds	r3, #1
 8000abe:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <readResetSource+0xa0>)
 8000ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ac4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	3302      	adds	r3, #2
 8000ad0:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <readResetSource+0xa0>)
 8000ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	da02      	bge.n	8000ae0 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	3304      	adds	r3, #4
 8000ade:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <readResetSource+0xa0>)
 8000ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d002      	beq.n	8000af2 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	3308      	adds	r3, #8
 8000af0:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <readResetSource+0xa0>)
 8000af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000af6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d002      	beq.n	8000b04 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	3310      	adds	r3, #16
 8000b02:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <readResetSource+0xa0>)
 8000b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	3320      	adds	r3, #32
 8000b14:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <readResetSource+0xa0>)
 8000b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	3340      	adds	r3, #64	; 0x40
 8000b26:	71fb      	strb	r3, [r7, #7]
	}

	// Lösche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <readResetSource+0xa0>)
 8000b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b2c:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <readResetSource+0xa0>)
 8000b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b32:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000b34:	79fb      	ldrb	r3, [r7, #7]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000b52:	2106      	movs	r1, #6
 8000b54:	482a      	ldr	r0, [pc, #168]	; (8000c00 <printResetSource+0xb8>)
 8000b56:	f7ff fe29 	bl	80007ac <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d104      	bne.n	8000b6a <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000b60:	210f      	movs	r1, #15
 8000b62:	4828      	ldr	r0, [pc, #160]	; (8000c04 <printResetSource+0xbc>)
 8000b64:	f7ff fe22 	bl	80007ac <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 8000b68:	e046      	b.n	8000bf8 <printResetSource+0xb0>
		if (reset_flags & IWDG1)										// Interner watchdog Reset
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d003      	beq.n	8000b7c <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000b74:	2118      	movs	r1, #24
 8000b76:	4824      	ldr	r0, [pc, #144]	; (8000c08 <printResetSource+0xc0>)
 8000b78:	f7ff fe18 	bl	80007ac <uartTransmit>
		if (reset_flags & WWDG1)										// Window watchdog Reset
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000b86:	2116      	movs	r1, #22
 8000b88:	4820      	ldr	r0, [pc, #128]	; (8000c0c <printResetSource+0xc4>)
 8000b8a:	f7ff fe0f 	bl	80007ac <uartTransmit>
		if (reset_flags & CPURST1)										// CPU Reset
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 0304 	and.w	r3, r3, #4
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 8000b98:	210a      	movs	r1, #10
 8000b9a:	481d      	ldr	r0, [pc, #116]	; (8000c10 <printResetSource+0xc8>)
 8000b9c:	f7ff fe06 	bl	80007ac <uartTransmit>
		if (reset_flags & BORST1)										// Brown out Reset
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 8000baa:	2110      	movs	r1, #16
 8000bac:	4819      	ldr	r0, [pc, #100]	; (8000c14 <printResetSource+0xcc>)
 8000bae:	f7ff fdfd 	bl	80007ac <uartTransmit>
		if (reset_flags & PORST1)										//Power on Reset / Power down Reser
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	4816      	ldr	r0, [pc, #88]	; (8000c18 <printResetSource+0xd0>)
 8000bc0:	f7ff fdf4 	bl	80007ac <uartTransmit>
		if (reset_flags & SFTRST1)										// Software Reset
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 0320 	and.w	r3, r3, #32
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 8000bce:	210f      	movs	r1, #15
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <printResetSource+0xd4>)
 8000bd2:	f7ff fdeb 	bl	80007ac <uartTransmit>
		if (reset_flags & PINRST1)										//NRST pin
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 8000be0:	210a      	movs	r1, #10
 8000be2:	480f      	ldr	r0, [pc, #60]	; (8000c20 <printResetSource+0xd8>)
 8000be4:	f7ff fde2 	bl	80007ac <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	da03      	bge.n	8000bf8 <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 8000bf0:	2105      	movs	r1, #5
 8000bf2:	480c      	ldr	r0, [pc, #48]	; (8000c24 <printResetSource+0xdc>)
 8000bf4:	f7ff fdda 	bl	80007ac <uartTransmit>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	08005508 	.word	0x08005508
 8000c04:	08005510 	.word	0x08005510
 8000c08:	08005520 	.word	0x08005520
 8000c0c:	0800553c 	.word	0x0800553c
 8000c10:	08005554 	.word	0x08005554
 8000c14:	08005560 	.word	0x08005560
 8000c18:	08005574 	.word	0x08005574
 8000c1c:	08005584 	.word	0x08005584
 8000c20:	08005594 	.word	0x08005594
 8000c24:	080055a0 	.word	0x080055a0

08000c28 <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {												// HAL OK
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d104      	bne.n	8000c42 <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000c38:	2107      	movs	r1, #7
 8000c3a:	480f      	ldr	r0, [pc, #60]	; (8000c78 <hal_error+0x50>)
 8000c3c:	f7ff fdb6 	bl	80007ac <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {									// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000c40:	e016      	b.n	8000c70 <hal_error+0x48>
	else if (status == HAL_ERROR) {										// HAL Error
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d104      	bne.n	8000c52 <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000c48:	210a      	movs	r1, #10
 8000c4a:	480c      	ldr	r0, [pc, #48]	; (8000c7c <hal_error+0x54>)
 8000c4c:	f7ff fdae 	bl	80007ac <uartTransmit>
}
 8000c50:	e00e      	b.n	8000c70 <hal_error+0x48>
	else if (status == HAL_BUSY) {										// HAL Beschäftigt
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d104      	bne.n	8000c62 <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000c58:	2109      	movs	r1, #9
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <hal_error+0x58>)
 8000c5c:	f7ff fda6 	bl	80007ac <uartTransmit>
}
 8000c60:	e006      	b.n	8000c70 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {									// HAL Timeout
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	d103      	bne.n	8000c70 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000c68:	210c      	movs	r1, #12
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <hal_error+0x5c>)
 8000c6c:	f7ff fd9e 	bl	80007ac <uartTransmit>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	080055a8 	.word	0x080055a8
 8000c7c:	080055b0 	.word	0x080055b0
 8000c80:	080055bc 	.word	0x080055bc
 8000c84:	080055c8 	.word	0x080055c8

08000c88 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);
 8000c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c90:	48ce      	ldr	r0, [pc, #824]	; (8000fcc <readall_inputs+0x344>)
 8000c92:	f002 fcb7 	bl	8003604 <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	b2d9      	uxtb	r1, r3
 8000c9e:	4acc      	ldr	r2, [pc, #816]	; (8000fd0 <readall_inputs+0x348>)
 8000ca0:	7813      	ldrb	r3, [r2, #0]
 8000ca2:	f361 0300 	bfi	r3, r1, #0, #1
 8000ca6:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);
 8000ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cac:	48c7      	ldr	r0, [pc, #796]	; (8000fcc <readall_inputs+0x344>)
 8000cae:	f002 fca9 	bl	8003604 <HAL_GPIO_ReadPin>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	b2d9      	uxtb	r1, r3
 8000cba:	4ac5      	ldr	r2, [pc, #788]	; (8000fd0 <readall_inputs+0x348>)
 8000cbc:	7813      	ldrb	r3, [r2, #0]
 8000cbe:	f361 0341 	bfi	r3, r1, #1, #1
 8000cc2:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);
 8000cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc8:	48c0      	ldr	r0, [pc, #768]	; (8000fcc <readall_inputs+0x344>)
 8000cca:	f002 fc9b 	bl	8003604 <HAL_GPIO_ReadPin>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	b2d9      	uxtb	r1, r3
 8000cd6:	4abe      	ldr	r2, [pc, #760]	; (8000fd0 <readall_inputs+0x348>)
 8000cd8:	7813      	ldrb	r3, [r2, #0]
 8000cda:	f361 0382 	bfi	r3, r1, #2, #1
 8000cde:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);
 8000ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce4:	48b9      	ldr	r0, [pc, #740]	; (8000fcc <readall_inputs+0x344>)
 8000ce6:	f002 fc8d 	bl	8003604 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2d9      	uxtb	r1, r3
 8000cf2:	4ab7      	ldr	r2, [pc, #732]	; (8000fd0 <readall_inputs+0x348>)
 8000cf4:	7813      	ldrb	r3, [r2, #0]
 8000cf6:	f361 03c3 	bfi	r3, r1, #3, #1
 8000cfa:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	48b2      	ldr	r0, [pc, #712]	; (8000fcc <readall_inputs+0x344>)
 8000d02:	f002 fc7f 	bl	8003604 <HAL_GPIO_ReadPin>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	b2d9      	uxtb	r1, r3
 8000d0e:	4ab0      	ldr	r2, [pc, #704]	; (8000fd0 <readall_inputs+0x348>)
 8000d10:	7813      	ldrb	r3, [r2, #0]
 8000d12:	f361 1304 	bfi	r3, r1, #4, #1
 8000d16:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);
 8000d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1c:	48ad      	ldr	r0, [pc, #692]	; (8000fd4 <readall_inputs+0x34c>)
 8000d1e:	f002 fc71 	bl	8003604 <HAL_GPIO_ReadPin>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	b2d9      	uxtb	r1, r3
 8000d2a:	4aa9      	ldr	r2, [pc, #676]	; (8000fd0 <readall_inputs+0x348>)
 8000d2c:	7813      	ldrb	r3, [r2, #0]
 8000d2e:	f361 1345 	bfi	r3, r1, #5, #1
 8000d32:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);
 8000d34:	2102      	movs	r1, #2
 8000d36:	48a7      	ldr	r0, [pc, #668]	; (8000fd4 <readall_inputs+0x34c>)
 8000d38:	f002 fc64 	bl	8003604 <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	b2d9      	uxtb	r1, r3
 8000d44:	4aa2      	ldr	r2, [pc, #648]	; (8000fd0 <readall_inputs+0x348>)
 8000d46:	7813      	ldrb	r3, [r2, #0]
 8000d48:	f361 1386 	bfi	r3, r1, #6, #1
 8000d4c:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);
 8000d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d52:	48a1      	ldr	r0, [pc, #644]	; (8000fd8 <readall_inputs+0x350>)
 8000d54:	f002 fc56 	bl	8003604 <HAL_GPIO_ReadPin>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	b2d9      	uxtb	r1, r3
 8000d60:	4a9b      	ldr	r2, [pc, #620]	; (8000fd0 <readall_inputs+0x348>)
 8000d62:	7813      	ldrb	r3, [r2, #0]
 8000d64:	f361 13c7 	bfi	r3, r1, #7, #1
 8000d68:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);
 8000d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d6e:	489b      	ldr	r0, [pc, #620]	; (8000fdc <readall_inputs+0x354>)
 8000d70:	f002 fc48 	bl	8003604 <HAL_GPIO_ReadPin>
 8000d74:	4603      	mov	r3, r0
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	b2d9      	uxtb	r1, r3
 8000d7c:	4a94      	ldr	r2, [pc, #592]	; (8000fd0 <readall_inputs+0x348>)
 8000d7e:	7853      	ldrb	r3, [r2, #1]
 8000d80:	f361 0300 	bfi	r3, r1, #0, #1
 8000d84:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);
 8000d86:	2101      	movs	r1, #1
 8000d88:	4895      	ldr	r0, [pc, #596]	; (8000fe0 <readall_inputs+0x358>)
 8000d8a:	f002 fc3b 	bl	8003604 <HAL_GPIO_ReadPin>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	b2d9      	uxtb	r1, r3
 8000d96:	4a8e      	ldr	r2, [pc, #568]	; (8000fd0 <readall_inputs+0x348>)
 8000d98:	7853      	ldrb	r3, [r2, #1]
 8000d9a:	f361 0341 	bfi	r3, r1, #1, #1
 8000d9e:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000da0:	2101      	movs	r1, #1
 8000da2:	488c      	ldr	r0, [pc, #560]	; (8000fd4 <readall_inputs+0x34c>)
 8000da4:	f002 fc2e 	bl	8003604 <HAL_GPIO_ReadPin>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	b2d9      	uxtb	r1, r3
 8000db0:	4a87      	ldr	r2, [pc, #540]	; (8000fd0 <readall_inputs+0x348>)
 8000db2:	7853      	ldrb	r3, [r2, #1]
 8000db4:	f361 0382 	bfi	r3, r1, #2, #1
 8000db8:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	4883      	ldr	r0, [pc, #524]	; (8000fcc <readall_inputs+0x344>)
 8000dbe:	f002 fc21 	bl	8003604 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	b2d9      	uxtb	r1, r3
 8000dca:	4a81      	ldr	r2, [pc, #516]	; (8000fd0 <readall_inputs+0x348>)
 8000dcc:	7853      	ldrb	r3, [r2, #1]
 8000dce:	f361 03c3 	bfi	r3, r1, #3, #1
 8000dd2:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4883      	ldr	r0, [pc, #524]	; (8000fe4 <readall_inputs+0x35c>)
 8000dd8:	f002 fc14 	bl	8003604 <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	b2d9      	uxtb	r1, r3
 8000de4:	4a7a      	ldr	r2, [pc, #488]	; (8000fd0 <readall_inputs+0x348>)
 8000de6:	7853      	ldrb	r3, [r2, #1]
 8000de8:	f361 1304 	bfi	r3, r1, #4, #1
 8000dec:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);
 8000dee:	2104      	movs	r1, #4
 8000df0:	487c      	ldr	r0, [pc, #496]	; (8000fe4 <readall_inputs+0x35c>)
 8000df2:	f002 fc07 	bl	8003604 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	b2d9      	uxtb	r1, r3
 8000dfe:	4a74      	ldr	r2, [pc, #464]	; (8000fd0 <readall_inputs+0x348>)
 8000e00:	7853      	ldrb	r3, [r2, #1]
 8000e02:	f361 1345 	bfi	r3, r1, #5, #1
 8000e06:	7053      	strb	r3, [r2, #1]
	//system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);
	//system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);
 8000e08:	2102      	movs	r1, #2
 8000e0a:	4876      	ldr	r0, [pc, #472]	; (8000fe4 <readall_inputs+0x35c>)
 8000e0c:	f002 fbfa 	bl	8003604 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	b2d9      	uxtb	r1, r3
 8000e18:	4a73      	ldr	r2, [pc, #460]	; (8000fe8 <readall_inputs+0x360>)
 8000e1a:	7813      	ldrb	r3, [r2, #0]
 8000e1c:	f361 0300 	bfi	r3, r1, #0, #1
 8000e20:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);
 8000e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e26:	4869      	ldr	r0, [pc, #420]	; (8000fcc <readall_inputs+0x344>)
 8000e28:	f002 fbec 	bl	8003604 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	b2d9      	uxtb	r1, r3
 8000e34:	4a6c      	ldr	r2, [pc, #432]	; (8000fe8 <readall_inputs+0x360>)
 8000e36:	7813      	ldrb	r3, [r2, #0]
 8000e38:	f361 0341 	bfi	r3, r1, #1, #1
 8000e3c:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);
 8000e3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e42:	4862      	ldr	r0, [pc, #392]	; (8000fcc <readall_inputs+0x344>)
 8000e44:	f002 fbde 	bl	8003604 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	b2d9      	uxtb	r1, r3
 8000e50:	4a65      	ldr	r2, [pc, #404]	; (8000fe8 <readall_inputs+0x360>)
 8000e52:	7813      	ldrb	r3, [r2, #0]
 8000e54:	f361 0382 	bfi	r3, r1, #2, #1
 8000e58:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);
 8000e5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e5e:	485e      	ldr	r0, [pc, #376]	; (8000fd8 <readall_inputs+0x350>)
 8000e60:	f002 fbd0 	bl	8003604 <HAL_GPIO_ReadPin>
 8000e64:	4603      	mov	r3, r0
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	b2d9      	uxtb	r1, r3
 8000e6c:	4a5e      	ldr	r2, [pc, #376]	; (8000fe8 <readall_inputs+0x360>)
 8000e6e:	7813      	ldrb	r3, [r2, #0]
 8000e70:	f361 03c3 	bfi	r3, r1, #3, #1
 8000e74:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCCDC_FAULT_GPIO_Port, DCCDC_FAULT_Pin);
 8000e76:	2102      	movs	r1, #2
 8000e78:	4859      	ldr	r0, [pc, #356]	; (8000fe0 <readall_inputs+0x358>)
 8000e7a:	f002 fbc3 	bl	8003604 <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	b2d9      	uxtb	r1, r3
 8000e86:	4a58      	ldr	r2, [pc, #352]	; (8000fe8 <readall_inputs+0x360>)
 8000e88:	7813      	ldrb	r3, [r2, #0]
 8000e8a:	f361 1304 	bfi	r3, r1, #4, #1
 8000e8e:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);
 8000e90:	2110      	movs	r1, #16
 8000e92:	4853      	ldr	r0, [pc, #332]	; (8000fe0 <readall_inputs+0x358>)
 8000e94:	f002 fbb6 	bl	8003604 <HAL_GPIO_ReadPin>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	b2d9      	uxtb	r1, r3
 8000ea0:	4a52      	ldr	r2, [pc, #328]	; (8000fec <readall_inputs+0x364>)
 8000ea2:	7813      	ldrb	r3, [r2, #0]
 8000ea4:	f361 0300 	bfi	r3, r1, #0, #1
 8000ea8:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);
 8000eaa:	2110      	movs	r1, #16
 8000eac:	484b      	ldr	r0, [pc, #300]	; (8000fdc <readall_inputs+0x354>)
 8000eae:	f002 fba9 	bl	8003604 <HAL_GPIO_ReadPin>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	b2d9      	uxtb	r1, r3
 8000eba:	4a4c      	ldr	r2, [pc, #304]	; (8000fec <readall_inputs+0x364>)
 8000ebc:	7813      	ldrb	r3, [r2, #0]
 8000ebe:	f361 0341 	bfi	r3, r1, #1, #1
 8000ec2:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	4841      	ldr	r0, [pc, #260]	; (8000fcc <readall_inputs+0x344>)
 8000ec8:	f002 fb9c 	bl	8003604 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	b2d9      	uxtb	r1, r3
 8000ed4:	4a45      	ldr	r2, [pc, #276]	; (8000fec <readall_inputs+0x364>)
 8000ed6:	7813      	ldrb	r3, [r2, #0]
 8000ed8:	f361 0382 	bfi	r3, r1, #2, #1
 8000edc:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);
 8000ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee2:	483f      	ldr	r0, [pc, #252]	; (8000fe0 <readall_inputs+0x358>)
 8000ee4:	f002 fb8e 	bl	8003604 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	b2d9      	uxtb	r1, r3
 8000ef0:	4a3e      	ldr	r2, [pc, #248]	; (8000fec <readall_inputs+0x364>)
 8000ef2:	7813      	ldrb	r3, [r2, #0]
 8000ef4:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ef8:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);
 8000efa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efe:	4839      	ldr	r0, [pc, #228]	; (8000fe4 <readall_inputs+0x35c>)
 8000f00:	f002 fb80 	bl	8003604 <HAL_GPIO_ReadPin>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2d9      	uxtb	r1, r3
 8000f0c:	4a37      	ldr	r2, [pc, #220]	; (8000fec <readall_inputs+0x364>)
 8000f0e:	7813      	ldrb	r3, [r2, #0]
 8000f10:	f361 1304 	bfi	r3, r1, #4, #1
 8000f14:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);
 8000f16:	2110      	movs	r1, #16
 8000f18:	482c      	ldr	r0, [pc, #176]	; (8000fcc <readall_inputs+0x344>)
 8000f1a:	f002 fb73 	bl	8003604 <HAL_GPIO_ReadPin>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	b2d9      	uxtb	r1, r3
 8000f26:	4a31      	ldr	r2, [pc, #196]	; (8000fec <readall_inputs+0x364>)
 8000f28:	7813      	ldrb	r3, [r2, #0]
 8000f2a:	f361 1345 	bfi	r3, r1, #5, #1
 8000f2e:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);
 8000f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f34:	4829      	ldr	r0, [pc, #164]	; (8000fdc <readall_inputs+0x354>)
 8000f36:	f002 fb65 	bl	8003604 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	b2d9      	uxtb	r1, r3
 8000f42:	4a2a      	ldr	r2, [pc, #168]	; (8000fec <readall_inputs+0x364>)
 8000f44:	7813      	ldrb	r3, [r2, #0]
 8000f46:	f361 1386 	bfi	r3, r1, #6, #1
 8000f4a:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);
 8000f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f50:	4822      	ldr	r0, [pc, #136]	; (8000fdc <readall_inputs+0x354>)
 8000f52:	f002 fb57 	bl	8003604 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	b2d9      	uxtb	r1, r3
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <readall_inputs+0x364>)
 8000f60:	7813      	ldrb	r3, [r2, #0]
 8000f62:	f361 13c7 	bfi	r3, r1, #7, #1
 8000f66:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <readall_inputs+0x368>)
 8000f6c:	f002 fb4a 	bl	8003604 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	b2d9      	uxtb	r1, r3
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <readall_inputs+0x364>)
 8000f7a:	7853      	ldrb	r3, [r2, #1]
 8000f7c:	f361 0300 	bfi	r3, r1, #0, #1
 8000f80:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);
 8000f82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f86:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <readall_inputs+0x35c>)
 8000f88:	f002 fb3c 	bl	8003604 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	b2d9      	uxtb	r1, r3
 8000f94:	4a15      	ldr	r2, [pc, #84]	; (8000fec <readall_inputs+0x364>)
 8000f96:	7853      	ldrb	r3, [r2, #1]
 8000f98:	f361 0341 	bfi	r3, r1, #1, #1
 8000f9c:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	4810      	ldr	r0, [pc, #64]	; (8000fe4 <readall_inputs+0x35c>)
 8000fa4:	f002 fb2e 	bl	8003604 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	b2d9      	uxtb	r1, r3
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <readall_inputs+0x364>)
 8000fb2:	7853      	ldrb	r3, [r2, #1]
 8000fb4:	f361 0382 	bfi	r3, r1, #2, #1
 8000fb8:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);
 8000fba:	2120      	movs	r1, #32
 8000fbc:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <readall_inputs+0x358>)
 8000fbe:	f002 fb21 	bl	8003604 <HAL_GPIO_ReadPin>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	b2d9      	uxtb	r1, r3
 8000fca:	e013      	b.n	8000ff4 <readall_inputs+0x36c>
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	20000040 	.word	0x20000040
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	20000048 	.word	0x20000048
 8000fec:	20000044 	.word	0x20000044
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	; (800106c <readall_inputs+0x3e4>)
 8000ff6:	7853      	ldrb	r3, [r2, #1]
 8000ff8:	f361 03c3 	bfi	r3, r1, #3, #1
 8000ffc:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	481b      	ldr	r0, [pc, #108]	; (8001070 <readall_inputs+0x3e8>)
 8001002:	f002 faff 	bl	8003604 <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	b2d9      	uxtb	r1, r3
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <readall_inputs+0x3e4>)
 8001010:	7853      	ldrb	r3, [r2, #1]
 8001012:	f361 1304 	bfi	r3, r1, #4, #1
 8001016:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <readall_inputs+0x3e8>)
 800101c:	f002 faf2 	bl	8003604 <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	b2d9      	uxtb	r1, r3
 8001028:	4a10      	ldr	r2, [pc, #64]	; (800106c <readall_inputs+0x3e4>)
 800102a:	7853      	ldrb	r3, [r2, #1]
 800102c:	f361 1345 	bfi	r3, r1, #5, #1
 8001030:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	480e      	ldr	r0, [pc, #56]	; (8001070 <readall_inputs+0x3e8>)
 8001038:	f002 fae4 	bl	8003604 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	b2d9      	uxtb	r1, r3
 8001044:	4a09      	ldr	r2, [pc, #36]	; (800106c <readall_inputs+0x3e4>)
 8001046:	7853      	ldrb	r3, [r2, #1]
 8001048:	f361 1386 	bfi	r3, r1, #6, #1
 800104c:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);
 800104e:	2120      	movs	r1, #32
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <readall_inputs+0x3ec>)
 8001052:	f002 fad7 	bl	8003604 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	b2d9      	uxtb	r1, r3
 800105e:	4a03      	ldr	r2, [pc, #12]	; (800106c <readall_inputs+0x3e4>)
 8001060:	7853      	ldrb	r3, [r2, #1]
 8001062:	f361 13c7 	bfi	r3, r1, #7, #1
 8001066:	7053      	strb	r3, [r2, #1]
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000044 	.word	0x20000044
 8001070:	40021800 	.word	0x40021800
 8001074:	40021000 	.word	0x40021000

08001078 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800108a:	4b64      	ldr	r3, [pc, #400]	; (800121c <MX_ADC1_Init+0x1a4>)
 800108c:	4a64      	ldr	r2, [pc, #400]	; (8001220 <MX_ADC1_Init+0x1a8>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001090:	4b62      	ldr	r3, [pc, #392]	; (800121c <MX_ADC1_Init+0x1a4>)
 8001092:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001096:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001098:	4b60      	ldr	r3, [pc, #384]	; (800121c <MX_ADC1_Init+0x1a4>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800109e:	4b5f      	ldr	r3, [pc, #380]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a4:	4b5d      	ldr	r3, [pc, #372]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b2:	4b5a      	ldr	r3, [pc, #360]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010b8:	4b58      	ldr	r3, [pc, #352]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010ba:	4a5a      	ldr	r2, [pc, #360]	; (8001224 <MX_ADC1_Init+0x1ac>)
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010be:	4b57      	ldr	r3, [pc, #348]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010c6:	220a      	movs	r2, #10
 80010c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ca:	4b54      	ldr	r3, [pc, #336]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010d2:	4b52      	ldr	r3, [pc, #328]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d8:	4850      	ldr	r0, [pc, #320]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010da:	f000 fedf 	bl	8001e9c <HAL_ADC_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010e4:	f000 fce8 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80010e8:	230e      	movs	r3, #14
 80010ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80010f0:	2301      	movs	r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f4:	463b      	mov	r3, r7
 80010f6:	4619      	mov	r1, r3
 80010f8:	4848      	ldr	r0, [pc, #288]	; (800121c <MX_ADC1_Init+0x1a4>)
 80010fa:	f000 ff13 	bl	8001f24 <HAL_ADC_ConfigChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001104:	f000 fcd8 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001108:	2306      	movs	r3, #6
 800110a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800110c:	2302      	movs	r3, #2
 800110e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4619      	mov	r1, r3
 8001114:	4841      	ldr	r0, [pc, #260]	; (800121c <MX_ADC1_Init+0x1a4>)
 8001116:	f000 ff05 	bl	8001f24 <HAL_ADC_ConfigChannel>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001120:	f000 fcca 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001124:	2304      	movs	r3, #4
 8001126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001128:	2303      	movs	r3, #3
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800112c:	2302      	movs	r3, #2
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4619      	mov	r1, r3
 8001134:	4839      	ldr	r0, [pc, #228]	; (800121c <MX_ADC1_Init+0x1a4>)
 8001136:	f000 fef5 	bl	8001f24 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001140:	f000 fcba 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001144:	2305      	movs	r3, #5
 8001146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001148:	2304      	movs	r3, #4
 800114a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	4619      	mov	r1, r3
 8001150:	4832      	ldr	r0, [pc, #200]	; (800121c <MX_ADC1_Init+0x1a4>)
 8001152:	f000 fee7 	bl	8001f24 <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 800115c:	f000 fcac 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001160:	230f      	movs	r3, #15
 8001162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001164:	2305      	movs	r3, #5
 8001166:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001168:	2301      	movs	r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	482a      	ldr	r0, [pc, #168]	; (800121c <MX_ADC1_Init+0x1a4>)
 8001172:	f000 fed7 	bl	8001f24 <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 800117c:	f000 fc9c 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001180:	2303      	movs	r3, #3
 8001182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001184:	2306      	movs	r3, #6
 8001186:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001188:	2303      	movs	r3, #3
 800118a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118c:	463b      	mov	r3, r7
 800118e:	4619      	mov	r1, r3
 8001190:	4822      	ldr	r0, [pc, #136]	; (800121c <MX_ADC1_Init+0x1a4>)
 8001192:	f000 fec7 	bl	8001f24 <HAL_ADC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 800119c:	f000 fc8c 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011a0:	2307      	movs	r3, #7
 80011a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80011a4:	2307      	movs	r3, #7
 80011a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	4619      	mov	r1, r3
 80011ac:	481b      	ldr	r0, [pc, #108]	; (800121c <MX_ADC1_Init+0x1a4>)
 80011ae:	f000 feb9 	bl	8001f24 <HAL_ADC_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 80011b8:	f000 fc7e 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_ADC1_Init+0x1b0>)
 80011be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80011c0:	2308      	movs	r3, #8
 80011c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	4619      	mov	r1, r3
 80011c8:	4814      	ldr	r0, [pc, #80]	; (800121c <MX_ADC1_Init+0x1a4>)
 80011ca:	f000 feab 	bl	8001f24 <HAL_ADC_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 80011d4:	f000 fc70 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011d8:	2308      	movs	r3, #8
 80011da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80011dc:	2309      	movs	r3, #9
 80011de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011e0:	2301      	movs	r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <MX_ADC1_Init+0x1a4>)
 80011ea:	f000 fe9b 	bl	8001f24 <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 80011f4:	f000 fc60 	bl	8001ab8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011f8:	2309      	movs	r3, #9
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80011fc:	230a      	movs	r3, #10
 80011fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_ADC1_Init+0x1a4>)
 8001206:	f000 fe8d 	bl	8001f24 <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001210:	f000 fc52 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000005c 	.word	0x2000005c
 8001220:	40012000 	.word	0x40012000
 8001224:	0f000001 	.word	0x0f000001
 8001228:	10000012 	.word	0x10000012

0800122c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2d      	ldr	r2, [pc, #180]	; (8001300 <HAL_ADC_MspInit+0xd4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d153      	bne.n	80012f6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a26      	ldr	r2, [pc, #152]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_ADC_MspInit+0xd8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 80012ae:	23f8      	movs	r3, #248	; 0xf8
 80012b0:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b2:	2303      	movs	r3, #3
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4811      	ldr	r0, [pc, #68]	; (8001308 <HAL_ADC_MspInit+0xdc>)
 80012c2:	f001 fff3 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 80012c6:	2330      	movs	r3, #48	; 0x30
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <HAL_ADC_MspInit+0xe0>)
 80012da:	f001 ffe7 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 80012de:	2303      	movs	r3, #3
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <HAL_ADC_MspInit+0xe4>)
 80012f2:	f001 ffdb 	bl	80032ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40012000 	.word	0x40012000
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020800 	.word	0x40020800
 8001310:	40020400 	.word	0x40020400

08001314 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001318:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <MX_CAN3_Init+0xd0>)
 800131a:	4a33      	ldr	r2, [pc, #204]	; (80013e8 <MX_CAN3_Init+0xd4>)
 800131c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800131e:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001320:	2206      	movs	r2, #6
 8001322:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <MX_CAN3_Init+0xd0>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001330:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001332:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001336:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001338:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <MX_CAN3_Init+0xd0>)
 800133a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800133e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001340:	4b28      	ldr	r3, [pc, #160]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001342:	2200      	movs	r2, #0
 8001344:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001346:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001348:	2200      	movs	r2, #0
 800134a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800134c:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <MX_CAN3_Init+0xd0>)
 800134e:	2200      	movs	r2, #0
 8001350:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001352:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001354:	2200      	movs	r2, #0
 8001356:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MX_CAN3_Init+0xd0>)
 800135a:	2200      	movs	r2, #0
 800135c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001360:	2200      	movs	r2, #0
 8001362:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001364:	481f      	ldr	r0, [pc, #124]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001366:	f001 f821 	bl	80023ac <HAL_CAN_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001370:	f000 fba2 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */
	// Starte CAN Bus
	if((HAL_CAN_Start(&hcan3)) != HAL_OK)
 8001374:	481b      	ldr	r0, [pc, #108]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001376:	f001 fa01 	bl	800277c <HAL_CAN_Start>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_CAN3_Init+0x70>
	{
		// Fehler beim Starten des CAN-Busses
		Error_Handler();
 8001380:	f000 fb9a 	bl	8001ab8 <Error_Handler>
	}

	// Aktiviere Interrupts fuer CAN Bus
	if((HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 8001384:	2102      	movs	r1, #2
 8001386:	4817      	ldr	r0, [pc, #92]	; (80013e4 <MX_CAN3_Init+0xd0>)
 8001388:	f001 fc29 	bl	8002bde <HAL_CAN_ActivateNotification>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_CAN3_Init+0x82>
	{
		// Fehler in der Initialisierung des CAN Interrupts
		Error_Handler();
 8001392:	f000 fb91 	bl	8001ab8 <Error_Handler>
	}

	// Filter Bank initialisieren um Daten zu empfangen
	// Akzeptiere alle CAN-Pakete
	sFilterConfig.FilterBank = 0;
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <MX_CAN3_Init+0xd8>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <MX_CAN3_Init+0xd8>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_CAN3_Init+0xd8>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_CAN3_Init+0xd8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_CAN3_Init+0xd8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80013b4:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_CAN3_Init+0xd8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_CAN3_Init+0xd8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = 0;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_CAN3_Init+0xd8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_CAN3_Init+0xd8>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	621a      	str	r2, [r3, #32]

	// Filter Bank schreiben
	if((HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 80013cc:	4907      	ldr	r1, [pc, #28]	; (80013ec <MX_CAN3_Init+0xd8>)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_CAN3_Init+0xd0>)
 80013d0:	f001 f8e8 	bl	80025a4 <HAL_CAN_ConfigFilter>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_CAN3_Init+0xca>
	{
		// Fehler beim konfigurieren der Filterbank fuer den CAN-Bus
		Error_Handler();
 80013da:	f000 fb6d 	bl	8001ab8 <Error_Handler>
	}

  /* USER CODE END CAN3_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200000cc 	.word	0x200000cc
 80013e8:	40003400 	.word	0x40003400
 80013ec:	200000a4 	.word	0x200000a4

080013f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a27      	ldr	r2, [pc, #156]	; (80014ac <HAL_CAN_MspInit+0xbc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d148      	bne.n	80014a4 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001412:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800141c:	6413      	str	r3, [r2, #64]	; 0x40
 800141e:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a20      	ldr	r2, [pc, #128]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001430:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001448:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_CAN_MspInit+0xc0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001472:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001484:	230b      	movs	r3, #11
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4809      	ldr	r0, [pc, #36]	; (80014b4 <HAL_CAN_MspInit+0xc4>)
 8001490:	f001 ff0c 	bl	80032ac <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2069      	movs	r0, #105	; 0x69
 800149a:	f001 fed0 	bl	800323e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800149e:	2069      	movs	r0, #105	; 0x69
 80014a0:	f001 fee9 	bl	8003276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80014a4:	bf00      	nop
 80014a6:	3730      	adds	r7, #48	; 0x30
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40003400 	.word	0x40003400
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020000 	.word	0x40020000

080014b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	; 0x38
 80014bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ce:	4bb6      	ldr	r3, [pc, #728]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4ab5      	ldr	r2, [pc, #724]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4bb3      	ldr	r3, [pc, #716]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0310 	and.w	r3, r3, #16
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4bb0      	ldr	r3, [pc, #704]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4aaf      	ldr	r2, [pc, #700]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4bad      	ldr	r3, [pc, #692]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	61fb      	str	r3, [r7, #28]
 80014fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	4baa      	ldr	r3, [pc, #680]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4aa9      	ldr	r2, [pc, #676]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4ba7      	ldr	r3, [pc, #668]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	61bb      	str	r3, [r7, #24]
 8001514:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001516:	4ba4      	ldr	r3, [pc, #656]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4aa3      	ldr	r2, [pc, #652]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4ba1      	ldr	r3, [pc, #644]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b9e      	ldr	r3, [pc, #632]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a9d      	ldr	r2, [pc, #628]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b9b      	ldr	r3, [pc, #620]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b98      	ldr	r3, [pc, #608]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a97      	ldr	r2, [pc, #604]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b95      	ldr	r3, [pc, #596]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800155e:	4b92      	ldr	r3, [pc, #584]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a91      	ldr	r2, [pc, #580]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b8f      	ldr	r3, [pc, #572]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001576:	4b8c      	ldr	r3, [pc, #560]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a8b      	ldr	r2, [pc, #556]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b89      	ldr	r3, [pc, #548]	; (80017a8 <MX_GPIO_Init+0x2f0>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 800158e:	2200      	movs	r2, #0
 8001590:	f248 0187 	movw	r1, #32903	; 0x8087
 8001594:	4885      	ldr	r0, [pc, #532]	; (80017ac <MX_GPIO_Init+0x2f4>)
 8001596:	f002 f84d 	bl	8003634 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 800159a:	2200      	movs	r2, #0
 800159c:	f242 0108 	movw	r1, #8200	; 0x2008
 80015a0:	4883      	ldr	r0, [pc, #524]	; (80017b0 <MX_GPIO_Init+0x2f8>)
 80015a2:	f002 f847 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80015a6:	2200      	movs	r2, #0
 80015a8:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80015ac:	4881      	ldr	r0, [pc, #516]	; (80017b4 <MX_GPIO_Init+0x2fc>)
 80015ae:	f002 f841 	bl	8003634 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80015b2:	2200      	movs	r2, #0
 80015b4:	f647 0194 	movw	r1, #30868	; 0x7894
 80015b8:	487f      	ldr	r0, [pc, #508]	; (80017b8 <MX_GPIO_Init+0x300>)
 80015ba:	f002 f83b 	bl	8003634 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80015be:	2200      	movs	r2, #0
 80015c0:	f64e 2188 	movw	r1, #60040	; 0xea88
 80015c4:	487d      	ldr	r0, [pc, #500]	; (80017bc <MX_GPIO_Init+0x304>)
 80015c6:	f002 f835 	bl	8003634 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80015ca:	2200      	movs	r2, #0
 80015cc:	f64e 610c 	movw	r1, #60940	; 0xee0c
 80015d0:	487b      	ldr	r0, [pc, #492]	; (80017c0 <MX_GPIO_Init+0x308>)
 80015d2:	f002 f82f 	bl	8003634 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015dc:	4879      	ldr	r0, [pc, #484]	; (80017c4 <MX_GPIO_Init+0x30c>)
 80015de:	f002 f829 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80015e2:	f248 0387 	movw	r3, #32903	; 0x8087
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	486c      	ldr	r0, [pc, #432]	; (80017ac <MX_GPIO_Init+0x2f4>)
 80015fc:	f001 fe56 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001600:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	4865      	ldr	r0, [pc, #404]	; (80017ac <MX_GPIO_Init+0x2f4>)
 8001616:	f001 fe49 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	485f      	ldr	r0, [pc, #380]	; (80017b0 <MX_GPIO_Init+0x2f8>)
 8001634:	f001 fe3a 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001638:	f64d 7347 	movw	r3, #57159	; 0xdf47
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800163e:	2303      	movs	r3, #3
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4858      	ldr	r0, [pc, #352]	; (80017b0 <MX_GPIO_Init+0x2f8>)
 800164e:	f001 fe2d 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 8001652:	f640 0303 	movw	r3, #2051	; 0x803
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001664:	4619      	mov	r1, r3
 8001666:	4853      	ldr	r0, [pc, #332]	; (80017b4 <MX_GPIO_Init+0x2fc>)
 8001668:	f001 fe20 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800166c:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	484b      	ldr	r0, [pc, #300]	; (80017b4 <MX_GPIO_Init+0x2fc>)
 8001686:	f001 fe11 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 800168a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001690:	2303      	movs	r3, #3
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	4845      	ldr	r0, [pc, #276]	; (80017b4 <MX_GPIO_Init+0x2fc>)
 80016a0:	f001 fe04 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80016a4:	2308      	movs	r3, #8
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a8:	2301      	movs	r3, #1
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016b0:	2302      	movs	r3, #2
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	483d      	ldr	r0, [pc, #244]	; (80017b0 <MX_GPIO_Init+0x2f8>)
 80016bc:	f001 fdf6 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80016c0:	f640 6307 	movw	r3, #3591	; 0xe07
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	4619      	mov	r1, r3
 80016d4:	483b      	ldr	r0, [pc, #236]	; (80017c4 <MX_GPIO_Init+0x30c>)
 80016d6:	f001 fde9 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80016da:	f647 0394 	movw	r3, #30868	; 0x7894
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f0:	4619      	mov	r1, r3
 80016f2:	4831      	ldr	r0, [pc, #196]	; (80017b8 <MX_GPIO_Init+0x300>)
 80016f4:	f001 fdda 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 80016f8:	f241 13f3 	movw	r3, #4595	; 0x11f3
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170a:	4619      	mov	r1, r3
 800170c:	482c      	ldr	r0, [pc, #176]	; (80017c0 <MX_GPIO_Init+0x308>)
 800170e:	f001 fdcd 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8001712:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	4824      	ldr	r0, [pc, #144]	; (80017b8 <MX_GPIO_Init+0x300>)
 8001728:	f001 fdc0 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 800172c:	f241 5310 	movw	r3, #5392	; 0x1510
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173e:	4619      	mov	r1, r3
 8001740:	481e      	ldr	r0, [pc, #120]	; (80017bc <MX_GPIO_Init+0x304>)
 8001742:	f001 fdb3 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001746:	f64e 2388 	movw	r3, #60040	; 0xea88
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174c:	2301      	movs	r3, #1
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	4817      	ldr	r0, [pc, #92]	; (80017bc <MX_GPIO_Init+0x304>)
 8001760:	f001 fda4 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001764:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	4619      	mov	r1, r3
 800177c:	4810      	ldr	r0, [pc, #64]	; (80017c0 <MX_GPIO_Init+0x308>)
 800177e:	f001 fd95 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	4806      	ldr	r0, [pc, #24]	; (80017b0 <MX_GPIO_Init+0x2f8>)
 8001796:	f001 fd89 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 800179a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e00f      	b.n	80017c8 <MX_GPIO_Init+0x310>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40020800 	.word	0x40020800
 80017b4:	40021400 	.word	0x40021400
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020c00 	.word	0x40020c00
 80017c0:	40021800 	.word	0x40021800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	480f      	ldr	r0, [pc, #60]	; (8001814 <MX_GPIO_Init+0x35c>)
 80017d6:	f001 fd69 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 80017da:	2307      	movs	r3, #7
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017de:	2303      	movs	r3, #3
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ea:	4619      	mov	r1, r3
 80017ec:	480a      	ldr	r0, [pc, #40]	; (8001818 <MX_GPIO_Init+0x360>)
 80017ee:	f001 fd5d 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 80017f2:	f44f 7358 	mov.w	r3, #864	; 0x360
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f8:	2303      	movs	r3, #3
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_GPIO_Init+0x364>)
 8001808:	f001 fd50 	bl	80032ac <HAL_GPIO_Init>

}
 800180c:	bf00      	nop
 800180e:	3738      	adds	r7, #56	; 0x38
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40020000 	.word	0x40020000
 8001818:	40020c00 	.word	0x40020c00
 800181c:	40020400 	.word	0x40020400

08001820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001826:	f000 fa70 	bl	8001d0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182a:	f000 f89d 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800182e:	f7ff fe43 	bl	80014b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001832:	f000 f9cd 	bl	8001bd0 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8001836:	f7ff fd6d 	bl	8001314 <MX_CAN3_Init>
  MX_ADC1_Init();
 800183a:	f7ff fc1d 	bl	8001078 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  	// Schreibe Resetquelle auf die Konsole
#ifdef DEBUG
	printResetSource(readResetSource());
 800183e:	f7ff f931 	bl	8000aa4 <readResetSource>
 8001842:	4603      	mov	r3, r0
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff f97f 	bl	8000b48 <printResetSource>

  	// Teste serielle Schnittstelle
  	#define TEST_STRING_UART  			"\nUART3 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 800184a:	213a      	movs	r1, #58	; 0x3a
 800184c:	483b      	ldr	r0, [pc, #236]	; (800193c <main+0x11c>)
 800184e:	f7fe ffad 	bl	80007ac <uartTransmit>

  	// Sammel Systeminformationen
  	collectSystemInfo();
 8001852:	f7ff f905 	bl	8000a60 <collectSystemInfo>
#endif

  	// Lese alle Eingaenge
  	readall_inputs();
 8001856:	f7ff fa17 	bl	8000c88 <readall_inputs>

    // Sendenachricht erstellen
  	TxMessage.StdId = 0x123;
 800185a:	4b39      	ldr	r3, [pc, #228]	; (8001940 <main+0x120>)
 800185c:	f240 1223 	movw	r2, #291	; 0x123
 8001860:	601a      	str	r2, [r3, #0]
  	TxMessage.ExtId = 0;
 8001862:	4b37      	ldr	r3, [pc, #220]	; (8001940 <main+0x120>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  	TxMessage.RTR = CAN_RTR_DATA;
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <main+0x120>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  	TxMessage.IDE = CAN_ID_STD;
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <main+0x120>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  	TxMessage.DLC = 8;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <main+0x120>)
 8001876:	2208      	movs	r2, #8
 8001878:	611a      	str	r2, [r3, #16]
  	TxMessage.TransmitGlobalTime=DISABLE;
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <main+0x120>)
 800187c:	2200      	movs	r2, #0
 800187e:	751a      	strb	r2, [r3, #20]

  	for (uint8_t j = 0; j < 8; j++)
 8001880:	2300      	movs	r3, #0
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	e008      	b.n	8001898 <main+0x78>
  		TxData[j] = (j + 1);
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	79fa      	ldrb	r2, [r7, #7]
 800188a:	3201      	adds	r2, #1
 800188c:	b2d1      	uxtb	r1, r2
 800188e:	4a2d      	ldr	r2, [pc, #180]	; (8001944 <main+0x124>)
 8001890:	54d1      	strb	r1, [r2, r3]
  	for (uint8_t j = 0; j < 8; j++)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	3301      	adds	r3, #1
 8001896:	71fb      	strb	r3, [r7, #7]
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b07      	cmp	r3, #7
 800189c:	d9f3      	bls.n	8001886 <main+0x66>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Wenn Nachricht über den CAN-Bus empfangen wurde
		if (can_change == 1)
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <main+0x128>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d135      	bne.n	8001912 <main+0xf2>
		{
			// Nachricht ID über UART ausgeben
			uartTransmitNumber(RxMessage.StdId, 16);
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <main+0x12c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2110      	movs	r1, #16
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe ff91 	bl	80007d4 <uartTransmitNumber>
			uartTransmit("\t", 1);
 80018b2:	2101      	movs	r1, #1
 80018b4:	4826      	ldr	r0, [pc, #152]	; (8001950 <main+0x130>)
 80018b6:	f7fe ff79 	bl	80007ac <uartTransmit>
			for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	71bb      	strb	r3, [r7, #6]
 80018be:	e009      	b.n	80018d4 <main+0xb4>
			{
				uartTransmitNumber(RxData[i], 16);
 80018c0:	79bb      	ldrb	r3, [r7, #6]
 80018c2:	4a24      	ldr	r2, [pc, #144]	; (8001954 <main+0x134>)
 80018c4:	5cd3      	ldrb	r3, [r2, r3]
 80018c6:	2110      	movs	r1, #16
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe ff83 	bl	80007d4 <uartTransmitNumber>
			for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80018ce:	79bb      	ldrb	r3, [r7, #6]
 80018d0:	3301      	adds	r3, #1
 80018d2:	71bb      	strb	r3, [r7, #6]
 80018d4:	79ba      	ldrb	r2, [r7, #6]
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <main+0x12c>)
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3f0      	bcc.n	80018c0 <main+0xa0>
			}
			uartTransmit("\n", 1);
 80018de:	2101      	movs	r1, #1
 80018e0:	481d      	ldr	r0, [pc, #116]	; (8001958 <main+0x138>)
 80018e2:	f7fe ff63 	bl	80007ac <uartTransmit>

			// Sortieren der IDs nach Geräten
			switch (RxMessage.StdId)
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <main+0x12c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f240 1281 	movw	r2, #385	; 0x181
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d107      	bne.n	8001902 <main+0xe2>
			{
				case BAMOCAR_RX_ID:
					BAMOCAN_ID(&RxData[0], RxMessage.DLC);
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <main+0x12c>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	4619      	mov	r1, r3
 80018fa:	4816      	ldr	r0, [pc, #88]	; (8001954 <main+0x134>)
 80018fc:	f7fe fe20 	bl	8000540 <BAMOCAN_ID>
					break;
 8001900:	e004      	b.n	800190c <main+0xec>
				default:
					uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8001902:	2118      	movs	r1, #24
 8001904:	4815      	ldr	r0, [pc, #84]	; (800195c <main+0x13c>)
 8001906:	f7fe ff51 	bl	80007ac <uartTransmit>
					break;
 800190a:	bf00      	nop
			}
			can_change = 0;
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <main+0x128>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(1000);
 8001912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001916:	f000 fa55 	bl	8001dc4 <HAL_Delay>

		// Sende CAN Nachricht auf CAN-Bus
		status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 800191a:	2301      	movs	r3, #1
 800191c:	4a09      	ldr	r2, [pc, #36]	; (8001944 <main+0x124>)
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <main+0x120>)
 8001920:	480f      	ldr	r0, [pc, #60]	; (8001960 <main+0x140>)
 8001922:	f000 ff6f 	bl	8002804 <HAL_CAN_AddTxMessage>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <main+0x144>)
 800192c:	701a      	strb	r2, [r3, #0]
		hal_error(status);
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <main+0x144>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f978 	bl	8000c28 <hal_error>
		if (can_change == 1)
 8001938:	e7b1      	b.n	800189e <main+0x7e>
 800193a:	bf00      	nop
 800193c:	080055d8 	.word	0x080055d8
 8001940:	20000104 	.word	0x20000104
 8001944:	200000f4 	.word	0x200000f4
 8001948:	20000028 	.word	0x20000028
 800194c:	2000011c 	.word	0x2000011c
 8001950:	08005614 	.word	0x08005614
 8001954:	200000fc 	.word	0x200000fc
 8001958:	08005618 	.word	0x08005618
 800195c:	0800561c 	.word	0x0800561c
 8001960:	200000cc 	.word	0x200000cc
 8001964:	20000138 	.word	0x20000138

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0b8      	sub	sp, #224	; 0xe0
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001972:	2234      	movs	r2, #52	; 0x34
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f003 fc42 	bl	8005200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800198c:	f107 0308 	add.w	r3, r7, #8
 8001990:	2290      	movs	r2, #144	; 0x90
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f003 fc33 	bl	8005200 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b39      	ldr	r3, [pc, #228]	; (8001a80 <SystemClock_Config+0x118>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a38      	ldr	r2, [pc, #224]	; (8001a80 <SystemClock_Config+0x118>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <SystemClock_Config+0x118>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019b2:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <SystemClock_Config+0x11c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019ba:	4a32      	ldr	r2, [pc, #200]	; (8001a84 <SystemClock_Config+0x11c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <SystemClock_Config+0x11c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2302      	movs	r3, #2
 80019de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 80019ea:	2319      	movs	r3, #25
 80019ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 80019f0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80019f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f001 fe7d 	bl	8003708 <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001a14:	f000 f850 	bl	8001ab8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a18:	f001 fe26 	bl	8003668 <HAL_PWREx_EnableOverDrive>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001a22:	f000 f849 	bl	8001ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a26:	230f      	movs	r3, #15
 8001a28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 f909 	bl	8003c64 <HAL_RCC_ClockConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001a58:	f000 f82e 	bl	8001ab8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fad1 	bl	8004010 <HAL_RCCEx_PeriphCLKConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001a74:	f000 f820 	bl	8001ab8 <Error_Handler>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	37e0      	adds	r7, #224	; 0xe0
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000

08001a88 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// CAN Interrupt Nachricht angekommen
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	// Nachricht aus Speicher auslesen
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001a94:	2100      	movs	r1, #0
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 ff8f 	bl	80029ba <HAL_CAN_GetRxMessage>
	can_change = 1;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200000fc 	.word	0x200000fc
 8001ab0:	2000011c 	.word	0x2000011c
 8001ab4:	20000028 	.word	0x20000028

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  // Schalte Fehler LED ein
  leuchten_out.RedLed = 1;
 8001ac0:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <Error_Handler+0x30>)
 8001ac2:	7853      	ldrb	r3, [r2, #1]
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	7053      	strb	r3, [r2, #1]
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, leuchten_out.RedLed);
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <Error_Handler+0x30>)
 8001acc:	785b      	ldrb	r3, [r3, #1]
 8001ace:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <Error_Handler+0x34>)
 8001ada:	f001 fdab 	bl	8003634 <HAL_GPIO_WritePin>

  // Sende Nachricht auf Uart-Interface
#ifdef DEBUG
  #define STRING_ERROR_HANDLER			"Error Handler wird ausgefuehrt!!!"
  uartTransmit(STRING_ERROR_HANDLER, sizeof(STRING_ERROR_HANDLER));
 8001ade:	2122      	movs	r1, #34	; 0x22
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <Error_Handler+0x38>)
 8001ae2:	f7fe fe63 	bl	80007ac <uartTransmit>
#endif
  // Beginne Endlosschleife nachdem Fehler aufgetreten ist
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <Error_Handler+0x2e>
 8001ae8:	20000058 	.word	0x20000058
 8001aec:	40020400 	.word	0x40020400
 8001af0:	08005638 	.word	0x08005638

08001af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <HAL_MspInit+0x44>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_MspInit+0x44>)
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_MspInit+0x44>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_MspInit+0x44>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <HAL_MspInit+0x44>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_MspInit+0x44>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b26:	603b      	str	r3, [r7, #0]
 8001b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40023800 	.word	0x40023800

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b88:	f000 f8fc 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8001b94:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <CAN3_RX0_IRQHandler+0x10>)
 8001b96:	f001 f848 	bl	8002c2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	200000cc 	.word	0x200000cc

08001ba4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <SystemInit+0x28>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bae:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <SystemInit+0x28>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <SystemInit+0x28>)
 8001bba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bbe:	609a      	str	r2, [r3, #8]
#endif
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <MX_USART2_UART_Init+0x5c>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_USART2_UART_Init+0x58>)
 8001c14:	f002 fe24 	bl	8004860 <HAL_UART_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c1e:	f7ff ff4b 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2000013c 	.word	0x2000013c
 8001c2c:	40004400 	.word	0x40004400

08001c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a17      	ldr	r2, [pc, #92]	; (8001cac <HAL_UART_MspInit+0x7c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d127      	bne.n	8001ca2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_UART_MspInit+0x80>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <HAL_UART_MspInit+0x80>)
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_UART_MspInit+0x80>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0x80>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a10      	ldr	r2, [pc, #64]	; (8001cb0 <HAL_UART_MspInit+0x80>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_UART_MspInit+0x80>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8001c82:	2360      	movs	r3, #96	; 0x60
 8001c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c92:	2307      	movs	r3, #7
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <HAL_UART_MspInit+0x84>)
 8001c9e:	f001 fb05 	bl	80032ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020c00 	.word	0x40020c00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cbe:	e003      	b.n	8001cc8 <LoopCopyDataInit>

08001cc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cc6:	3104      	adds	r1, #4

08001cc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ccc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cd0:	d3f6      	bcc.n	8001cc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001cd2:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cd4:	e002      	b.n	8001cdc <LoopFillZerobss>

08001cd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cd8:	f842 3b04 	str.w	r3, [r2], #4

08001cdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ce0:	d3f9      	bcc.n	8001cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ce2:	f7ff ff5f 	bl	8001ba4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f003 fa67 	bl	80051b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7ff fd99 	bl	8001820 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001cf4:	080056ac 	.word	0x080056ac
  ldr  r0, =_sdata
 8001cf8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cfc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001d00:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001d04:	200001c4 	.word	0x200001c4

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>

08001d0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d0e:	2003      	movs	r0, #3
 8001d10:	f001 fa8a 	bl	8003228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f000 f805 	bl	8001d24 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001d1a:	f7ff feeb 	bl	8001af4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x54>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_InitTick+0x58>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f001 faa5 	bl	8003292 <HAL_SYSTICK_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00e      	b.n	8001d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d80a      	bhi.n	8001d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f001 fa6d 	bl	800323e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d64:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <HAL_InitTick+0x5c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	20000004 	.word	0x20000004

08001d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x20>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x24>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_IncTick+0x24>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000008 	.word	0x20000008
 8001da8:	200001c0 	.word	0x200001c0

08001dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_GetTick+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200001c0 	.word	0x200001c0

08001dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff ffee 	bl	8001dac <HAL_GetTick>
 8001dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d005      	beq.n	8001dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_Delay+0x44>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dea:	bf00      	nop
 8001dec:	f7ff ffde 	bl	8001dac <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d8f7      	bhi.n	8001dec <HAL_Delay+0x28>
  {
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000008 	.word	0x20000008

08001e0c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8001e10:	4b02      	ldr	r3, [pc, #8]	; (8001e1c <HAL_GetHalVersion+0x10>)
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	01020900 	.word	0x01020900

08001e20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001e24:	4b03      	ldr	r3, [pc, #12]	; (8001e34 <HAL_GetREVID+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0c1b      	lsrs	r3, r3, #16
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e0042000 	.word	0xe0042000

08001e38 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_GetDEVID+0x18>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e0042000 	.word	0xe0042000

08001e54 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetUIDw0+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	1ff0f420 	.word	0x1ff0f420

08001e6c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_GetUIDw1+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	1ff0f424 	.word	0x1ff0f424

08001e84 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_GetUIDw2+0x14>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	1ff0f428 	.word	0x1ff0f428

08001e9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e031      	b.n	8001f16 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff f9b6 	bl	800122c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d116      	bne.n	8001f08 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_ADC_Init+0x84>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	f043 0202 	orr.w	r2, r3, #2
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f964 	bl	80021b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	641a      	str	r2, [r3, #64]	; 0x40
 8001f06:	e001      	b.n	8001f0c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	ffffeefd 	.word	0xffffeefd

08001f24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1c>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e12a      	b.n	8002196 <HAL_ADC_ConfigChannel+0x272>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	d93a      	bls.n	8001fc6 <HAL_ADC_ConfigChannel+0xa2>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f58:	d035      	beq.n	8001fc6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68d9      	ldr	r1, [r3, #12]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b1e      	subs	r3, #30
 8001f70:	2207      	movs	r2, #7
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a87      	ldr	r2, [pc, #540]	; (80021a4 <HAL_ADC_ConfigChannel+0x280>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d10a      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68d9      	ldr	r1, [r3, #12]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	061a      	lsls	r2, r3, #24
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f9e:	e035      	b.n	800200c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68d9      	ldr	r1, [r3, #12]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4403      	add	r3, r0
 8001fb8:	3b1e      	subs	r3, #30
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fc4:	e022      	b.n	800200c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6919      	ldr	r1, [r3, #16]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	2207      	movs	r2, #7
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6919      	ldr	r1, [r3, #16]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4403      	add	r3, r0
 8002002:	409a      	lsls	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b06      	cmp	r3, #6
 8002012:	d824      	bhi.n	800205e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b05      	subs	r3, #5
 8002026:	221f      	movs	r2, #31
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43da      	mvns	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	400a      	ands	r2, r1
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	4618      	mov	r0, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	3b05      	subs	r3, #5
 8002050:	fa00 f203 	lsl.w	r2, r0, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	635a      	str	r2, [r3, #52]	; 0x34
 800205c:	e04c      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d824      	bhi.n	80020b0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b23      	subs	r3, #35	; 0x23
 8002078:	221f      	movs	r2, #31
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	400a      	ands	r2, r1
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b23      	subs	r3, #35	; 0x23
 80020a2:	fa00 f203 	lsl.w	r2, r0, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
 80020ae:	e023      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b41      	subs	r3, #65	; 0x41
 80020c2:	221f      	movs	r2, #31
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43da      	mvns	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	400a      	ands	r2, r1
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3b41      	subs	r3, #65	; 0x41
 80020ec:	fa00 f203 	lsl.w	r2, r0, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <HAL_ADC_ConfigChannel+0x284>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1f4>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800210a:	d105      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_ADC_ConfigChannel+0x288>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <HAL_ADC_ConfigChannel+0x288>)
 8002112:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002116:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_ADC_ConfigChannel+0x284>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d109      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x212>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b12      	cmp	r3, #18
 8002128:	d105      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_ADC_ConfigChannel+0x288>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_ADC_ConfigChannel+0x288>)
 8002130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002134:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_ADC_ConfigChannel+0x284>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d125      	bne.n	800218c <HAL_ADC_ConfigChannel+0x268>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_ADC_ConfigChannel+0x280>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x22e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b11      	cmp	r3, #17
 8002150:	d11c      	bne.n	800218c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <HAL_ADC_ConfigChannel+0x288>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4a15      	ldr	r2, [pc, #84]	; (80021ac <HAL_ADC_ConfigChannel+0x288>)
 8002158:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800215c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_ADC_ConfigChannel+0x280>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d111      	bne.n	800218c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_ADC_ConfigChannel+0x28c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <HAL_ADC_ConfigChannel+0x290>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0c9a      	lsrs	r2, r3, #18
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800217e:	e002      	b.n	8002186 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3b01      	subs	r3, #1
 8002184:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f9      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	10000012 	.word	0x10000012
 80021a8:	40012000 	.word	0x40012000
 80021ac:	40012300 	.word	0x40012300
 80021b0:	20000000 	.word	0x20000000
 80021b4:	431bde83 	.word	0x431bde83

080021b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80021c0:	4b78      	ldr	r3, [pc, #480]	; (80023a4 <ADC_Init+0x1ec>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a77      	ldr	r2, [pc, #476]	; (80023a4 <ADC_Init+0x1ec>)
 80021c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021ca:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80021cc:	4b75      	ldr	r3, [pc, #468]	; (80023a4 <ADC_Init+0x1ec>)
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4973      	ldr	r1, [pc, #460]	; (80023a4 <ADC_Init+0x1ec>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800220c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <ADC_Init+0x1f0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e00f      	b.n	80022b2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0202 	bic.w	r2, r2, #2
 80022c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	005a      	lsls	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	3b01      	subs	r3, #1
 800230c:	035a      	lsls	r2, r3, #13
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	e007      	b.n	8002328 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	3b01      	subs	r3, #1
 8002344:	051a      	lsls	r2, r3, #20
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800235c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800236a:	025a      	lsls	r2, r3, #9
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	029a      	lsls	r2, r3, #10
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	0f000001 	.word	0x0f000001

080023ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0ed      	b.n	800259a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff f810 	bl	80013f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0202 	bic.w	r2, r2, #2
 80023de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e0:	f7ff fce4 	bl	8001dac <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023e6:	e012      	b.n	800240e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e8:	f7ff fce0 	bl	8001dac <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b0a      	cmp	r3, #10
 80023f4:	d90b      	bls.n	800240e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2205      	movs	r2, #5
 8002406:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0c5      	b.n	800259a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e5      	bne.n	80023e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800242c:	f7ff fcbe 	bl	8001dac <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002432:	e012      	b.n	800245a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002434:	f7ff fcba 	bl	8001dac <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b0a      	cmp	r3, #10
 8002440:	d90b      	bls.n	800245a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2205      	movs	r2, #5
 8002452:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e09f      	b.n	800259a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0e5      	beq.n	8002434 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7e1b      	ldrb	r3, [r3, #24]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d108      	bne.n	8002482 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e007      	b.n	8002492 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7e5b      	ldrb	r3, [r3, #25]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e007      	b.n	80024bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7e9b      	ldrb	r3, [r3, #26]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d108      	bne.n	80024d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0220 	orr.w	r2, r2, #32
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0220 	bic.w	r2, r2, #32
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7edb      	ldrb	r3, [r3, #27]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0210 	bic.w	r2, r2, #16
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e007      	b.n	8002510 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0210 	orr.w	r2, r2, #16
 800250e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7f1b      	ldrb	r3, [r3, #28]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d108      	bne.n	800252a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0208 	orr.w	r2, r2, #8
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e007      	b.n	800253a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0208 	bic.w	r2, r2, #8
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7f5b      	ldrb	r3, [r3, #29]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d108      	bne.n	8002554 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0204 	orr.w	r2, r2, #4
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e007      	b.n	8002564 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0204 	bic.w	r2, r2, #4
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	ea42 0103 	orr.w	r1, r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	1e5a      	subs	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d003      	beq.n	80025ca <HAL_CAN_ConfigFilter+0x26>
 80025c2:	7cfb      	ldrb	r3, [r7, #19]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	f040 80c7 	bne.w	8002758 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a69      	ldr	r2, [pc, #420]	; (8002774 <HAL_CAN_ConfigFilter+0x1d0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d001      	beq.n	80025d8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_CAN_ConfigFilter+0x1d4>)
 80025d6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4a63      	ldr	r2, [pc, #396]	; (8002778 <HAL_CAN_ConfigFilter+0x1d4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d111      	bne.n	8002614 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	431a      	orrs	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	2201      	movs	r2, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d123      	bne.n	8002686 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	43db      	mvns	r3, r3
 8002648:	401a      	ands	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002660:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3248      	adds	r2, #72	; 0x48
 8002666:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800267a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800267c:	6979      	ldr	r1, [r7, #20]
 800267e:	3348      	adds	r3, #72	; 0x48
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d122      	bne.n	80026d4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	431a      	orrs	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3248      	adds	r2, #72	; 0x48
 80026b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	3348      	adds	r3, #72	; 0x48
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	440b      	add	r3, r1
 80026d2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	401a      	ands	r2, r3
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80026ee:	e007      	b.n	8002700 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800271a:	e007      	b.n	800272c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	431a      	orrs	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d107      	bne.n	8002744 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	431a      	orrs	r2, r3
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800274a:	f023 0201 	bic.w	r2, r3, #1
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e006      	b.n	8002766 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40003400 	.word	0x40003400
 8002778:	40006400 	.word	0x40006400

0800277c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b01      	cmp	r3, #1
 800278e:	d12e      	bne.n	80027ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027a8:	f7ff fb00 	bl	8001dac <HAL_GetTick>
 80027ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027ae:	e012      	b.n	80027d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027b0:	f7ff fafc 	bl	8001dac <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b0a      	cmp	r3, #10
 80027bc:	d90b      	bls.n	80027d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2205      	movs	r2, #5
 80027ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e012      	b.n	80027fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e5      	bne.n	80027b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e006      	b.n	80027fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
  }
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
 8002810:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002818:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002822:	7ffb      	ldrb	r3, [r7, #31]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d003      	beq.n	8002830 <HAL_CAN_AddTxMessage+0x2c>
 8002828:	7ffb      	ldrb	r3, [r7, #31]
 800282a:	2b02      	cmp	r3, #2
 800282c:	f040 80b8 	bne.w	80029a0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 80a0 	beq.w	8002990 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	0e1b      	lsrs	r3, r3, #24
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d907      	bls.n	8002870 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e09e      	b.n	80029ae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002870:	2201      	movs	r2, #1
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	409a      	lsls	r2, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800288c:	68f9      	ldr	r1, [r7, #12]
 800288e:	6809      	ldr	r1, [r1, #0]
 8002890:	431a      	orrs	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3318      	adds	r3, #24
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	440b      	add	r3, r1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e00f      	b.n	80028be <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028ae:	68f9      	ldr	r1, [r7, #12]
 80028b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3318      	adds	r3, #24
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	440b      	add	r3, r1
 80028bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6819      	ldr	r1, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	3318      	adds	r3, #24
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	440b      	add	r3, r1
 80028ce:	3304      	adds	r3, #4
 80028d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	7d1b      	ldrb	r3, [r3, #20]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d111      	bne.n	80028fe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3318      	adds	r3, #24
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	4413      	add	r3, r2
 80028e6:	3304      	adds	r3, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	6811      	ldr	r1, [r2, #0]
 80028ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3318      	adds	r3, #24
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	440b      	add	r3, r1
 80028fa:	3304      	adds	r3, #4
 80028fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3307      	adds	r3, #7
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	061a      	lsls	r2, r3, #24
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3306      	adds	r3, #6
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	041b      	lsls	r3, r3, #16
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3305      	adds	r3, #5
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	4313      	orrs	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	3204      	adds	r2, #4
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	4610      	mov	r0, r2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	6811      	ldr	r1, [r2, #0]
 8002926:	ea43 0200 	orr.w	r2, r3, r0
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	440b      	add	r3, r1
 8002930:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002934:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3303      	adds	r3, #3
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	061a      	lsls	r2, r3, #24
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3302      	adds	r3, #2
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3301      	adds	r3, #1
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	4313      	orrs	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	4610      	mov	r0, r2
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	6811      	ldr	r1, [r2, #0]
 800295c:	ea43 0200 	orr.w	r2, r3, r0
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	440b      	add	r3, r1
 8002966:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800296a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3318      	adds	r3, #24
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	4413      	add	r3, r2
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	6811      	ldr	r1, [r2, #0]
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	3318      	adds	r3, #24
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	440b      	add	r3, r1
 800298a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e00e      	b.n	80029ae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e006      	b.n	80029ae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80029ba:	b480      	push	{r7}
 80029bc:	b087      	sub	sp, #28
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
 80029c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d003      	beq.n	80029de <HAL_CAN_GetRxMessage+0x24>
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	f040 80f3 	bne.w	8002bc4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10e      	bne.n	8002a02 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d116      	bne.n	8002a20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e0e7      	b.n	8002bd2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0d8      	b.n	8002bd2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	331b      	adds	r3, #27
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	4413      	add	r3, r2
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0204 	and.w	r2, r3, #4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	331b      	adds	r3, #27
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0d5b      	lsrs	r3, r3, #21
 8002a4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	e00b      	b.n	8002a70 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	331b      	adds	r3, #27
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	4413      	add	r3, r2
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	08db      	lsrs	r3, r3, #3
 8002a68:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	331b      	adds	r3, #27
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	4413      	add	r3, r2
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0202 	and.w	r2, r3, #2
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	331b      	adds	r3, #27
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 020f 	and.w	r2, r3, #15
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	331b      	adds	r3, #27
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3304      	adds	r3, #4
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	331b      	adds	r3, #27
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3304      	adds	r3, #4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	4413      	add	r3, r2
 8002aee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0a1a      	lsrs	r2, r3, #8
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	0c1a      	lsrs	r2, r3, #16
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	3302      	adds	r3, #2
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e1a      	lsrs	r2, r3, #24
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	3303      	adds	r3, #3
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	3304      	adds	r3, #4
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0a1a      	lsrs	r2, r3, #8
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	3305      	adds	r3, #5
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	0c1a      	lsrs	r2, r3, #16
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	3306      	adds	r3, #6
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	0e1a      	lsrs	r2, r3, #24
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	3307      	adds	r3, #7
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0220 	orr.w	r2, r2, #32
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	e007      	b.n	8002bc0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0220 	orr.w	r2, r2, #32
 8002bbe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e006      	b.n	8002bd2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d002      	beq.n	8002bfc <HAL_CAN_ActivateNotification+0x1e>
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d109      	bne.n	8002c10 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6959      	ldr	r1, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e006      	b.n	8002c1e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08a      	sub	sp, #40	; 0x28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d07c      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d023      	beq.n	8002cc2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f983 	bl	8002f98 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c92:	e016      	b.n	8002cc2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d004      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	e00c      	b.n	8002cc2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cba:	e002      	b.n	8002cc2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f989 	bl	8002fd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d024      	beq.n	8002d16 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f963 	bl	8002fac <HAL_CAN_TxMailbox1CompleteCallback>
 8002ce6:	e016      	b.n	8002d16 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	e00c      	b.n	8002d16 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	e002      	b.n	8002d16 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f969 	bl	8002fe8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d024      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f943 	bl	8002fc0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d3a:	e016      	b.n	8002d6a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	e00c      	b.n	8002d6a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	e002      	b.n	8002d6a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f949 	bl	8002ffc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2208      	movs	r2, #8
 8002da8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f930 	bl	8003010 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fe fe5d 	bl	8001a88 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00c      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2210      	movs	r2, #16
 8002df0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f912 	bl	8003038 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f8f9 	bl	8003024 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8fc 	bl	800304c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f8f5 	bl	8003060 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d07b      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d072      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d043      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d03e      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ef8:	2b60      	cmp	r3, #96	; 0x60
 8002efa:	d02b      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x32a>
 8002efc:	2b60      	cmp	r3, #96	; 0x60
 8002efe:	d82e      	bhi.n	8002f5e <HAL_CAN_IRQHandler+0x334>
 8002f00:	2b50      	cmp	r3, #80	; 0x50
 8002f02:	d022      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x320>
 8002f04:	2b50      	cmp	r3, #80	; 0x50
 8002f06:	d82a      	bhi.n	8002f5e <HAL_CAN_IRQHandler+0x334>
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d019      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x316>
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d826      	bhi.n	8002f5e <HAL_CAN_IRQHandler+0x334>
 8002f10:	2b30      	cmp	r3, #48	; 0x30
 8002f12:	d010      	beq.n	8002f36 <HAL_CAN_IRQHandler+0x30c>
 8002f14:	2b30      	cmp	r3, #48	; 0x30
 8002f16:	d822      	bhi.n	8002f5e <HAL_CAN_IRQHandler+0x334>
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d002      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x2f8>
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d005      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f20:	e01d      	b.n	8002f5e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f2a:	e019      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f043 0310 	orr.w	r3, r3, #16
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f34:	e014      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	f043 0320 	orr.w	r3, r3, #32
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f3e:	e00f      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f48:	e00a      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f52:	e005      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f5c:	e000      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f5e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f6e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2204      	movs	r2, #4
 8002f76:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f872 	bl	8003074 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f90:	bf00      	nop
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <__NVIC_SetPriorityGrouping+0x40>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a4:	4013      	ands	r3, r2
 80030a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b6:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <__NVIC_SetPriorityGrouping+0x40>)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	60d3      	str	r3, [r2, #12]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00
 80030cc:	05fa0000 	.word	0x05fa0000

080030d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <__NVIC_GetPriorityGrouping+0x18>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	f003 0307 	and.w	r3, r3, #7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	db0b      	blt.n	8003116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4907      	ldr	r1, [pc, #28]	; (8003124 <__NVIC_EnableIRQ+0x38>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	2001      	movs	r0, #1
 800310e:	fa00 f202 	lsl.w	r2, r0, r2
 8003112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000e100 	.word	0xe000e100

08003128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db0a      	blt.n	8003152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	b2da      	uxtb	r2, r3
 8003140:	490c      	ldr	r1, [pc, #48]	; (8003174 <__NVIC_SetPriority+0x4c>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	0112      	lsls	r2, r2, #4
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	440b      	add	r3, r1
 800314c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003150:	e00a      	b.n	8003168 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	b2da      	uxtb	r2, r3
 8003156:	4908      	ldr	r1, [pc, #32]	; (8003178 <__NVIC_SetPriority+0x50>)
 8003158:	79fb      	ldrb	r3, [r7, #7]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	3b04      	subs	r3, #4
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	440b      	add	r3, r1
 8003166:	761a      	strb	r2, [r3, #24]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317c:	b480      	push	{r7}
 800317e:	b089      	sub	sp, #36	; 0x24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f1c3 0307 	rsb	r3, r3, #7
 8003196:	2b04      	cmp	r3, #4
 8003198:	bf28      	it	cs
 800319a:	2304      	movcs	r3, #4
 800319c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d902      	bls.n	80031ac <NVIC_EncodePriority+0x30>
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3b03      	subs	r3, #3
 80031aa:	e000      	b.n	80031ae <NVIC_EncodePriority+0x32>
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	f04f 32ff 	mov.w	r2, #4294967295
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	401a      	ands	r2, r3
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c4:	f04f 31ff 	mov.w	r1, #4294967295
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa01 f303 	lsl.w	r3, r1, r3
 80031ce:	43d9      	mvns	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d4:	4313      	orrs	r3, r2
         );
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
	...

080031e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f4:	d301      	bcc.n	80031fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00f      	b.n	800321a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <SysTick_Config+0x40>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003202:	210f      	movs	r1, #15
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	f7ff ff8e 	bl	8003128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <SysTick_Config+0x40>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <SysTick_Config+0x40>)
 8003214:	2207      	movs	r2, #7
 8003216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000e010 	.word	0xe000e010

08003228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7ff ff29 	bl	8003088 <__NVIC_SetPriorityGrouping>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	4603      	mov	r3, r0
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003250:	f7ff ff3e 	bl	80030d0 <__NVIC_GetPriorityGrouping>
 8003254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	6978      	ldr	r0, [r7, #20]
 800325c:	f7ff ff8e 	bl	800317c <NVIC_EncodePriority>
 8003260:	4602      	mov	r2, r0
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff5d 	bl	8003128 <__NVIC_SetPriority>
}
 800326e:	bf00      	nop
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	4603      	mov	r3, r0
 800327e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff ff31 	bl	80030ec <__NVIC_EnableIRQ>
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffa2 	bl	80031e4 <SysTick_Config>
 80032a0:	4603      	mov	r3, r0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	e175      	b.n	80035b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80032cc:	2201      	movs	r2, #1
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	f040 8164 	bne.w	80035b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d00b      	beq.n	800330a <HAL_GPIO_Init+0x5e>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032fe:	2b11      	cmp	r3, #17
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b12      	cmp	r3, #18
 8003308:	d130      	bne.n	800336c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003340:	2201      	movs	r2, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 0201 	and.w	r2, r3, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2203      	movs	r2, #3
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x100>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b12      	cmp	r3, #18
 80033aa:	d123      	bne.n	80033f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	08da      	lsrs	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3208      	adds	r2, #8
 80033b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	220f      	movs	r2, #15
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	08da      	lsrs	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	3208      	adds	r2, #8
 80033ee:	69b9      	ldr	r1, [r7, #24]
 80033f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0203 	and.w	r2, r3, #3
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80be 	beq.w	80035b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003436:	4b66      	ldr	r3, [pc, #408]	; (80035d0 <HAL_GPIO_Init+0x324>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	4a65      	ldr	r2, [pc, #404]	; (80035d0 <HAL_GPIO_Init+0x324>)
 800343c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003440:	6453      	str	r3, [r2, #68]	; 0x44
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_GPIO_Init+0x324>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800344e:	4a61      	ldr	r2, [pc, #388]	; (80035d4 <HAL_GPIO_Init+0x328>)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	3302      	adds	r3, #2
 8003456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	220f      	movs	r2, #15
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_GPIO_Init+0x32c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d037      	beq.n	80034ea <HAL_GPIO_Init+0x23e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a57      	ldr	r2, [pc, #348]	; (80035dc <HAL_GPIO_Init+0x330>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d031      	beq.n	80034e6 <HAL_GPIO_Init+0x23a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a56      	ldr	r2, [pc, #344]	; (80035e0 <HAL_GPIO_Init+0x334>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02b      	beq.n	80034e2 <HAL_GPIO_Init+0x236>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a55      	ldr	r2, [pc, #340]	; (80035e4 <HAL_GPIO_Init+0x338>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d025      	beq.n	80034de <HAL_GPIO_Init+0x232>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a54      	ldr	r2, [pc, #336]	; (80035e8 <HAL_GPIO_Init+0x33c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01f      	beq.n	80034da <HAL_GPIO_Init+0x22e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a53      	ldr	r2, [pc, #332]	; (80035ec <HAL_GPIO_Init+0x340>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d019      	beq.n	80034d6 <HAL_GPIO_Init+0x22a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a52      	ldr	r2, [pc, #328]	; (80035f0 <HAL_GPIO_Init+0x344>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d013      	beq.n	80034d2 <HAL_GPIO_Init+0x226>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a51      	ldr	r2, [pc, #324]	; (80035f4 <HAL_GPIO_Init+0x348>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00d      	beq.n	80034ce <HAL_GPIO_Init+0x222>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a50      	ldr	r2, [pc, #320]	; (80035f8 <HAL_GPIO_Init+0x34c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <HAL_GPIO_Init+0x21e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4f      	ldr	r2, [pc, #316]	; (80035fc <HAL_GPIO_Init+0x350>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_GPIO_Init+0x21a>
 80034c2:	2309      	movs	r3, #9
 80034c4:	e012      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034c6:	230a      	movs	r3, #10
 80034c8:	e010      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034ca:	2308      	movs	r3, #8
 80034cc:	e00e      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034ce:	2307      	movs	r3, #7
 80034d0:	e00c      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034d2:	2306      	movs	r3, #6
 80034d4:	e00a      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034d6:	2305      	movs	r3, #5
 80034d8:	e008      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034da:	2304      	movs	r3, #4
 80034dc:	e006      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034de:	2303      	movs	r3, #3
 80034e0:	e004      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e002      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_GPIO_Init+0x240>
 80034ea:	2300      	movs	r3, #0
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	f002 0203 	and.w	r2, r2, #3
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	4093      	lsls	r3, r2
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80034fc:	4935      	ldr	r1, [pc, #212]	; (80035d4 <HAL_GPIO_Init+0x328>)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800350a:	4b3d      	ldr	r3, [pc, #244]	; (8003600 <HAL_GPIO_Init+0x354>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800352e:	4a34      	ldr	r2, [pc, #208]	; (8003600 <HAL_GPIO_Init+0x354>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003534:	4b32      	ldr	r3, [pc, #200]	; (8003600 <HAL_GPIO_Init+0x354>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003558:	4a29      	ldr	r2, [pc, #164]	; (8003600 <HAL_GPIO_Init+0x354>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800355e:	4b28      	ldr	r3, [pc, #160]	; (8003600 <HAL_GPIO_Init+0x354>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003582:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <HAL_GPIO_Init+0x354>)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003588:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <HAL_GPIO_Init+0x354>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <HAL_GPIO_Init+0x354>)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3301      	adds	r3, #1
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b0f      	cmp	r3, #15
 80035bc:	f67f ae86 	bls.w	80032cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3724      	adds	r7, #36	; 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40013800 	.word	0x40013800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020400 	.word	0x40020400
 80035e0:	40020800 	.word	0x40020800
 80035e4:	40020c00 	.word	0x40020c00
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40021400 	.word	0x40021400
 80035f0:	40021800 	.word	0x40021800
 80035f4:	40021c00 	.word	0x40021c00
 80035f8:	40022000 	.word	0x40022000
 80035fc:	40022400 	.word	0x40022400
 8003600:	40013c00 	.word	0x40013c00

08003604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e001      	b.n	8003626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003644:	787b      	ldrb	r3, [r7, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003650:	e003      	b.n	800365a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	041a      	lsls	r2, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	619a      	str	r2, [r3, #24]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	4b23      	ldr	r3, [pc, #140]	; (8003700 <HAL_PWREx_EnableOverDrive+0x98>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a22      	ldr	r2, [pc, #136]	; (8003700 <HAL_PWREx_EnableOverDrive+0x98>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
 800367e:	4b20      	ldr	r3, [pc, #128]	; (8003700 <HAL_PWREx_EnableOverDrive+0x98>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_PWREx_EnableOverDrive+0x9c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003696:	f7fe fb89 	bl	8001dac <HAL_GetTick>
 800369a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800369c:	e009      	b.n	80036b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800369e:	f7fe fb85 	bl	8001dac <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ac:	d901      	bls.n	80036b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e022      	b.n	80036f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80036b2:	4b14      	ldr	r3, [pc, #80]	; (8003704 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036be:	d1ee      	bne.n	800369e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036cc:	f7fe fb6e 	bl	8001dac <HAL_GetTick>
 80036d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036d2:	e009      	b.n	80036e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036d4:	f7fe fb6a 	bl	8001dac <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036e2:	d901      	bls.n	80036e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e007      	b.n	80036f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036e8:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f4:	d1ee      	bne.n	80036d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	40007000 	.word	0x40007000

08003708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003710:	2300      	movs	r3, #0
 8003712:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e29b      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8087 	beq.w	800383a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800372c:	4b96      	ldr	r3, [pc, #600]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b04      	cmp	r3, #4
 8003736:	d00c      	beq.n	8003752 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003738:	4b93      	ldr	r3, [pc, #588]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d112      	bne.n	800376a <HAL_RCC_OscConfig+0x62>
 8003744:	4b90      	ldr	r3, [pc, #576]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003750:	d10b      	bne.n	800376a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003752:	4b8d      	ldr	r3, [pc, #564]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d06c      	beq.n	8003838 <HAL_RCC_OscConfig+0x130>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d168      	bne.n	8003838 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e275      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x7a>
 8003774:	4b84      	ldr	r3, [pc, #528]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a83      	ldr	r2, [pc, #524]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 800377a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e02e      	b.n	80037e0 <HAL_RCC_OscConfig+0xd8>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x9c>
 800378a:	4b7f      	ldr	r3, [pc, #508]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a7e      	ldr	r2, [pc, #504]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b7c      	ldr	r3, [pc, #496]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a7b      	ldr	r2, [pc, #492]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 800379c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e01d      	b.n	80037e0 <HAL_RCC_OscConfig+0xd8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037ac:	d10c      	bne.n	80037c8 <HAL_RCC_OscConfig+0xc0>
 80037ae:	4b76      	ldr	r3, [pc, #472]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a75      	ldr	r2, [pc, #468]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80037b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b73      	ldr	r3, [pc, #460]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a72      	ldr	r2, [pc, #456]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e00b      	b.n	80037e0 <HAL_RCC_OscConfig+0xd8>
 80037c8:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a6e      	ldr	r2, [pc, #440]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80037ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	4b6c      	ldr	r3, [pc, #432]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a6b      	ldr	r2, [pc, #428]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80037da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d013      	beq.n	8003810 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7fe fae0 	bl	8001dac <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f0:	f7fe fadc 	bl	8001dac <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b64      	cmp	r3, #100	; 0x64
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e229      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003802:	4b61      	ldr	r3, [pc, #388]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0xe8>
 800380e:	e014      	b.n	800383a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe facc 	bl	8001dac <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003818:	f7fe fac8 	bl	8001dac <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b64      	cmp	r3, #100	; 0x64
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e215      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382a:	4b57      	ldr	r3, [pc, #348]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x110>
 8003836:	e000      	b.n	800383a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d069      	beq.n	800391a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003846:	4b50      	ldr	r3, [pc, #320]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 030c 	and.w	r3, r3, #12
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003852:	4b4d      	ldr	r3, [pc, #308]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b08      	cmp	r3, #8
 800385c:	d11c      	bne.n	8003898 <HAL_RCC_OscConfig+0x190>
 800385e:	4b4a      	ldr	r3, [pc, #296]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d116      	bne.n	8003898 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_RCC_OscConfig+0x17a>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d001      	beq.n	8003882 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e1e9      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003882:	4b41      	ldr	r3, [pc, #260]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	493d      	ldr	r1, [pc, #244]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003896:	e040      	b.n	800391a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d023      	beq.n	80038e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a38      	ldr	r2, [pc, #224]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ac:	f7fe fa7e 	bl	8001dac <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b4:	f7fe fa7a 	bl	8001dac <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e1c7      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0f0      	beq.n	80038b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b2d      	ldr	r3, [pc, #180]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4929      	ldr	r1, [pc, #164]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
 80038e6:	e018      	b.n	800391a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e8:	4b27      	ldr	r3, [pc, #156]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a26      	ldr	r2, [pc, #152]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fe fa5a 	bl	8001dac <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fc:	f7fe fa56 	bl	8001dac <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e1a3      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d038      	beq.n	8003998 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d019      	beq.n	8003962 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003932:	4a15      	ldr	r2, [pc, #84]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fe fa37 	bl	8001dac <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003942:	f7fe fa33 	bl	8001dac <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e180      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x23a>
 8003960:	e01a      	b.n	8003998 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	4a08      	ldr	r2, [pc, #32]	; (8003988 <HAL_RCC_OscConfig+0x280>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fe fa1d 	bl	8001dac <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003976:	f7fe fa19 	bl	8001dac <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d903      	bls.n	800398c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e166      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
 8003988:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800398c:	4b92      	ldr	r3, [pc, #584]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 800398e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ee      	bne.n	8003976 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 80a4 	beq.w	8003aee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b8c      	ldr	r3, [pc, #560]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10d      	bne.n	80039ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	4b89      	ldr	r3, [pc, #548]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a88      	ldr	r2, [pc, #544]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b86      	ldr	r3, [pc, #536]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ce:	4b83      	ldr	r3, [pc, #524]	; (8003bdc <HAL_RCC_OscConfig+0x4d4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039da:	4b80      	ldr	r3, [pc, #512]	; (8003bdc <HAL_RCC_OscConfig+0x4d4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7f      	ldr	r2, [pc, #508]	; (8003bdc <HAL_RCC_OscConfig+0x4d4>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e6:	f7fe f9e1 	bl	8001dac <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fe f9dd 	bl	8001dac <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b64      	cmp	r3, #100	; 0x64
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e12a      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a00:	4b76      	ldr	r3, [pc, #472]	; (8003bdc <HAL_RCC_OscConfig+0x4d4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x31a>
 8003a14:	4b70      	ldr	r3, [pc, #448]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a6f      	ldr	r2, [pc, #444]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	e02d      	b.n	8003a7e <HAL_RCC_OscConfig+0x376>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x33c>
 8003a2a:	4b6b      	ldr	r3, [pc, #428]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a6a      	ldr	r2, [pc, #424]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	4b68      	ldr	r3, [pc, #416]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a67      	ldr	r2, [pc, #412]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	e01c      	b.n	8003a7e <HAL_RCC_OscConfig+0x376>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b05      	cmp	r3, #5
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCC_OscConfig+0x35e>
 8003a4c:	4b62      	ldr	r3, [pc, #392]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	4a61      	ldr	r2, [pc, #388]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a52:	f043 0304 	orr.w	r3, r3, #4
 8003a56:	6713      	str	r3, [r2, #112]	; 0x70
 8003a58:	4b5f      	ldr	r3, [pc, #380]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5c:	4a5e      	ldr	r2, [pc, #376]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6713      	str	r3, [r2, #112]	; 0x70
 8003a64:	e00b      	b.n	8003a7e <HAL_RCC_OscConfig+0x376>
 8003a66:	4b5c      	ldr	r3, [pc, #368]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	4a5b      	ldr	r2, [pc, #364]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a6c:	f023 0301 	bic.w	r3, r3, #1
 8003a70:	6713      	str	r3, [r2, #112]	; 0x70
 8003a72:	4b59      	ldr	r3, [pc, #356]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	f023 0304 	bic.w	r3, r3, #4
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d015      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a86:	f7fe f991 	bl	8001dac <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a8c:	e00a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fe f98d 	bl	8001dac <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e0d8      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	4b4c      	ldr	r3, [pc, #304]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ee      	beq.n	8003a8e <HAL_RCC_OscConfig+0x386>
 8003ab0:	e014      	b.n	8003adc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fe f97b 	bl	8001dac <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab8:	e00a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aba:	f7fe f977 	bl	8001dac <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e0c2      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad0:	4b41      	ldr	r3, [pc, #260]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1ee      	bne.n	8003aba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d105      	bne.n	8003aee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a3c      	ldr	r2, [pc, #240]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80ae 	beq.w	8003c54 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af8:	4b37      	ldr	r3, [pc, #220]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d06d      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d14b      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0c:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a31      	ldr	r2, [pc, #196]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe f948 	bl	8001dac <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fe f944 	bl	8001dac <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e091      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b29      	ldr	r3, [pc, #164]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69da      	ldr	r2, [r3, #28]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	019b      	lsls	r3, r3, #6
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	3b01      	subs	r3, #1
 8003b58:	041b      	lsls	r3, r3, #16
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	061b      	lsls	r3, r3, #24
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	491b      	ldr	r1, [pc, #108]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe f916 	bl	8001dac <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fe f912 	bl	8001dac <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e05f      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x47c>
 8003ba2:	e057      	b.n	8003c54 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0b      	ldr	r2, [pc, #44]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fe f8fc 	bl	8001dac <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fe f8f8 	bl	8001dac <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e045      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_OscConfig+0x4d0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x4b0>
 8003bd6:	e03d      	b.n	8003c54 <HAL_RCC_OscConfig+0x54c>
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003be0:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_RCC_OscConfig+0x558>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d030      	beq.n	8003c50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d129      	bne.n	8003c50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d122      	bne.n	8003c50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d119      	bne.n	8003c50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d10f      	bne.n	8003c50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d107      	bne.n	8003c50 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800

08003c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0d0      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b6a      	ldr	r3, [pc, #424]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d910      	bls.n	8003cac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b67      	ldr	r3, [pc, #412]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 020f 	bic.w	r2, r3, #15
 8003c92:	4965      	ldr	r1, [pc, #404]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b63      	ldr	r3, [pc, #396]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0b8      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d020      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc4:	4b59      	ldr	r3, [pc, #356]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	4a58      	ldr	r2, [pc, #352]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a52      	ldr	r2, [pc, #328]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ce6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce8:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	494d      	ldr	r1, [pc, #308]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d040      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d115      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e07f      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e073      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d36:	4b3d      	ldr	r3, [pc, #244]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06b      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b39      	ldr	r3, [pc, #228]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4936      	ldr	r1, [pc, #216]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d58:	f7fe f828 	bl	8001dac <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe f824 	bl	8001dac <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e053      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b2d      	ldr	r3, [pc, #180]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d210      	bcs.n	8003db8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f023 020f 	bic.w	r2, r3, #15
 8003d9e:	4922      	ldr	r1, [pc, #136]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e032      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4916      	ldr	r1, [pc, #88]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	490e      	ldr	r1, [pc, #56]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003df6:	f000 f821 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	091b      	lsrs	r3, r3, #4
 8003e02:	f003 030f 	and.w	r3, r3, #15
 8003e06:	490a      	ldr	r1, [pc, #40]	; (8003e30 <HAL_RCC_ClockConfig+0x1cc>)
 8003e08:	5ccb      	ldrb	r3, [r1, r3]
 8003e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <HAL_RCC_ClockConfig+0x1d0>)
 8003e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1d4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd ff84 	bl	8001d24 <HAL_InitTick>

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023c00 	.word	0x40023c00
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	0800565c 	.word	0x0800565c
 8003e34:	20000000 	.word	0x20000000
 8003e38:	20000004 	.word	0x20000004

08003e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e3c:	b5b0      	push	{r4, r5, r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003e42:	2100      	movs	r1, #0
 8003e44:	6079      	str	r1, [r7, #4]
 8003e46:	2100      	movs	r1, #0
 8003e48:	60f9      	str	r1, [r7, #12]
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003e4e:	2100      	movs	r1, #0
 8003e50:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e52:	4952      	ldr	r1, [pc, #328]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e54:	6889      	ldr	r1, [r1, #8]
 8003e56:	f001 010c 	and.w	r1, r1, #12
 8003e5a:	2908      	cmp	r1, #8
 8003e5c:	d00d      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x3e>
 8003e5e:	2908      	cmp	r1, #8
 8003e60:	f200 8094 	bhi.w	8003f8c <HAL_RCC_GetSysClockFreq+0x150>
 8003e64:	2900      	cmp	r1, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_RCC_GetSysClockFreq+0x32>
 8003e68:	2904      	cmp	r1, #4
 8003e6a:	d003      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x38>
 8003e6c:	e08e      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e6e:	4b4c      	ldr	r3, [pc, #304]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e70:	60bb      	str	r3, [r7, #8]
      break;
 8003e72:	e08e      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e74:	4b4b      	ldr	r3, [pc, #300]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e76:	60bb      	str	r3, [r7, #8]
      break;
 8003e78:	e08b      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e7a:	4948      	ldr	r1, [pc, #288]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e7c:	6849      	ldr	r1, [r1, #4]
 8003e7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e82:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e84:	4945      	ldr	r1, [pc, #276]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e86:	6849      	ldr	r1, [r1, #4]
 8003e88:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e8c:	2900      	cmp	r1, #0
 8003e8e:	d024      	beq.n	8003eda <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e90:	4942      	ldr	r1, [pc, #264]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e92:	6849      	ldr	r1, [r1, #4]
 8003e94:	0989      	lsrs	r1, r1, #6
 8003e96:	4608      	mov	r0, r1
 8003e98:	f04f 0100 	mov.w	r1, #0
 8003e9c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ea0:	f04f 0500 	mov.w	r5, #0
 8003ea4:	ea00 0204 	and.w	r2, r0, r4
 8003ea8:	ea01 0305 	and.w	r3, r1, r5
 8003eac:	493d      	ldr	r1, [pc, #244]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003eae:	fb01 f003 	mul.w	r0, r1, r3
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	fb01 f102 	mul.w	r1, r1, r2
 8003eb8:	1844      	adds	r4, r0, r1
 8003eba:	493a      	ldr	r1, [pc, #232]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ebc:	fba2 0101 	umull	r0, r1, r2, r1
 8003ec0:	1863      	adds	r3, r4, r1
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	f7fc f9bc 	bl	8000248 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e04a      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	ea02 0400 	and.w	r4, r2, r0
 8003ef2:	ea03 0501 	and.w	r5, r3, r1
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	014b      	lsls	r3, r1, #5
 8003f04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f08:	0142      	lsls	r2, r0, #5
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	1b00      	subs	r0, r0, r4
 8003f10:	eb61 0105 	sbc.w	r1, r1, r5
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	018b      	lsls	r3, r1, #6
 8003f1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f22:	0182      	lsls	r2, r0, #6
 8003f24:	1a12      	subs	r2, r2, r0
 8003f26:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2a:	f04f 0000 	mov.w	r0, #0
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	00d9      	lsls	r1, r3, #3
 8003f34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f38:	00d0      	lsls	r0, r2, #3
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	1912      	adds	r2, r2, r4
 8003f40:	eb45 0303 	adc.w	r3, r5, r3
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f04f 0100 	mov.w	r1, #0
 8003f4c:	0299      	lsls	r1, r3, #10
 8003f4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f52:	0290      	lsls	r0, r2, #10
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	f7fc f970 	bl	8000248 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x160>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	60bb      	str	r3, [r7, #8]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f8e:	60bb      	str	r3, [r7, #8]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	68bb      	ldr	r3, [r7, #8]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	017d7840 	.word	0x017d7840

08003fa8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000000 	.word	0x20000000

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fc4:	f7ff fff0 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	0800566c 	.word	0x0800566c

08003fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fec:	f7ff ffdc 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0b5b      	lsrs	r3, r3, #13
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	0800566c 	.word	0x0800566c

08004010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d012      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004038:	4b69      	ldr	r3, [pc, #420]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	4a68      	ldr	r2, [pc, #416]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004042:	6093      	str	r3, [r2, #8]
 8004044:	4b66      	ldr	r3, [pc, #408]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	4964      	ldr	r1, [pc, #400]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800405a:	2301      	movs	r3, #1
 800405c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d017      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800406a:	4b5d      	ldr	r3, [pc, #372]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800406c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004070:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004078:	4959      	ldr	r1, [pc, #356]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004088:	d101      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800408a:	2301      	movs	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004096:	2301      	movs	r3, #1
 8004098:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d017      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040a6:	4b4e      	ldr	r3, [pc, #312]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	494a      	ldr	r1, [pc, #296]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c4:	d101      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80040d2:	2301      	movs	r3, #1
 80040d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80040e2:	2301      	movs	r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 808b 	beq.w	800420a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040f4:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	4a39      	ldr	r2, [pc, #228]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004100:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a34      	ldr	r2, [pc, #208]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004118:	f7fd fe48 	bl	8001dac <HAL_GetTick>
 800411c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004120:	f7fd fe44 	bl	8001dac <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b64      	cmp	r3, #100	; 0x64
 800412c:	d901      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e38f      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004132:	4b2c      	ldr	r3, [pc, #176]	; (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800413e:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004146:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d035      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	429a      	cmp	r2, r3
 800415a:	d02e      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800415c:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004164:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004166:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004172:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004176:	4a1a      	ldr	r2, [pc, #104]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800417e:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004184:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d114      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004190:	f7fd fe0c 	bl	8001dac <HAL_GetTick>
 8004194:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004196:	e00a      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fd fe08 	bl	8001dac <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e351      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0ee      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c6:	d111      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041d4:	4b04      	ldr	r3, [pc, #16]	; (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041d6:	400b      	ands	r3, r1
 80041d8:	4901      	ldr	r1, [pc, #4]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
 80041de:	e00b      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40007000 	.word	0x40007000
 80041e8:	0ffffcff 	.word	0x0ffffcff
 80041ec:	4bb3      	ldr	r3, [pc, #716]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4ab2      	ldr	r2, [pc, #712]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041f6:	6093      	str	r3, [r2, #8]
 80041f8:	4bb0      	ldr	r3, [pc, #704]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004204:	49ad      	ldr	r1, [pc, #692]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004206:	4313      	orrs	r3, r2
 8004208:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	d010      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004216:	4ba9      	ldr	r3, [pc, #676]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800421c:	4aa7      	ldr	r2, [pc, #668]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800421e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004222:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004226:	4ba5      	ldr	r3, [pc, #660]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004228:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	49a2      	ldr	r1, [pc, #648]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004244:	4b9d      	ldr	r3, [pc, #628]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004252:	499a      	ldr	r1, [pc, #616]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004266:	4b95      	ldr	r3, [pc, #596]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004274:	4991      	ldr	r1, [pc, #580]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004288:	4b8c      	ldr	r3, [pc, #560]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004296:	4989      	ldr	r1, [pc, #548]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042aa:	4b84      	ldr	r3, [pc, #528]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b8:	4980      	ldr	r1, [pc, #512]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042cc:	4b7b      	ldr	r3, [pc, #492]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	f023 0203 	bic.w	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	4978      	ldr	r1, [pc, #480]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042ee:	4b73      	ldr	r3, [pc, #460]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f4:	f023 020c 	bic.w	r2, r3, #12
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fc:	496f      	ldr	r1, [pc, #444]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004310:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431e:	4967      	ldr	r1, [pc, #412]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004332:	4b62      	ldr	r3, [pc, #392]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004338:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004340:	495e      	ldr	r1, [pc, #376]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004354:	4b59      	ldr	r3, [pc, #356]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	4956      	ldr	r1, [pc, #344]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00a      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004376:	4b51      	ldr	r3, [pc, #324]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004384:	494d      	ldr	r1, [pc, #308]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004398:	4b48      	ldr	r3, [pc, #288]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	4945      	ldr	r1, [pc, #276]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80043ba:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c8:	493c      	ldr	r1, [pc, #240]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043dc:	4b37      	ldr	r3, [pc, #220]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ea:	4934      	ldr	r1, [pc, #208]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d011      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80043fe:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800440c:	492b      	ldr	r1, [pc, #172]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800441c:	d101      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800441e:	2301      	movs	r3, #1
 8004420:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800442e:	2301      	movs	r3, #1
 8004430:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800443e:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444c:	491b      	ldr	r1, [pc, #108]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00b      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004460:	4b16      	ldr	r3, [pc, #88]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004470:	4912      	ldr	r1, [pc, #72]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004484:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004494:	4909      	ldr	r1, [pc, #36]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004496:	4313      	orrs	r3, r2
 8004498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00f      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044a8:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	e002      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800
 80044c0:	4986      	ldr	r1, [pc, #536]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00b      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044d4:	4b81      	ldr	r3, [pc, #516]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044e4:	497d      	ldr	r1, [pc, #500]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d006      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80d6 	beq.w	80046ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004500:	4b76      	ldr	r3, [pc, #472]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a75      	ldr	r2, [pc, #468]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004506:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fd fc4e 	bl	8001dac <HAL_GetTick>
 8004510:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004514:	f7fd fc4a 	bl	8001dac <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e195      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004526:	4b6d      	ldr	r3, [pc, #436]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d021      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	2b00      	cmp	r3, #0
 8004544:	d11d      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004546:	4b65      	ldr	r3, [pc, #404]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004554:	4b61      	ldr	r3, [pc, #388]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455a:	0e1b      	lsrs	r3, r3, #24
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	019a      	lsls	r2, r3, #6
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	041b      	lsls	r3, r3, #16
 800456c:	431a      	orrs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	071b      	lsls	r3, r3, #28
 800457a:	4958      	ldr	r1, [pc, #352]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d02e      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045ac:	d129      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045ae:	4b4b      	ldr	r3, [pc, #300]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045bc:	4b47      	ldr	r3, [pc, #284]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c2:	0f1b      	lsrs	r3, r3, #28
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	019a      	lsls	r2, r3, #6
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	041b      	lsls	r3, r3, #16
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	431a      	orrs	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	071b      	lsls	r3, r3, #28
 80045e2:	493e      	ldr	r1, [pc, #248]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045ea:	4b3c      	ldr	r3, [pc, #240]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f0:	f023 021f 	bic.w	r2, r3, #31
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	3b01      	subs	r3, #1
 80045fa:	4938      	ldr	r1, [pc, #224]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01d      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800460e:	4b33      	ldr	r3, [pc, #204]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004614:	0e1b      	lsrs	r3, r3, #24
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800461c:	4b2f      	ldr	r3, [pc, #188]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800461e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004622:	0f1b      	lsrs	r3, r3, #28
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	019a      	lsls	r2, r3, #6
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	431a      	orrs	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	061b      	lsls	r3, r3, #24
 800463c:	431a      	orrs	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	071b      	lsls	r3, r3, #28
 8004642:	4926      	ldr	r1, [pc, #152]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d011      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	019a      	lsls	r2, r3, #6
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	071b      	lsls	r3, r3, #28
 8004672:	491a      	ldr	r1, [pc, #104]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800467a:	4b18      	ldr	r3, [pc, #96]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a17      	ldr	r2, [pc, #92]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004680:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004686:	f7fd fb91 	bl	8001dac <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fd fb8d 	bl	8001dac <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b64      	cmp	r3, #100	; 0x64
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e0d8      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f040 80ce 	bne.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046b4:	4b09      	ldr	r3, [pc, #36]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a08      	ldr	r2, [pc, #32]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c0:	f7fd fb74 	bl	8001dac <HAL_GetTick>
 80046c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046c6:	e00b      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046c8:	f7fd fb70 	bl	8001dac <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	; 0x64
 80046d4:	d904      	bls.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0bb      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046e0:	4b5e      	ldr	r3, [pc, #376]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ec:	d0ec      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800470a:	2b00      	cmp	r3, #0
 800470c:	d02e      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d12a      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004716:	4b51      	ldr	r3, [pc, #324]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	0c1b      	lsrs	r3, r3, #16
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004724:	4b4d      	ldr	r3, [pc, #308]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	0f1b      	lsrs	r3, r3, #28
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	019a      	lsls	r2, r3, #6
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	061b      	lsls	r3, r3, #24
 8004744:	431a      	orrs	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	071b      	lsls	r3, r3, #28
 800474a:	4944      	ldr	r1, [pc, #272]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004752:	4b42      	ldr	r3, [pc, #264]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004758:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	3b01      	subs	r3, #1
 8004762:	021b      	lsls	r3, r3, #8
 8004764:	493d      	ldr	r1, [pc, #244]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d022      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004780:	d11d      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004782:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	0e1b      	lsrs	r3, r3, #24
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004790:	4b32      	ldr	r3, [pc, #200]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	0f1b      	lsrs	r3, r3, #28
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	019a      	lsls	r2, r3, #6
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	041b      	lsls	r3, r3, #16
 80047aa:	431a      	orrs	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	071b      	lsls	r3, r3, #28
 80047b6:	4929      	ldr	r1, [pc, #164]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0308 	and.w	r3, r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d028      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047ca:	4b24      	ldr	r3, [pc, #144]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d0:	0e1b      	lsrs	r3, r3, #24
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80047d8:	4b20      	ldr	r3, [pc, #128]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047de:	0c1b      	lsrs	r3, r3, #16
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	019a      	lsls	r2, r3, #6
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	431a      	orrs	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	071b      	lsls	r3, r3, #28
 80047fe:	4917      	ldr	r1, [pc, #92]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800480c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4911      	ldr	r1, [pc, #68]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800481c:	4b0f      	ldr	r3, [pc, #60]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0e      	ldr	r2, [pc, #56]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004828:	f7fd fac0 	bl	8001dac <HAL_GetTick>
 800482c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004830:	f7fd fabc 	bl	8001dac <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b64      	cmp	r3, #100	; 0x64
 800483c:	d901      	bls.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e007      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800484a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484e:	d1ef      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40023800 	.word	0x40023800

08004860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e040      	b.n	80048f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fd f9d4 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2224      	movs	r2, #36	; 0x24
 800488c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8c0 	bl	8004a24 <UART_SetConfig>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d101      	bne.n	80048ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e022      	b.n	80048f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fb16 	bl	8004ee8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fb9d 	bl	800502c <UART_CheckIdleState>
 80048f2:	4603      	mov	r3, r0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004910:	2b20      	cmp	r3, #32
 8004912:	f040 8081 	bne.w	8004a18 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_UART_Transmit+0x26>
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e079      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_UART_Transmit+0x38>
 8004930:	2302      	movs	r3, #2
 8004932:	e072      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2221      	movs	r2, #33	; 0x21
 8004948:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800494a:	f7fd fa2f 	bl	8001dac <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	88fa      	ldrh	r2, [r7, #6]
 8004954:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	88fa      	ldrh	r2, [r7, #6]
 800495c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004968:	d108      	bne.n	800497c <HAL_UART_Transmit+0x80>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e003      	b.n	8004984 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800498c:	e02c      	b.n	80049e8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2200      	movs	r2, #0
 8004996:	2180      	movs	r1, #128	; 0x80
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fb90 	bl	80050be <UART_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e038      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10b      	bne.n	80049c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	3302      	adds	r3, #2
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	e007      	b.n	80049d6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	3301      	adds	r3, #1
 80049d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1cc      	bne.n	800498e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2140      	movs	r1, #64	; 0x40
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb5d 	bl	80050be <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e005      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	e000      	b.n	8004a1a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004a18:	2302      	movs	r3, #2
  }
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	431a      	orrs	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4ba7      	ldr	r3, [pc, #668]	; (8004cec <UART_SetConfig+0x2c8>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	6979      	ldr	r1, [r7, #20]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a95      	ldr	r2, [pc, #596]	; (8004cf0 <UART_SetConfig+0x2cc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d120      	bne.n	8004ae2 <UART_SetConfig+0xbe>
 8004aa0:	4b94      	ldr	r3, [pc, #592]	; (8004cf4 <UART_SetConfig+0x2d0>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d816      	bhi.n	8004adc <UART_SetConfig+0xb8>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <UART_SetConfig+0x90>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ac5 	.word	0x08004ac5
 8004ab8:	08004ad1 	.word	0x08004ad1
 8004abc:	08004acb 	.word	0x08004acb
 8004ac0:	08004ad7 	.word	0x08004ad7
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e14f      	b.n	8004d6a <UART_SetConfig+0x346>
 8004aca:	2302      	movs	r3, #2
 8004acc:	77fb      	strb	r3, [r7, #31]
 8004ace:	e14c      	b.n	8004d6a <UART_SetConfig+0x346>
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e149      	b.n	8004d6a <UART_SetConfig+0x346>
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e146      	b.n	8004d6a <UART_SetConfig+0x346>
 8004adc:	2310      	movs	r3, #16
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e143      	b.n	8004d6a <UART_SetConfig+0x346>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a84      	ldr	r2, [pc, #528]	; (8004cf8 <UART_SetConfig+0x2d4>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d132      	bne.n	8004b52 <UART_SetConfig+0x12e>
 8004aec:	4b81      	ldr	r3, [pc, #516]	; (8004cf4 <UART_SetConfig+0x2d0>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b0c      	cmp	r3, #12
 8004af8:	d828      	bhi.n	8004b4c <UART_SetConfig+0x128>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0xdc>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b35 	.word	0x08004b35
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b4d 	.word	0x08004b4d
 8004b0c:	08004b4d 	.word	0x08004b4d
 8004b10:	08004b41 	.word	0x08004b41
 8004b14:	08004b4d 	.word	0x08004b4d
 8004b18:	08004b4d 	.word	0x08004b4d
 8004b1c:	08004b4d 	.word	0x08004b4d
 8004b20:	08004b3b 	.word	0x08004b3b
 8004b24:	08004b4d 	.word	0x08004b4d
 8004b28:	08004b4d 	.word	0x08004b4d
 8004b2c:	08004b4d 	.word	0x08004b4d
 8004b30:	08004b47 	.word	0x08004b47
 8004b34:	2300      	movs	r3, #0
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e117      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e114      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b40:	2304      	movs	r3, #4
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e111      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b46:	2308      	movs	r3, #8
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e10e      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e10b      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a69      	ldr	r2, [pc, #420]	; (8004cfc <UART_SetConfig+0x2d8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d120      	bne.n	8004b9e <UART_SetConfig+0x17a>
 8004b5c:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <UART_SetConfig+0x2d0>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b66:	2b30      	cmp	r3, #48	; 0x30
 8004b68:	d013      	beq.n	8004b92 <UART_SetConfig+0x16e>
 8004b6a:	2b30      	cmp	r3, #48	; 0x30
 8004b6c:	d814      	bhi.n	8004b98 <UART_SetConfig+0x174>
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d009      	beq.n	8004b86 <UART_SetConfig+0x162>
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d810      	bhi.n	8004b98 <UART_SetConfig+0x174>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <UART_SetConfig+0x15c>
 8004b7a:	2b10      	cmp	r3, #16
 8004b7c:	d006      	beq.n	8004b8c <UART_SetConfig+0x168>
 8004b7e:	e00b      	b.n	8004b98 <UART_SetConfig+0x174>
 8004b80:	2300      	movs	r3, #0
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e0f1      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b86:	2302      	movs	r3, #2
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	e0ee      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e0eb      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b92:	2308      	movs	r3, #8
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e0e8      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e0e5      	b.n	8004d6a <UART_SetConfig+0x346>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a57      	ldr	r2, [pc, #348]	; (8004d00 <UART_SetConfig+0x2dc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d120      	bne.n	8004bea <UART_SetConfig+0x1c6>
 8004ba8:	4b52      	ldr	r3, [pc, #328]	; (8004cf4 <UART_SetConfig+0x2d0>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bb2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb4:	d013      	beq.n	8004bde <UART_SetConfig+0x1ba>
 8004bb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bb8:	d814      	bhi.n	8004be4 <UART_SetConfig+0x1c0>
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d009      	beq.n	8004bd2 <UART_SetConfig+0x1ae>
 8004bbe:	2b80      	cmp	r3, #128	; 0x80
 8004bc0:	d810      	bhi.n	8004be4 <UART_SetConfig+0x1c0>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <UART_SetConfig+0x1a8>
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d006      	beq.n	8004bd8 <UART_SetConfig+0x1b4>
 8004bca:	e00b      	b.n	8004be4 <UART_SetConfig+0x1c0>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e0cb      	b.n	8004d6a <UART_SetConfig+0x346>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e0c8      	b.n	8004d6a <UART_SetConfig+0x346>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e0c5      	b.n	8004d6a <UART_SetConfig+0x346>
 8004bde:	2308      	movs	r3, #8
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e0c2      	b.n	8004d6a <UART_SetConfig+0x346>
 8004be4:	2310      	movs	r3, #16
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e0bf      	b.n	8004d6a <UART_SetConfig+0x346>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a45      	ldr	r2, [pc, #276]	; (8004d04 <UART_SetConfig+0x2e0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d125      	bne.n	8004c40 <UART_SetConfig+0x21c>
 8004bf4:	4b3f      	ldr	r3, [pc, #252]	; (8004cf4 <UART_SetConfig+0x2d0>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c02:	d017      	beq.n	8004c34 <UART_SetConfig+0x210>
 8004c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c08:	d817      	bhi.n	8004c3a <UART_SetConfig+0x216>
 8004c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0e:	d00b      	beq.n	8004c28 <UART_SetConfig+0x204>
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c14:	d811      	bhi.n	8004c3a <UART_SetConfig+0x216>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <UART_SetConfig+0x1fe>
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1e:	d006      	beq.n	8004c2e <UART_SetConfig+0x20a>
 8004c20:	e00b      	b.n	8004c3a <UART_SetConfig+0x216>
 8004c22:	2300      	movs	r3, #0
 8004c24:	77fb      	strb	r3, [r7, #31]
 8004c26:	e0a0      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	77fb      	strb	r3, [r7, #31]
 8004c2c:	e09d      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c2e:	2304      	movs	r3, #4
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e09a      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c34:	2308      	movs	r3, #8
 8004c36:	77fb      	strb	r3, [r7, #31]
 8004c38:	e097      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c3a:	2310      	movs	r3, #16
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e094      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a30      	ldr	r2, [pc, #192]	; (8004d08 <UART_SetConfig+0x2e4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d125      	bne.n	8004c96 <UART_SetConfig+0x272>
 8004c4a:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <UART_SetConfig+0x2d0>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c58:	d017      	beq.n	8004c8a <UART_SetConfig+0x266>
 8004c5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5e:	d817      	bhi.n	8004c90 <UART_SetConfig+0x26c>
 8004c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c64:	d00b      	beq.n	8004c7e <UART_SetConfig+0x25a>
 8004c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6a:	d811      	bhi.n	8004c90 <UART_SetConfig+0x26c>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <UART_SetConfig+0x254>
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c74:	d006      	beq.n	8004c84 <UART_SetConfig+0x260>
 8004c76:	e00b      	b.n	8004c90 <UART_SetConfig+0x26c>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e075      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e072      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c84:	2304      	movs	r3, #4
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e06f      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c8a:	2308      	movs	r3, #8
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e06c      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c90:	2310      	movs	r3, #16
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e069      	b.n	8004d6a <UART_SetConfig+0x346>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1c      	ldr	r2, [pc, #112]	; (8004d0c <UART_SetConfig+0x2e8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d137      	bne.n	8004d10 <UART_SetConfig+0x2ec>
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <UART_SetConfig+0x2d0>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cae:	d017      	beq.n	8004ce0 <UART_SetConfig+0x2bc>
 8004cb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cb4:	d817      	bhi.n	8004ce6 <UART_SetConfig+0x2c2>
 8004cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cba:	d00b      	beq.n	8004cd4 <UART_SetConfig+0x2b0>
 8004cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cc0:	d811      	bhi.n	8004ce6 <UART_SetConfig+0x2c2>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <UART_SetConfig+0x2aa>
 8004cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cca:	d006      	beq.n	8004cda <UART_SetConfig+0x2b6>
 8004ccc:	e00b      	b.n	8004ce6 <UART_SetConfig+0x2c2>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	77fb      	strb	r3, [r7, #31]
 8004cd2:	e04a      	b.n	8004d6a <UART_SetConfig+0x346>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e047      	b.n	8004d6a <UART_SetConfig+0x346>
 8004cda:	2304      	movs	r3, #4
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e044      	b.n	8004d6a <UART_SetConfig+0x346>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e041      	b.n	8004d6a <UART_SetConfig+0x346>
 8004ce6:	2310      	movs	r3, #16
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e03e      	b.n	8004d6a <UART_SetConfig+0x346>
 8004cec:	efff69f3 	.word	0xefff69f3
 8004cf0:	40011000 	.word	0x40011000
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40004400 	.word	0x40004400
 8004cfc:	40004800 	.word	0x40004800
 8004d00:	40004c00 	.word	0x40004c00
 8004d04:	40005000 	.word	0x40005000
 8004d08:	40011400 	.word	0x40011400
 8004d0c:	40007800 	.word	0x40007800
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a71      	ldr	r2, [pc, #452]	; (8004edc <UART_SetConfig+0x4b8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d125      	bne.n	8004d66 <UART_SetConfig+0x342>
 8004d1a:	4b71      	ldr	r3, [pc, #452]	; (8004ee0 <UART_SetConfig+0x4bc>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d28:	d017      	beq.n	8004d5a <UART_SetConfig+0x336>
 8004d2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d2e:	d817      	bhi.n	8004d60 <UART_SetConfig+0x33c>
 8004d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d34:	d00b      	beq.n	8004d4e <UART_SetConfig+0x32a>
 8004d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3a:	d811      	bhi.n	8004d60 <UART_SetConfig+0x33c>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <UART_SetConfig+0x324>
 8004d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d44:	d006      	beq.n	8004d54 <UART_SetConfig+0x330>
 8004d46:	e00b      	b.n	8004d60 <UART_SetConfig+0x33c>
 8004d48:	2300      	movs	r3, #0
 8004d4a:	77fb      	strb	r3, [r7, #31]
 8004d4c:	e00d      	b.n	8004d6a <UART_SetConfig+0x346>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	77fb      	strb	r3, [r7, #31]
 8004d52:	e00a      	b.n	8004d6a <UART_SetConfig+0x346>
 8004d54:	2304      	movs	r3, #4
 8004d56:	77fb      	strb	r3, [r7, #31]
 8004d58:	e007      	b.n	8004d6a <UART_SetConfig+0x346>
 8004d5a:	2308      	movs	r3, #8
 8004d5c:	77fb      	strb	r3, [r7, #31]
 8004d5e:	e004      	b.n	8004d6a <UART_SetConfig+0x346>
 8004d60:	2310      	movs	r3, #16
 8004d62:	77fb      	strb	r3, [r7, #31]
 8004d64:	e001      	b.n	8004d6a <UART_SetConfig+0x346>
 8004d66:	2310      	movs	r3, #16
 8004d68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d72:	d15b      	bne.n	8004e2c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004d74:	7ffb      	ldrb	r3, [r7, #31]
 8004d76:	2b08      	cmp	r3, #8
 8004d78:	d827      	bhi.n	8004dca <UART_SetConfig+0x3a6>
 8004d7a:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <UART_SetConfig+0x35c>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004da5 	.word	0x08004da5
 8004d84:	08004dad 	.word	0x08004dad
 8004d88:	08004db5 	.word	0x08004db5
 8004d8c:	08004dcb 	.word	0x08004dcb
 8004d90:	08004dbb 	.word	0x08004dbb
 8004d94:	08004dcb 	.word	0x08004dcb
 8004d98:	08004dcb 	.word	0x08004dcb
 8004d9c:	08004dcb 	.word	0x08004dcb
 8004da0:	08004dc3 	.word	0x08004dc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da4:	f7ff f90c 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004da8:	61b8      	str	r0, [r7, #24]
        break;
 8004daa:	e013      	b.n	8004dd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dac:	f7ff f91c 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 8004db0:	61b8      	str	r0, [r7, #24]
        break;
 8004db2:	e00f      	b.n	8004dd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db4:	4b4b      	ldr	r3, [pc, #300]	; (8004ee4 <UART_SetConfig+0x4c0>)
 8004db6:	61bb      	str	r3, [r7, #24]
        break;
 8004db8:	e00c      	b.n	8004dd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dba:	f7ff f83f 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8004dbe:	61b8      	str	r0, [r7, #24]
        break;
 8004dc0:	e008      	b.n	8004dd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc6:	61bb      	str	r3, [r7, #24]
        break;
 8004dc8:	e004      	b.n	8004dd4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	77bb      	strb	r3, [r7, #30]
        break;
 8004dd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d074      	beq.n	8004ec4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	005a      	lsls	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	085b      	lsrs	r3, r3, #1
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b0f      	cmp	r3, #15
 8004df6:	d916      	bls.n	8004e26 <UART_SetConfig+0x402>
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfe:	d212      	bcs.n	8004e26 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f023 030f 	bic.w	r3, r3, #15
 8004e08:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	085b      	lsrs	r3, r3, #1
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	89fb      	ldrh	r3, [r7, #14]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	89fa      	ldrh	r2, [r7, #14]
 8004e22:	60da      	str	r2, [r3, #12]
 8004e24:	e04e      	b.n	8004ec4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	77bb      	strb	r3, [r7, #30]
 8004e2a:	e04b      	b.n	8004ec4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e2c:	7ffb      	ldrb	r3, [r7, #31]
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d827      	bhi.n	8004e82 <UART_SetConfig+0x45e>
 8004e32:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x414>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e83 	.word	0x08004e83
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
 8004e58:	08004e7b 	.word	0x08004e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7ff f8b0 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8004e60:	61b8      	str	r0, [r7, #24]
        break;
 8004e62:	e013      	b.n	8004e8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7ff f8c0 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 8004e68:	61b8      	str	r0, [r7, #24]
        break;
 8004e6a:	e00f      	b.n	8004e8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <UART_SetConfig+0x4c0>)
 8004e6e:	61bb      	str	r3, [r7, #24]
        break;
 8004e70:	e00c      	b.n	8004e8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7fe ffe3 	bl	8003e3c <HAL_RCC_GetSysClockFreq>
 8004e76:	61b8      	str	r0, [r7, #24]
        break;
 8004e78:	e008      	b.n	8004e8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7e:	61bb      	str	r3, [r7, #24]
        break;
 8004e80:	e004      	b.n	8004e8c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	77bb      	strb	r3, [r7, #30]
        break;
 8004e8a:	bf00      	nop
    }

    if (pclk != 0U)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d018      	beq.n	8004ec4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	085a      	lsrs	r2, r3, #1
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	441a      	add	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b0f      	cmp	r3, #15
 8004eac:	d908      	bls.n	8004ec0 <UART_SetConfig+0x49c>
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb4:	d204      	bcs.n	8004ec0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	60da      	str	r2, [r3, #12]
 8004ebe:	e001      	b.n	8004ec4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ed0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3720      	adds	r7, #32
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40007c00 	.word	0x40007c00
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	00f42400 	.word	0x00f42400

08004ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01a      	beq.n	8004ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe6:	d10a      	bne.n	8004ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	605a      	str	r2, [r3, #4]
  }
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af02      	add	r7, sp, #8
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800503c:	f7fc feb6 	bl	8001dac <HAL_GetTick>
 8005040:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d10e      	bne.n	800506e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f82d 	bl	80050be <UART_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e023      	b.n	80050b6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b04      	cmp	r3, #4
 800507a:	d10e      	bne.n	800509a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800507c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f817 	bl	80050be <UART_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e00d      	b.n	80050b6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2220      	movs	r2, #32
 80050a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4613      	mov	r3, r2
 80050cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ce:	e05e      	b.n	800518e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d6:	d05a      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d8:	f7fc fe68 	bl	8001dac <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d302      	bcc.n	80050ee <UART_WaitOnFlagUntilTimeout+0x30>
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d11b      	bne.n	8005126 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2220      	movs	r2, #32
 8005112:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e043      	b.n	80051ae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d02c      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800513e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005142:	d124      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800514c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800515c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2220      	movs	r2, #32
 8005178:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e00f      	b.n	80051ae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	429a      	cmp	r2, r3
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d091      	beq.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <__libc_init_array>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4d0d      	ldr	r5, [pc, #52]	; (80051f0 <__libc_init_array+0x38>)
 80051bc:	4c0d      	ldr	r4, [pc, #52]	; (80051f4 <__libc_init_array+0x3c>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	2600      	movs	r6, #0
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	d109      	bne.n	80051dc <__libc_init_array+0x24>
 80051c8:	4d0b      	ldr	r5, [pc, #44]	; (80051f8 <__libc_init_array+0x40>)
 80051ca:	4c0c      	ldr	r4, [pc, #48]	; (80051fc <__libc_init_array+0x44>)
 80051cc:	f000 f864 	bl	8005298 <_init>
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	2600      	movs	r6, #0
 80051d6:	42a6      	cmp	r6, r4
 80051d8:	d105      	bne.n	80051e6 <__libc_init_array+0x2e>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e0:	4798      	blx	r3
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7ee      	b.n	80051c4 <__libc_init_array+0xc>
 80051e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ea:	4798      	blx	r3
 80051ec:	3601      	adds	r6, #1
 80051ee:	e7f2      	b.n	80051d6 <__libc_init_array+0x1e>
 80051f0:	080056a4 	.word	0x080056a4
 80051f4:	080056a4 	.word	0x080056a4
 80051f8:	080056a4 	.word	0x080056a4
 80051fc:	080056a8 	.word	0x080056a8

08005200 <memset>:
 8005200:	4402      	add	r2, r0
 8005202:	4603      	mov	r3, r0
 8005204:	4293      	cmp	r3, r2
 8005206:	d100      	bne.n	800520a <memset+0xa>
 8005208:	4770      	bx	lr
 800520a:	f803 1b01 	strb.w	r1, [r3], #1
 800520e:	e7f9      	b.n	8005204 <memset+0x4>

08005210 <__utoa>:
 8005210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005212:	4c1f      	ldr	r4, [pc, #124]	; (8005290 <__utoa+0x80>)
 8005214:	b08b      	sub	sp, #44	; 0x2c
 8005216:	4605      	mov	r5, r0
 8005218:	460b      	mov	r3, r1
 800521a:	466e      	mov	r6, sp
 800521c:	f104 0c20 	add.w	ip, r4, #32
 8005220:	6820      	ldr	r0, [r4, #0]
 8005222:	6861      	ldr	r1, [r4, #4]
 8005224:	4637      	mov	r7, r6
 8005226:	c703      	stmia	r7!, {r0, r1}
 8005228:	3408      	adds	r4, #8
 800522a:	4564      	cmp	r4, ip
 800522c:	463e      	mov	r6, r7
 800522e:	d1f7      	bne.n	8005220 <__utoa+0x10>
 8005230:	7921      	ldrb	r1, [r4, #4]
 8005232:	7139      	strb	r1, [r7, #4]
 8005234:	1e91      	subs	r1, r2, #2
 8005236:	6820      	ldr	r0, [r4, #0]
 8005238:	6038      	str	r0, [r7, #0]
 800523a:	2922      	cmp	r1, #34	; 0x22
 800523c:	f04f 0100 	mov.w	r1, #0
 8005240:	d904      	bls.n	800524c <__utoa+0x3c>
 8005242:	7019      	strb	r1, [r3, #0]
 8005244:	460b      	mov	r3, r1
 8005246:	4618      	mov	r0, r3
 8005248:	b00b      	add	sp, #44	; 0x2c
 800524a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800524c:	1e58      	subs	r0, r3, #1
 800524e:	4684      	mov	ip, r0
 8005250:	fbb5 f7f2 	udiv	r7, r5, r2
 8005254:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005258:	fb02 5617 	mls	r6, r2, r7, r5
 800525c:	4476      	add	r6, lr
 800525e:	460c      	mov	r4, r1
 8005260:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005264:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005268:	462e      	mov	r6, r5
 800526a:	42b2      	cmp	r2, r6
 800526c:	f101 0101 	add.w	r1, r1, #1
 8005270:	463d      	mov	r5, r7
 8005272:	d9ed      	bls.n	8005250 <__utoa+0x40>
 8005274:	2200      	movs	r2, #0
 8005276:	545a      	strb	r2, [r3, r1]
 8005278:	1919      	adds	r1, r3, r4
 800527a:	1aa5      	subs	r5, r4, r2
 800527c:	42aa      	cmp	r2, r5
 800527e:	dae2      	bge.n	8005246 <__utoa+0x36>
 8005280:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005284:	780e      	ldrb	r6, [r1, #0]
 8005286:	7006      	strb	r6, [r0, #0]
 8005288:	3201      	adds	r2, #1
 800528a:	f801 5901 	strb.w	r5, [r1], #-1
 800528e:	e7f4      	b.n	800527a <__utoa+0x6a>
 8005290:	08005674 	.word	0x08005674

08005294 <utoa>:
 8005294:	f7ff bfbc 	b.w	8005210 <__utoa>

08005298 <_init>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	bf00      	nop
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr

080052a4 <_fini>:
 80052a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a6:	bf00      	nop
 80052a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052aa:	bc08      	pop	{r3}
 80052ac:	469e      	mov	lr, r3
 80052ae:	4770      	bx	lr
