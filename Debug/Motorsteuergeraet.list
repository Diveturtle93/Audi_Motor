
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058e8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec4  08005ec4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ecc  08005ecc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ecc  08005ecc  00015ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ed0  08005ed0  00015ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08005ee0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08005ee0  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a6f  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003541  00000000  00000000  00037aa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0003aff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  0003c0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c43a  00000000  00000000  0003cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e94  00000000  00000000  00069422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001076f4  00000000  00000000  000802b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001879aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000436c  00000000  00000000  00187a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005ac8 	.word	0x08005ac8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005ac8 	.word	0x08005ac8

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <BAMOCAN_ID>:
//----------------------------------------------------------------------

// Ermittle Register nach Empfang Bamocar CAN-ID
//----------------------------------------------------------------------
void BAMOCAN_ID(uint8_t* data)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	uint8_t Reg = data[0];
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	73fb      	strb	r3, [r7, #15]
	uint16_t speed = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	81bb      	strh	r3, [r7, #12]

	// Waehlen welches Register gesendet wurde
	switch (Reg)
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2b30      	cmp	r3, #48	; 0x30
 8000556:	d113      	bne.n	8000580 <BAMOCAN_ID+0x40>
	{
		// Register fuer aktuelle Drehzahl, speed = n
		case BAMOCAR_REG_SPEED_ACT:
			speed = ((data[2]<<8) + data[1]);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3302      	adds	r3, #2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29b      	uxth	r3, r3
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	b29a      	uxth	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3301      	adds	r3, #1
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	4413      	add	r3, r2
 800056e:	81bb      	strh	r3, [r7, #12]
			motor1.Drehzahl = speed;
 8000570:	4a08      	ldr	r2, [pc, #32]	; (8000594 <BAMOCAN_ID+0x54>)
 8000572:	89bb      	ldrh	r3, [r7, #12]
 8000574:	8053      	strh	r3, [r2, #2]
// Uart Ausgabe
#ifdef DEBUG
			uartTransmit("Aktuelle Drehzahl\n", 18);
 8000576:	2112      	movs	r1, #18
 8000578:	4807      	ldr	r0, [pc, #28]	; (8000598 <BAMOCAN_ID+0x58>)
 800057a:	f000 f811 	bl	80005a0 <uartTransmit>
#endif

			break;
 800057e:	e004      	b.n	800058a <BAMOCAN_ID+0x4a>


		// Default Mitteilung falls Auwertung für Register noch nicht definiert ist
		default:
			uartTransmit("Bamocar Register nicht definiert\n", 33);
 8000580:	2121      	movs	r1, #33	; 0x21
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <BAMOCAN_ID+0x5c>)
 8000584:	f000 f80c 	bl	80005a0 <uartTransmit>
			break;
 8000588:	bf00      	nop
	}
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000034 	.word	0x20000034
 8000598:	08005ae0 	.word	0x08005ae0
 800059c:	08005af4 	.word	0x08005af4

080005a0 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <uartTransmit+0x24>)
 80005b6:	f004 fdb9 	bl	800512c <HAL_UART_Transmit>
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	20000138 	.word	0x20000138

080005c8 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
	char str[11];

	utoa(number, str, base);
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f005 fa72 	bl	8005ac4 <utoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4618      	mov	r0, r3
 80005e6:	f7ff fe27 	bl	8000238 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f107 010c 	add.w	r1, r7, #12
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <uartTransmitNumber+0x3c>)
 80005f8:	f004 fd98 	bl	800512c <HAL_UART_Transmit>
}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000138 	.word	0x20000138

08000608 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 800060c:	2112      	movs	r1, #18
 800060e:	4822      	ldr	r0, [pc, #136]	; (8000698 <collectMiddlewareInfo+0x90>)
 8000610:	f7ff ffc6 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);						// CMSIS Version anzeigen
 8000614:	210a      	movs	r1, #10
 8000616:	2005      	movs	r0, #5
 8000618:	f7ff ffd6 	bl	80005c8 <uartTransmitNumber>
	uartTransmit(".", 1);
 800061c:	2101      	movs	r1, #1
 800061e:	481f      	ldr	r0, [pc, #124]	; (800069c <collectMiddlewareInfo+0x94>)
 8000620:	f7ff ffbe 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);						// CMSIS Version anzeigen
 8000624:	210a      	movs	r1, #10
 8000626:	2001      	movs	r0, #1
 8000628:	f7ff ffce 	bl	80005c8 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));			// Hal Version anzeigen
 800062c:	2110      	movs	r1, #16
 800062e:	481c      	ldr	r0, [pc, #112]	; (80006a0 <collectMiddlewareInfo+0x98>)
 8000630:	f7ff ffb6 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 8000634:	f001 fca6 	bl	8001f84 <HAL_GetHalVersion>
 8000638:	4603      	mov	r3, r0
 800063a:	0e1b      	lsrs	r3, r3, #24
 800063c:	b2db      	uxtb	r3, r3
 800063e:	210a      	movs	r1, #10
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ffc1 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000646:	2101      	movs	r1, #1
 8000648:	4814      	ldr	r0, [pc, #80]	; (800069c <collectMiddlewareInfo+0x94>)
 800064a:	f7ff ffa9 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 800064e:	f001 fc99 	bl	8001f84 <HAL_GetHalVersion>
 8000652:	4603      	mov	r3, r0
 8000654:	0c1b      	lsrs	r3, r3, #16
 8000656:	b2db      	uxtb	r3, r3
 8000658:	210a      	movs	r1, #10
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffb4 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 8000660:	2101      	movs	r1, #1
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <collectMiddlewareInfo+0x94>)
 8000664:	f7ff ff9c 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000668:	f001 fc8c 	bl	8001f84 <HAL_GetHalVersion>
 800066c:	4603      	mov	r3, r0
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b2db      	uxtb	r3, r3
 8000672:	210a      	movs	r1, #10
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ffa7 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);													// Hal Version anzeigen
 800067a:	2101      	movs	r1, #1
 800067c:	4807      	ldr	r0, [pc, #28]	; (800069c <collectMiddlewareInfo+0x94>)
 800067e:	f7ff ff8f 	bl	80005a0 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000682:	f001 fc7f 	bl	8001f84 <HAL_GetHalVersion>
 8000686:	4603      	mov	r3, r0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	210a      	movs	r1, #10
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff9b 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);						// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08005b18 	.word	0x08005b18
 800069c:	08005b2c 	.word	0x08005b2c
 80006a0:	08005b30 	.word	0x08005b30

080006a4 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 80006a8:	2110      	movs	r1, #16
 80006aa:	4816      	ldr	r0, [pc, #88]	; (8000704 <collectSoftwareInfo+0x60>)
 80006ac:	f7ff ff78 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));							// Git Commit anzeigen
 80006b0:	2108      	movs	r1, #8
 80006b2:	4815      	ldr	r0, [pc, #84]	; (8000708 <collectSoftwareInfo+0x64>)
 80006b4:	f7ff ff74 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 80006b8:	210f      	movs	r1, #15
 80006ba:	4814      	ldr	r0, [pc, #80]	; (800070c <collectSoftwareInfo+0x68>)
 80006bc:	f7ff ff70 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));							// Git Branch anzeigen
 80006c0:	210c      	movs	r1, #12
 80006c2:	4813      	ldr	r0, [pc, #76]	; (8000710 <collectSoftwareInfo+0x6c>)
 80006c4:	f7ff ff6c 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 80006c8:	210d      	movs	r1, #13
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <collectSoftwareInfo+0x70>)
 80006cc:	f7ff ff68 	bl	80005a0 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));								// Git Hash anzeigen
 80006d0:	2129      	movs	r1, #41	; 0x29
 80006d2:	4811      	ldr	r0, [pc, #68]	; (8000718 <collectSoftwareInfo+0x74>)
 80006d4:	f7ff ff64 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 80006d8:	210f      	movs	r1, #15
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <collectSoftwareInfo+0x78>)
 80006dc:	f7ff ff60 	bl	80005a0 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));							// Kompilierdatum anzeigen
 80006e0:	210c      	movs	r1, #12
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <collectSoftwareInfo+0x7c>)
 80006e4:	f7ff ff5c 	bl	80005a0 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 80006e8:	210f      	movs	r1, #15
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <collectSoftwareInfo+0x80>)
 80006ec:	f7ff ff58 	bl	80005a0 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));							// Kompilierzeit anzeigen
 80006f0:	2109      	movs	r1, #9
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <collectSoftwareInfo+0x84>)
 80006f4:	f7ff ff54 	bl	80005a0 <uartTransmit>

	uartTransmit("\n", 1);
 80006f8:	2101      	movs	r1, #1
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <collectSoftwareInfo+0x88>)
 80006fc:	f7ff ff50 	bl	80005a0 <uartTransmit>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	08005b40 	.word	0x08005b40
 8000708:	08005b50 	.word	0x08005b50
 800070c:	08005b58 	.word	0x08005b58
 8000710:	08005b68 	.word	0x08005b68
 8000714:	08005b74 	.word	0x08005b74
 8000718:	08005b84 	.word	0x08005b84
 800071c:	08005bb0 	.word	0x08005bb0
 8000720:	08005bc0 	.word	0x08005bc0
 8000724:	08005bcc 	.word	0x08005bcc
 8000728:	08005bdc 	.word	0x08005bdc
 800072c:	08005be8 	.word	0x08005be8

08000730 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 8000736:	2113      	movs	r1, #19
 8000738:	483b      	ldr	r0, [pc, #236]	; (8000828 <collectHardwareInfo+0xf8>)
 800073a:	f7ff ff31 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);									// Mikrocontroller Typ
 800073e:	f001 fc37 	bl	8001fb0 <HAL_GetDEVID>
 8000742:	4603      	mov	r3, r0
 8000744:	210a      	movs	r1, #10
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff3e 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 800074c:	2115      	movs	r1, #21
 800074e:	4837      	ldr	r0, [pc, #220]	; (800082c <collectHardwareInfo+0xfc>)
 8000750:	f7ff ff26 	bl	80005a0 <uartTransmit>
	
	switch(HAL_GetREVID())													// Mikrocontroller Revision
 8000754:	f001 fc20 	bl	8001f98 <HAL_GetREVID>
 8000758:	4603      	mov	r3, r0
 800075a:	f242 0201 	movw	r2, #8193	; 0x2001
 800075e:	4293      	cmp	r3, r2
 8000760:	d016      	beq.n	8000790 <collectHardwareInfo+0x60>
 8000762:	f242 0201 	movw	r2, #8193	; 0x2001
 8000766:	4293      	cmp	r3, r2
 8000768:	d817      	bhi.n	800079a <collectHardwareInfo+0x6a>
 800076a:	f241 0201 	movw	r2, #4097	; 0x1001
 800076e:	4293      	cmp	r3, r2
 8000770:	d004      	beq.n	800077c <collectHardwareInfo+0x4c>
 8000772:	f241 0203 	movw	r2, #4099	; 0x1003
 8000776:	4293      	cmp	r3, r2
 8000778:	d005      	beq.n	8000786 <collectHardwareInfo+0x56>
 800077a:	e00e      	b.n	800079a <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 800077c:	2101      	movs	r1, #1
 800077e:	482c      	ldr	r0, [pc, #176]	; (8000830 <collectHardwareInfo+0x100>)
 8000780:	f7ff ff0e 	bl	80005a0 <uartTransmit>
			break;
 8000784:	e011      	b.n	80007aa <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000786:	2101      	movs	r1, #1
 8000788:	482a      	ldr	r0, [pc, #168]	; (8000834 <collectHardwareInfo+0x104>)
 800078a:	f7ff ff09 	bl	80005a0 <uartTransmit>
			break;
 800078e:	e00c      	b.n	80007aa <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000790:	2101      	movs	r1, #1
 8000792:	4829      	ldr	r0, [pc, #164]	; (8000838 <collectHardwareInfo+0x108>)
 8000794:	f7ff ff04 	bl	80005a0 <uartTransmit>
			break;
 8000798:	e007      	b.n	80007aa <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800079a:	f001 fbfd 	bl	8001f98 <HAL_GetREVID>
 800079e:	4603      	mov	r3, r0
 80007a0:	210a      	movs	r1, #10
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff10 	bl	80005c8 <uartTransmitNumber>
			break;
 80007a8:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 80007aa:	2113      	movs	r1, #19
 80007ac:	4823      	ldr	r0, [pc, #140]	; (800083c <collectHardwareInfo+0x10c>)
 80007ae:	f7ff fef7 	bl	80005a0 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();						// Systemfrequenz ausgeben
 80007b2:	f003 fbff 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80007b6:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a21      	ldr	r2, [pc, #132]	; (8000840 <collectHardwareInfo+0x110>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	0c9b      	lsrs	r3, r3, #18
 80007c2:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 80007c4:	210a      	movs	r1, #10
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fefe 	bl	80005c8 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 80007cc:	2104      	movs	r1, #4
 80007ce:	481d      	ldr	r0, [pc, #116]	; (8000844 <collectHardwareInfo+0x114>)
 80007d0:	f7ff fee6 	bl	80005a0 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 80007d4:	210f      	movs	r1, #15
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <collectHardwareInfo+0x118>)
 80007d8:	f7ff fee2 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);									// UID0 ausgeben
 80007dc:	f001 fbf6 	bl	8001fcc <HAL_GetUIDw0>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2110      	movs	r1, #16
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff feef 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80007ea:	2101      	movs	r1, #1
 80007ec:	4817      	ldr	r0, [pc, #92]	; (800084c <collectHardwareInfo+0x11c>)
 80007ee:	f7ff fed7 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);									// UID1 ausgeben
 80007f2:	f001 fbf7 	bl	8001fe4 <HAL_GetUIDw1>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2110      	movs	r1, #16
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fee4 	bl	80005c8 <uartTransmitNumber>

	uartTransmit(" ", 1);
 8000800:	2101      	movs	r1, #1
 8000802:	4812      	ldr	r0, [pc, #72]	; (800084c <collectHardwareInfo+0x11c>)
 8000804:	f7ff fecc 	bl	80005a0 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);									// UID2 ausgeben
 8000808:	f001 fbf8 	bl	8001ffc <HAL_GetUIDw2>
 800080c:	4603      	mov	r3, r0
 800080e:	2110      	movs	r1, #16
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fed9 	bl	80005c8 <uartTransmitNumber>

	uartTransmit("\n", 1);
 8000816:	2101      	movs	r1, #1
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <collectHardwareInfo+0x120>)
 800081a:	f7ff fec1 	bl	80005a0 <uartTransmit>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	08005bec 	.word	0x08005bec
 800082c:	08005c00 	.word	0x08005c00
 8000830:	08005c18 	.word	0x08005c18
 8000834:	08005c1c 	.word	0x08005c1c
 8000838:	08005c20 	.word	0x08005c20
 800083c:	08005c24 	.word	0x08005c24
 8000840:	431bde83 	.word	0x431bde83
 8000844:	08005c38 	.word	0x08005c38
 8000848:	08005c40 	.word	0x08005c40
 800084c:	08005c50 	.word	0x08005c50
 8000850:	08005be8 	.word	0x08005be8

08000854 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 8000858:	2111      	movs	r1, #17
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <collectSystemInfo+0x34>)
 800085c:	f7ff fea0 	bl	80005a0 <uartTransmit>
	collectHardwareInfo();													// Sammelt Hardware Informationen und gibt diese ueber Uart aus
 8000860:	f7ff ff66 	bl	8000730 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000864:	2111      	movs	r1, #17
 8000866:	4809      	ldr	r0, [pc, #36]	; (800088c <collectSystemInfo+0x38>)
 8000868:	f7ff fe9a 	bl	80005a0 <uartTransmit>
	collectSoftwareInfo();													// Sammelt Software Informationen und gibt diese ueber Uart aus
 800086c:	f7ff ff1a 	bl	80006a4 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000870:	2113      	movs	r1, #19
 8000872:	4807      	ldr	r0, [pc, #28]	; (8000890 <collectSystemInfo+0x3c>)
 8000874:	f7ff fe94 	bl	80005a0 <uartTransmit>
	collectMiddlewareInfo();												// Sammelt Middleware Informationen und gibt diese ueber Uart aus
 8000878:	f7ff fec6 	bl	8000608 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 800087c:	2103      	movs	r1, #3
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <collectSystemInfo+0x40>)
 8000880:	f7ff fe8e 	bl	80005a0 <uartTransmit>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08005c54 	.word	0x08005c54
 800088c:	08005c68 	.word	0x08005c68
 8000890:	08005c7c 	.word	0x08005c7c
 8000894:	08005c90 	.word	0x08005c90

08000898 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800089e:	2300      	movs	r3, #0
 80008a0:	71fb      	strb	r3, [r7, #7]

	// Pruefe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <readResetSource+0xa0>)
 80008a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3301      	adds	r3, #1
 80008b2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <readResetSource+0xa0>)
 80008b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	3302      	adds	r3, #2
 80008c4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <readResetSource+0xa0>)
 80008c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	da02      	bge.n	80008d4 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	3304      	adds	r3, #4
 80008d2:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <readResetSource+0xa0>)
 80008d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	3308      	adds	r3, #8
 80008e4:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <readResetSource+0xa0>)
 80008e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	3310      	adds	r3, #16
 80008f6:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <readResetSource+0xa0>)
 80008fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	3320      	adds	r3, #32
 8000908:	71fb      	strb	r3, [r7, #7]
	}

	// Pruefe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <readResetSource+0xa0>)
 800090c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800090e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	3340      	adds	r3, #64	; 0x40
 800091a:	71fb      	strb	r3, [r7, #7]
	}

	// Loesche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <readResetSource+0xa0>)
 800091e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <readResetSource+0xa0>)
 8000922:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000926:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 8000928:	79fb      	ldrb	r3, [r7, #7]
}
 800092a:	4618      	mov	r0, r3
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	// Returns für Absatz nach Neustart.
	uartTransmit("\r\r\r\r\r\r", 6);
 8000946:	2106      	movs	r1, #6
 8000948:	482a      	ldr	r0, [pc, #168]	; (80009f4 <printResetSource+0xb8>)
 800094a:	f7ff fe29 	bl	80005a0 <uartTransmit>


	if (reset_flags == STARTUP)											// Regulärer Start
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d104      	bne.n	800095e <printResetSource+0x22>
	{
		uartTransmit("Regular Start\r\n", 15);
 8000954:	210f      	movs	r1, #15
 8000956:	4828      	ldr	r0, [pc, #160]	; (80009f8 <printResetSource+0xbc>)
 8000958:	f7ff fe22 	bl	80005a0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 800095c:	e046      	b.n	80009ec <printResetSource+0xb0>
		if (reset_flags & IWDG1)											// Interner watchdog Reset
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b00      	cmp	r3, #0
 8000966:	d003      	beq.n	8000970 <printResetSource+0x34>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000968:	2118      	movs	r1, #24
 800096a:	4824      	ldr	r0, [pc, #144]	; (80009fc <printResetSource+0xc0>)
 800096c:	f7ff fe18 	bl	80005a0 <uartTransmit>
		if (reset_flags & WWDG1)											// Window watchdog Reset
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <printResetSource+0x46>
			uartTransmit("Window Watchdog Reset\n", 22);
 800097a:	2116      	movs	r1, #22
 800097c:	4820      	ldr	r0, [pc, #128]	; (8000a00 <printResetSource+0xc4>)
 800097e:	f7ff fe0f 	bl	80005a0 <uartTransmit>
		if (reset_flags & CPURST1)											// CPU Reset
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	2b00      	cmp	r3, #0
 800098a:	d003      	beq.n	8000994 <printResetSource+0x58>
			uartTransmit("CPU Reset\n", 10);
 800098c:	210a      	movs	r1, #10
 800098e:	481d      	ldr	r0, [pc, #116]	; (8000a04 <printResetSource+0xc8>)
 8000990:	f7ff fe06 	bl	80005a0 <uartTransmit>
		if (reset_flags & BORST1)											// Brown out Reset
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d003      	beq.n	80009a6 <printResetSource+0x6a>
			uartTransmit("Brown Out Reset\n", 16);
 800099e:	2110      	movs	r1, #16
 80009a0:	4819      	ldr	r0, [pc, #100]	; (8000a08 <printResetSource+0xcc>)
 80009a2:	f7ff fdfd 	bl	80005a0 <uartTransmit>
		if (reset_flags & PORST1)											//Power on Reset / Power down Reser
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	f003 0310 	and.w	r3, r3, #16
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <printResetSource+0x7c>
			uartTransmit("Power On Reset\n", 15);
 80009b0:	210f      	movs	r1, #15
 80009b2:	4816      	ldr	r0, [pc, #88]	; (8000a0c <printResetSource+0xd0>)
 80009b4:	f7ff fdf4 	bl	80005a0 <uartTransmit>
		if (reset_flags & SFTRST1)											// Software Reset
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <printResetSource+0x8e>
			uartTransmit("Software Reset\n", 15);
 80009c2:	210f      	movs	r1, #15
 80009c4:	4812      	ldr	r0, [pc, #72]	; (8000a10 <printResetSource+0xd4>)
 80009c6:	f7ff fdeb 	bl	80005a0 <uartTransmit>
		if (reset_flags & PINRST1)											//NRST pin
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <printResetSource+0xa0>
			uartTransmit("PIN Reset\n", 10);
 80009d4:	210a      	movs	r1, #10
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <printResetSource+0xd8>)
 80009d8:	f7ff fde2 	bl	80005a0 <uartTransmit>
		if (reset_flags & RMVF1)											//NRST pin
 80009dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	da03      	bge.n	80009ec <printResetSource+0xb0>
			uartTransmit("RMVF\n", 5);
 80009e4:	2105      	movs	r1, #5
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <printResetSource+0xdc>)
 80009e8:	f7ff fdda 	bl	80005a0 <uartTransmit>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08005c94 	.word	0x08005c94
 80009f8:	08005c9c 	.word	0x08005c9c
 80009fc:	08005cac 	.word	0x08005cac
 8000a00:	08005cc8 	.word	0x08005cc8
 8000a04:	08005ce0 	.word	0x08005ce0
 8000a08:	08005cec 	.word	0x08005cec
 8000a0c:	08005d00 	.word	0x08005d00
 8000a10:	08005d10 	.word	0x08005d10
 8000a14:	08005d20 	.word	0x08005d20
 8000a18:	08005d2c 	.word	0x08005d2c

08000a1c <hal_error>:
//----------------------------------------------------------------------

// Hal Error auswerten und ausgeben
//----------------------------------------------------------------------
void hal_error(uint8_t status)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (status == HAL_OK) {												// HAL OK
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d104      	bne.n	8000a36 <hal_error+0x1a>
		uartTransmit("HAL OK\n", 7);
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	480f      	ldr	r0, [pc, #60]	; (8000a6c <hal_error+0x50>)
 8000a30:	f7ff fdb6 	bl	80005a0 <uartTransmit>
	}
	else if (status == HAL_TIMEOUT) {									// HAL Timeout
		uartTransmit("HAL TIMEOUT\n", 12);
	}
#endif
}
 8000a34:	e016      	b.n	8000a64 <hal_error+0x48>
	else if (status == HAL_ERROR) {										// HAL Error
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <hal_error+0x2a>
		uartTransmit("HAL ERROR\n", 10);
 8000a3c:	210a      	movs	r1, #10
 8000a3e:	480c      	ldr	r0, [pc, #48]	; (8000a70 <hal_error+0x54>)
 8000a40:	f7ff fdae 	bl	80005a0 <uartTransmit>
}
 8000a44:	e00e      	b.n	8000a64 <hal_error+0x48>
	else if (status == HAL_BUSY) {										// HAL Beschaeftigt
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b02      	cmp	r3, #2
 8000a4a:	d104      	bne.n	8000a56 <hal_error+0x3a>
		uartTransmit("HAL BUSY\n", 9);
 8000a4c:	2109      	movs	r1, #9
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <hal_error+0x58>)
 8000a50:	f7ff fda6 	bl	80005a0 <uartTransmit>
}
 8000a54:	e006      	b.n	8000a64 <hal_error+0x48>
	else if (status == HAL_TIMEOUT) {									// HAL Timeout
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d103      	bne.n	8000a64 <hal_error+0x48>
		uartTransmit("HAL TIMEOUT\n", 12);
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	4806      	ldr	r0, [pc, #24]	; (8000a78 <hal_error+0x5c>)
 8000a60:	f7ff fd9e 	bl	80005a0 <uartTransmit>
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	08005d34 	.word	0x08005d34
 8000a70:	08005d3c 	.word	0x08005d3c
 8000a74:	08005d48 	.word	0x08005d48
 8000a78:	08005d54 	.word	0x08005d54

08000a7c <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);					// Eingang Gaspedal getreten
 8000a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a84:	48ce      	ldr	r0, [pc, #824]	; (8000dc0 <readall_inputs+0x344>)
 8000a86:	f002 fe79 	bl	800377c <HAL_GPIO_ReadPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	b2d9      	uxtb	r1, r3
 8000a92:	4acc      	ldr	r2, [pc, #816]	; (8000dc4 <readall_inputs+0x348>)
 8000a94:	7813      	ldrb	r3, [r2, #0]
 8000a96:	f361 0300 	bfi	r3, r1, #0, #1
 8000a9a:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);					// Eingang Gaspedal nicht getreten
 8000a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa0:	48c7      	ldr	r0, [pc, #796]	; (8000dc0 <readall_inputs+0x344>)
 8000aa2:	f002 fe6b 	bl	800377c <HAL_GPIO_ReadPin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	b2d9      	uxtb	r1, r3
 8000aae:	4ac5      	ldr	r2, [pc, #788]	; (8000dc4 <readall_inputs+0x348>)
 8000ab0:	7813      	ldrb	r3, [r2, #0]
 8000ab2:	f361 0341 	bfi	r3, r1, #1, #1
 8000ab6:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);					// Eingang Bremse nicht getreten
 8000ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abc:	48c0      	ldr	r0, [pc, #768]	; (8000dc0 <readall_inputs+0x344>)
 8000abe:	f002 fe5d 	bl	800377c <HAL_GPIO_ReadPin>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	b2d9      	uxtb	r1, r3
 8000aca:	4abe      	ldr	r2, [pc, #760]	; (8000dc4 <readall_inputs+0x348>)
 8000acc:	7813      	ldrb	r3, [r2, #0]
 8000ace:	f361 0382 	bfi	r3, r1, #2, #1
 8000ad2:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);					// Eingang Bremse getreten
 8000ad4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad8:	48b9      	ldr	r0, [pc, #740]	; (8000dc0 <readall_inputs+0x344>)
 8000ada:	f002 fe4f 	bl	800377c <HAL_GPIO_ReadPin>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	b2d9      	uxtb	r1, r3
 8000ae6:	4ab7      	ldr	r2, [pc, #732]	; (8000dc4 <readall_inputs+0x348>)
 8000ae8:	7813      	ldrb	r3, [r2, #0]
 8000aea:	f361 03c3 	bfi	r3, r1, #3, #1
 8000aee:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);				// Eingang Kupplung nicht getreten
 8000af0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af4:	48b2      	ldr	r0, [pc, #712]	; (8000dc0 <readall_inputs+0x344>)
 8000af6:	f002 fe41 	bl	800377c <HAL_GPIO_ReadPin>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b2d9      	uxtb	r1, r3
 8000b02:	4ab0      	ldr	r2, [pc, #704]	; (8000dc4 <readall_inputs+0x348>)
 8000b04:	7813      	ldrb	r3, [r2, #0]
 8000b06:	f361 1304 	bfi	r3, r1, #4, #1
 8000b0a:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);		// Eingang Recuperation
 8000b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b10:	48ad      	ldr	r0, [pc, #692]	; (8000dc8 <readall_inputs+0x34c>)
 8000b12:	f002 fe33 	bl	800377c <HAL_GPIO_ReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	b2d9      	uxtb	r1, r3
 8000b1e:	4aa9      	ldr	r2, [pc, #676]	; (8000dc4 <readall_inputs+0x348>)
 8000b20:	7813      	ldrb	r3, [r2, #0]
 8000b22:	f361 1345 	bfi	r3, r1, #5, #1
 8000b26:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);								// Eingang Klima
 8000b28:	2102      	movs	r1, #2
 8000b2a:	48a7      	ldr	r0, [pc, #668]	; (8000dc8 <readall_inputs+0x34c>)
 8000b2c:	f002 fe26 	bl	800377c <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	b2d9      	uxtb	r1, r3
 8000b38:	4aa2      	ldr	r2, [pc, #648]	; (8000dc4 <readall_inputs+0x348>)
 8000b3a:	7813      	ldrb	r3, [r2, #0]
 8000b3c:	f361 1386 	bfi	r3, r1, #6, #1
 8000b40:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);					// Eingang Zuendschloss, Motor starten
 8000b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b46:	48a1      	ldr	r0, [pc, #644]	; (8000dcc <readall_inputs+0x350>)
 8000b48:	f002 fe18 	bl	800377c <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	b2d9      	uxtb	r1, r3
 8000b54:	4a9b      	ldr	r2, [pc, #620]	; (8000dc4 <readall_inputs+0x348>)
 8000b56:	7813      	ldrb	r3, [r2, #0]
 8000b58:	f361 13c7 	bfi	r3, r1, #7, #1
 8000b5c:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);								// Eingang Auto an
 8000b5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b62:	489b      	ldr	r0, [pc, #620]	; (8000dd0 <readall_inputs+0x354>)
 8000b64:	f002 fe0a 	bl	800377c <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	b2d9      	uxtb	r1, r3
 8000b70:	4a94      	ldr	r2, [pc, #592]	; (8000dc4 <readall_inputs+0x348>)
 8000b72:	7853      	ldrb	r3, [r2, #1]
 8000b74:	f361 0300 	bfi	r3, r1, #0, #1
 8000b78:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);	// DCDC Wandler funktioniert einwandfrei
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	4895      	ldr	r0, [pc, #596]	; (8000dd4 <readall_inputs+0x358>)
 8000b7e:	f002 fdfd 	bl	800377c <HAL_GPIO_ReadPin>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	b2d9      	uxtb	r1, r3
 8000b8a:	4a8e      	ldr	r2, [pc, #568]	; (8000dc4 <readall_inputs+0x348>)
 8000b8c:	7853      	ldrb	r3, [r2, #1]
 8000b8e:	f361 0341 	bfi	r3, r1, #1, #1
 8000b92:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);						// Zusatzeingang Taster 1
 8000b94:	2101      	movs	r1, #1
 8000b96:	488c      	ldr	r0, [pc, #560]	; (8000dc8 <readall_inputs+0x34c>)
 8000b98:	f002 fdf0 	bl	800377c <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	b2d9      	uxtb	r1, r3
 8000ba4:	4a87      	ldr	r2, [pc, #540]	; (8000dc4 <readall_inputs+0x348>)
 8000ba6:	7853      	ldrb	r3, [r2, #1]
 8000ba8:	f361 0382 	bfi	r3, r1, #2, #1
 8000bac:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);						// Zusatzeingang Taster 2
 8000bae:	2140      	movs	r1, #64	; 0x40
 8000bb0:	4883      	ldr	r0, [pc, #524]	; (8000dc0 <readall_inputs+0x344>)
 8000bb2:	f002 fde3 	bl	800377c <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	b2d9      	uxtb	r1, r3
 8000bbe:	4a81      	ldr	r2, [pc, #516]	; (8000dc4 <readall_inputs+0x348>)
 8000bc0:	7853      	ldrb	r3, [r2, #1]
 8000bc2:	f361 03c3 	bfi	r3, r1, #3, #1
 8000bc6:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);								// Crash Eingang
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4883      	ldr	r0, [pc, #524]	; (8000dd8 <readall_inputs+0x35c>)
 8000bcc:	f002 fdd6 	bl	800377c <HAL_GPIO_ReadPin>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	b2d9      	uxtb	r1, r3
 8000bd8:	4a7a      	ldr	r2, [pc, #488]	; (8000dc4 <readall_inputs+0x348>)
 8000bda:	7853      	ldrb	r3, [r2, #1]
 8000bdc:	f361 1304 	bfi	r3, r1, #4, #1
 8000be0:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);						// Eingang Hardware Wakeup
 8000be2:	2104      	movs	r1, #4
 8000be4:	487c      	ldr	r0, [pc, #496]	; (8000dd8 <readall_inputs+0x35c>)
 8000be6:	f002 fdc9 	bl	800377c <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	b2d9      	uxtb	r1, r3
 8000bf2:	4a74      	ldr	r2, [pc, #464]	; (8000dc4 <readall_inputs+0x348>)
 8000bf4:	7853      	ldrb	r3, [r2, #1]
 8000bf6:	f361 1345 	bfi	r3, r1, #5, #1
 8000bfa:	7053      	strb	r3, [r2, #1]
	//system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);	// Bremsdruck nicht zu hoch
	//system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);	// Bremsdruck zu hoch

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);			// Emergency Run, Akku
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4876      	ldr	r0, [pc, #472]	; (8000dd8 <readall_inputs+0x35c>)
 8000c00:	f002 fdbc 	bl	800377c <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	b2d9      	uxtb	r1, r3
 8000c0c:	4a73      	ldr	r2, [pc, #460]	; (8000ddc <readall_inputs+0x360>)
 8000c0e:	7813      	ldrb	r3, [r2, #0]
 8000c10:	f361 0300 	bfi	r3, r1, #0, #1
 8000c14:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);						// Shutdown-Circuit, OK
 8000c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1a:	4869      	ldr	r0, [pc, #420]	; (8000dc0 <readall_inputs+0x344>)
 8000c1c:	f002 fdae 	bl	800377c <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	b2d9      	uxtb	r1, r3
 8000c28:	4a6c      	ldr	r2, [pc, #432]	; (8000ddc <readall_inputs+0x360>)
 8000c2a:	7813      	ldrb	r3, [r2, #0]
 8000c2c:	f361 0341 	bfi	r3, r1, #1, #1
 8000c30:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);			// Shutdown-Circuit Akku, OK
 8000c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c36:	4862      	ldr	r0, [pc, #392]	; (8000dc0 <readall_inputs+0x344>)
 8000c38:	f002 fda0 	bl	800377c <HAL_GPIO_ReadPin>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	b2d9      	uxtb	r1, r3
 8000c44:	4a65      	ldr	r2, [pc, #404]	; (8000ddc <readall_inputs+0x360>)
 8000c46:	7813      	ldrb	r3, [r2, #0]
 8000c48:	f361 0382 	bfi	r3, r1, #2, #1
 8000c4c:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);				// Shutdown-Circuit Bamocar, OK
 8000c4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c52:	485e      	ldr	r0, [pc, #376]	; (8000dcc <readall_inputs+0x350>)
 8000c54:	f002 fd92 	bl	800377c <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	b2d9      	uxtb	r1, r3
 8000c60:	4a5e      	ldr	r2, [pc, #376]	; (8000ddc <readall_inputs+0x360>)
 8000c62:	7813      	ldrb	r3, [r2, #0]
 8000c64:	f361 03c3 	bfi	r3, r1, #3, #1
 8000c68:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCDC_FAULT_GPIO_Port, DCDC_FAULT_Pin);					// DCDC Wandler funktioniert nicht richtig
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4859      	ldr	r0, [pc, #356]	; (8000dd4 <readall_inputs+0x358>)
 8000c6e:	f002 fd85 	bl	800377c <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	b2d9      	uxtb	r1, r3
 8000c7a:	4a58      	ldr	r2, [pc, #352]	; (8000ddc <readall_inputs+0x360>)
 8000c7c:	7813      	ldrb	r3, [r2, #0]
 8000c7e:	f361 1304 	bfi	r3, r1, #4, #1
 8000c82:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);							// ASR Eingang Mittelkonsole
 8000c84:	2110      	movs	r1, #16
 8000c86:	4853      	ldr	r0, [pc, #332]	; (8000dd4 <readall_inputs+0x358>)
 8000c88:	f002 fd78 	bl	800377c <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	b2d9      	uxtb	r1, r3
 8000c94:	4a52      	ldr	r2, [pc, #328]	; (8000de0 <readall_inputs+0x364>)
 8000c96:	7813      	ldrb	r3, [r2, #0]
 8000c98:	f361 0300 	bfi	r3, r1, #0, #1
 8000c9c:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);							// ASR Eingang Mittelkonsole
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	484b      	ldr	r0, [pc, #300]	; (8000dd0 <readall_inputs+0x354>)
 8000ca2:	f002 fd6b 	bl	800377c <HAL_GPIO_ReadPin>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	b2d9      	uxtb	r1, r3
 8000cae:	4a4c      	ldr	r2, [pc, #304]	; (8000de0 <readall_inputs+0x364>)
 8000cb0:	7813      	ldrb	r3, [r2, #0]
 8000cb2:	f361 0341 	bfi	r3, r1, #1, #1
 8000cb6:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);									// ECO Eingang Mittelkonsole
 8000cb8:	2108      	movs	r1, #8
 8000cba:	4841      	ldr	r0, [pc, #260]	; (8000dc0 <readall_inputs+0x344>)
 8000cbc:	f002 fd5e 	bl	800377c <HAL_GPIO_ReadPin>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2d9      	uxtb	r1, r3
 8000cc8:	4a45      	ldr	r2, [pc, #276]	; (8000de0 <readall_inputs+0x364>)
 8000cca:	7813      	ldrb	r3, [r2, #0]
 8000ccc:	f361 0382 	bfi	r3, r1, #2, #1
 8000cd0:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);			// Boardcomputer Reset Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd6:	483f      	ldr	r0, [pc, #252]	; (8000dd4 <readall_inputs+0x358>)
 8000cd8:	f002 fd50 	bl	800377c <HAL_GPIO_ReadPin>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	b2d9      	uxtb	r1, r3
 8000ce4:	4a3e      	ldr	r2, [pc, #248]	; (8000de0 <readall_inputs+0x364>)
 8000ce6:	7813      	ldrb	r3, [r2, #0]
 8000ce8:	f361 03c3 	bfi	r3, r1, #3, #1
 8000cec:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);					// Boardcomputer Rauf Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cf2:	4839      	ldr	r0, [pc, #228]	; (8000dd8 <readall_inputs+0x35c>)
 8000cf4:	f002 fd42 	bl	800377c <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	b2d9      	uxtb	r1, r3
 8000d00:	4a37      	ldr	r2, [pc, #220]	; (8000de0 <readall_inputs+0x364>)
 8000d02:	7813      	ldrb	r3, [r2, #0]
 8000d04:	f361 1304 	bfi	r3, r1, #4, #1
 8000d08:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);				// Boardcomputer Runter Eingang, Steuerung Motorsteuergeraet oder Kombiinstrument
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	482c      	ldr	r0, [pc, #176]	; (8000dc0 <readall_inputs+0x344>)
 8000d0e:	f002 fd35 	bl	800377c <HAL_GPIO_ReadPin>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	b2d9      	uxtb	r1, r3
 8000d1a:	4a31      	ldr	r2, [pc, #196]	; (8000de0 <readall_inputs+0x364>)
 8000d1c:	7813      	ldrb	r3, [r2, #0]
 8000d1e:	f361 1345 	bfi	r3, r1, #5, #1
 8000d22:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);				// Eingang Bamocar 1
 8000d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d28:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <readall_inputs+0x354>)
 8000d2a:	f002 fd27 	bl	800377c <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	4a2a      	ldr	r2, [pc, #168]	; (8000de0 <readall_inputs+0x364>)
 8000d38:	7813      	ldrb	r3, [r2, #0]
 8000d3a:	f361 1386 	bfi	r3, r1, #6, #1
 8000d3e:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);				// Eingang Bamocar 2
 8000d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d44:	4822      	ldr	r0, [pc, #136]	; (8000dd0 <readall_inputs+0x354>)
 8000d46:	f002 fd19 	bl	800377c <HAL_GPIO_ReadPin>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	b2d9      	uxtb	r1, r3
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <readall_inputs+0x364>)
 8000d54:	7813      	ldrb	r3, [r2, #0]
 8000d56:	f361 13c7 	bfi	r3, r1, #7, #1
 8000d5a:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);							// Encoder Taster Enter Eingang Mittelconsole
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	4821      	ldr	r0, [pc, #132]	; (8000de4 <readall_inputs+0x368>)
 8000d60:	f002 fd0c 	bl	800377c <HAL_GPIO_ReadPin>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	b2d9      	uxtb	r1, r3
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <readall_inputs+0x364>)
 8000d6e:	7853      	ldrb	r3, [r2, #1]
 8000d70:	f361 0300 	bfi	r3, r1, #0, #1
 8000d74:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);								// Encoder OUTA Eingang Mittelconsole
 8000d76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d7a:	4817      	ldr	r0, [pc, #92]	; (8000dd8 <readall_inputs+0x35c>)
 8000d7c:	f002 fcfe 	bl	800377c <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	b2d9      	uxtb	r1, r3
 8000d88:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <readall_inputs+0x364>)
 8000d8a:	7853      	ldrb	r3, [r2, #1]
 8000d8c:	f361 0341 	bfi	r3, r1, #1, #1
 8000d90:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);								// Encoder OUTB Eingang Mittelconsole
 8000d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <readall_inputs+0x35c>)
 8000d98:	f002 fcf0 	bl	800377c <HAL_GPIO_ReadPin>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	b2d9      	uxtb	r1, r3
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <readall_inputs+0x364>)
 8000da6:	7853      	ldrb	r3, [r2, #1]
 8000da8:	f361 0382 	bfi	r3, r1, #2, #1
 8000dac:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);								// Tempomat 1 Eingang
 8000dae:	2120      	movs	r1, #32
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <readall_inputs+0x358>)
 8000db2:	f002 fce3 	bl	800377c <HAL_GPIO_ReadPin>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	b2d9      	uxtb	r1, r3
 8000dbe:	e013      	b.n	8000de8 <readall_inputs+0x36c>
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	2000003c 	.word	0x2000003c
 8000dc8:	40021400 	.word	0x40021400
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40020c00 	.word	0x40020c00
 8000dd4:	40021800 	.word	0x40021800
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	20000044 	.word	0x20000044
 8000de0:	20000040 	.word	0x20000040
 8000de4:	40020800 	.word	0x40020800
 8000de8:	4a1d      	ldr	r2, [pc, #116]	; (8000e60 <readall_inputs+0x3e4>)
 8000dea:	7853      	ldrb	r3, [r2, #1]
 8000dec:	f361 03c3 	bfi	r3, r1, #3, #1
 8000df0:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);								// Tempomat 2 Eingang
 8000df2:	2140      	movs	r1, #64	; 0x40
 8000df4:	481b      	ldr	r0, [pc, #108]	; (8000e64 <readall_inputs+0x3e8>)
 8000df6:	f002 fcc1 	bl	800377c <HAL_GPIO_ReadPin>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f003 0301 	and.w	r3, r3, #1
 8000e00:	b2d9      	uxtb	r1, r3
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <readall_inputs+0x3e4>)
 8000e04:	7853      	ldrb	r3, [r2, #1]
 8000e06:	f361 1304 	bfi	r3, r1, #4, #1
 8000e0a:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);								// Tempomat 3 Eingang
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	4815      	ldr	r0, [pc, #84]	; (8000e64 <readall_inputs+0x3e8>)
 8000e10:	f002 fcb4 	bl	800377c <HAL_GPIO_ReadPin>
 8000e14:	4603      	mov	r3, r0
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	b2d9      	uxtb	r1, r3
 8000e1c:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <readall_inputs+0x3e4>)
 8000e1e:	7853      	ldrb	r3, [r2, #1]
 8000e20:	f361 1345 	bfi	r3, r1, #5, #1
 8000e24:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);								// Tempomat 4 Eingang
 8000e26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <readall_inputs+0x3e8>)
 8000e2c:	f002 fca6 	bl	800377c <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	b2d9      	uxtb	r1, r3
 8000e38:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <readall_inputs+0x3e4>)
 8000e3a:	7853      	ldrb	r3, [r2, #1]
 8000e3c:	f361 1386 	bfi	r3, r1, #6, #1
 8000e40:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);				// Durchflusssensor Eingang
 8000e42:	2120      	movs	r1, #32
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <readall_inputs+0x3ec>)
 8000e46:	f002 fc99 	bl	800377c <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	b2d9      	uxtb	r1, r3
 8000e52:	4a03      	ldr	r2, [pc, #12]	; (8000e60 <readall_inputs+0x3e4>)
 8000e54:	7853      	ldrb	r3, [r2, #1]
 8000e56:	f361 13c7 	bfi	r3, r1, #7, #1
 8000e5a:	7053      	strb	r3, [r2, #1]
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000040 	.word	0x20000040
 8000e64:	40021800 	.word	0x40021800
 8000e68:	40021000 	.word	0x40021000

08000e6c <millis>:
//----------------------------------------------------------------------
#include "millis.h"
//----------------------------------------------------------------------

uint32_t millis(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000e70:	f001 f858 	bl	8001f24 <HAL_GetTick>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8e:	4b64      	ldr	r3, [pc, #400]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000e90:	4a64      	ldr	r2, [pc, #400]	; (8001024 <MX_ADC1_Init+0x1a8>)
 8000e92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e94:	4b62      	ldr	r3, [pc, #392]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000e96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9c:	4b60      	ldr	r3, [pc, #384]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ea2:	4b5f      	ldr	r3, [pc, #380]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea8:	4b5d      	ldr	r3, [pc, #372]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eae:	4b5c      	ldr	r3, [pc, #368]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	4b5a      	ldr	r3, [pc, #360]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebc:	4b58      	ldr	r3, [pc, #352]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ebe:	4a5a      	ldr	r2, [pc, #360]	; (8001028 <MX_ADC1_Init+0x1ac>)
 8000ec0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec2:	4b57      	ldr	r3, [pc, #348]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8000ec8:	4b55      	ldr	r3, [pc, #340]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000eca:	220a      	movs	r2, #10
 8000ecc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ece:	4b54      	ldr	r3, [pc, #336]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed6:	4b52      	ldr	r3, [pc, #328]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000edc:	4850      	ldr	r0, [pc, #320]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000ede:	f001 f899 	bl	8002014 <HAL_ADC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ee8:	f000 fe48 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000eec:	230e      	movs	r3, #14
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	4848      	ldr	r0, [pc, #288]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000efe:	f001 f8cd 	bl	800209c <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f08:	f000 fe38 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4841      	ldr	r0, [pc, #260]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f1a:	f001 f8bf 	bl	800209c <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f24:	f000 fe2a 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f28:	2304      	movs	r3, #4
 8000f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4839      	ldr	r0, [pc, #228]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f3a:	f001 f8af 	bl	800209c <HAL_ADC_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000f44:	f000 fe1a 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4619      	mov	r1, r3
 8000f54:	4832      	ldr	r0, [pc, #200]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f56:	f001 f8a1 	bl	800209c <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000f60:	f000 fe0c 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000f64:	230f      	movs	r3, #15
 8000f66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	4619      	mov	r1, r3
 8000f74:	482a      	ldr	r0, [pc, #168]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f76:	f001 f891 	bl	800209c <HAL_ADC_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000f80:	f000 fdfc 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f84:	2303      	movs	r3, #3
 8000f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000f88:	2306      	movs	r3, #6
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	4822      	ldr	r0, [pc, #136]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000f96:	f001 f881 	bl	800209c <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8000fa0:	f000 fdec 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481b      	ldr	r0, [pc, #108]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000fb2:	f001 f873 	bl	800209c <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000fbc:	f000 fdde 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_ADC1_Init+0x1b0>)
 8000fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4814      	ldr	r0, [pc, #80]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000fce:	f001 f865 	bl	800209c <HAL_ADC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8000fd8:	f000 fdd0 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000fe0:	2309      	movs	r3, #9
 8000fe2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <MX_ADC1_Init+0x1a4>)
 8000fee:	f001 f855 	bl	800209c <HAL_ADC_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8000ff8:	f000 fdc0 	bl	8001b7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ffc:	2309      	movs	r3, #9
 8000ffe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001000:	230a      	movs	r3, #10
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_ADC1_Init+0x1a4>)
 800100a:	f001 f847 	bl	800209c <HAL_ADC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8001014:	f000 fdb2 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000058 	.word	0x20000058
 8001024:	40012000 	.word	0x40012000
 8001028:	0f000001 	.word	0x0f000001
 800102c:	10000012 	.word	0x10000012

08001030 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <HAL_ADC_MspInit+0xd4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d153      	bne.n	80010fa <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a2c      	ldr	r2, [pc, #176]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a26      	ldr	r2, [pc, #152]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a20      	ldr	r2, [pc, #128]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_ADC_MspInit+0xd8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 80010b2:	23f8      	movs	r3, #248	; 0xf8
 80010b4:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <HAL_ADC_MspInit+0xdc>)
 80010c6:	f002 f9ad 	bl	8003424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 80010ca:	2330      	movs	r3, #48	; 0x30
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <HAL_ADC_MspInit+0xe0>)
 80010de:	f002 f9a1 	bl	8003424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 80010e2:	2303      	movs	r3, #3
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4807      	ldr	r0, [pc, #28]	; (8001114 <HAL_ADC_MspInit+0xe4>)
 80010f6:	f002 f995 	bl	8003424 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010fa:	bf00      	nop
 80010fc:	3730      	adds	r7, #48	; 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40012000 	.word	0x40012000
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020800 	.word	0x40020800
 8001114:	40020400 	.word	0x40020400

08001118 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_CAN3_Init+0x64>)
 800111e:	4a18      	ldr	r2, [pc, #96]	; (8001180 <MX_CAN3_Init+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_CAN3_Init+0x64>)
 8001124:	2206      	movs	r2, #6
 8001126:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_CAN3_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_CAN3_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_CAN3_Init+0x64>)
 8001136:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800113a:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_CAN3_Init+0x64>)
 800113e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001142:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_CAN3_Init+0x64>)
 8001146:	2200      	movs	r2, #0
 8001148:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_CAN3_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <MX_CAN3_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_CAN3_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <MX_CAN3_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_CAN3_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <MX_CAN3_Init+0x64>)
 800116a:	f001 f9db 	bl	8002524 <HAL_CAN_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001174:	f000 fd02 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	200000a0 	.word	0x200000a0
 8001180:	40003400 	.word	0x40003400

08001184 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a27      	ldr	r2, [pc, #156]	; (8001240 <HAL_CAN_MspInit+0xbc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d148      	bne.n	8001238 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 80011a6:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a26      	ldr	r2, [pc, #152]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a20      	ldr	r2, [pc, #128]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a1a      	ldr	r2, [pc, #104]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a14      	ldr	r2, [pc, #80]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_CAN_MspInit+0xc0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001206:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001218:	230b      	movs	r3, #11
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <HAL_CAN_MspInit+0xc4>)
 8001224:	f002 f8fe 	bl	8003424 <HAL_GPIO_Init>

    /* CAN3 interrupt Init */
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	2069      	movs	r0, #105	; 0x69
 800122e:	f002 f8c2 	bl	80033b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001232:	2069      	movs	r0, #105	; 0x69
 8001234:	f002 f8db 	bl	80033ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40003400 	.word	0x40003400
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001262:	4bb6      	ldr	r3, [pc, #728]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4ab5      	ldr	r2, [pc, #724]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001268:	f043 0310 	orr.w	r3, r3, #16
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4bb3      	ldr	r3, [pc, #716]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0310 	and.w	r3, r3, #16
 8001276:	623b      	str	r3, [r7, #32]
 8001278:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	4bb0      	ldr	r3, [pc, #704]	; (800153c <MX_GPIO_Init+0x2f0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4aaf      	ldr	r2, [pc, #700]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4bad      	ldr	r3, [pc, #692]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	4baa      	ldr	r3, [pc, #680]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4aa9      	ldr	r2, [pc, #676]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4ba7      	ldr	r3, [pc, #668]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	4ba4      	ldr	r3, [pc, #656]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4aa3      	ldr	r2, [pc, #652]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4ba1      	ldr	r3, [pc, #644]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b9e      	ldr	r3, [pc, #632]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a9d      	ldr	r2, [pc, #628]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b9b      	ldr	r3, [pc, #620]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b98      	ldr	r3, [pc, #608]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a97      	ldr	r2, [pc, #604]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b95      	ldr	r3, [pc, #596]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f2:	4b92      	ldr	r3, [pc, #584]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a91      	ldr	r2, [pc, #580]	; (800153c <MX_GPIO_Init+0x2f0>)
 80012f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b8f      	ldr	r3, [pc, #572]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	4b8c      	ldr	r3, [pc, #560]	; (800153c <MX_GPIO_Init+0x2f0>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a8b      	ldr	r2, [pc, #556]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <MX_GPIO_Init+0x2f0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001322:	2200      	movs	r2, #0
 8001324:	f248 0187 	movw	r1, #32903	; 0x8087
 8001328:	4885      	ldr	r0, [pc, #532]	; (8001540 <MX_GPIO_Init+0x2f4>)
 800132a:	f002 fa3f 	bl	80037ac <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f242 0108 	movw	r1, #8200	; 0x2008
 8001334:	4883      	ldr	r0, [pc, #524]	; (8001544 <MX_GPIO_Init+0x2f8>)
 8001336:	f002 fa39 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800133a:	2200      	movs	r2, #0
 800133c:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8001340:	4881      	ldr	r0, [pc, #516]	; (8001548 <MX_GPIO_Init+0x2fc>)
 8001342:	f002 fa33 	bl	80037ac <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001346:	2200      	movs	r2, #0
 8001348:	f647 0194 	movw	r1, #30868	; 0x7894
 800134c:	487f      	ldr	r0, [pc, #508]	; (800154c <MX_GPIO_Init+0x300>)
 800134e:	f002 fa2d 	bl	80037ac <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001352:	2200      	movs	r2, #0
 8001354:	f64e 2188 	movw	r1, #60040	; 0xea88
 8001358:	487d      	ldr	r0, [pc, #500]	; (8001550 <MX_GPIO_Init+0x304>)
 800135a:	f002 fa27 	bl	80037ac <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 800135e:	2200      	movs	r2, #0
 8001360:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001364:	487b      	ldr	r0, [pc, #492]	; (8001554 <MX_GPIO_Init+0x308>)
 8001366:	f002 fa21 	bl	80037ac <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001370:	4879      	ldr	r0, [pc, #484]	; (8001558 <MX_GPIO_Init+0x30c>)
 8001372:	f002 fa1b 	bl	80037ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001376:	f248 0387 	movw	r3, #32903	; 0x8087
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	486c      	ldr	r0, [pc, #432]	; (8001540 <MX_GPIO_Init+0x2f4>)
 8001390:	f002 f848 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8001394:	f647 7378 	movw	r3, #32632	; 0x7f78
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4865      	ldr	r0, [pc, #404]	; (8001540 <MX_GPIO_Init+0x2f4>)
 80013aa:	f002 f83b 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80013ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	485f      	ldr	r0, [pc, #380]	; (8001544 <MX_GPIO_Init+0x2f8>)
 80013c8:	f002 f82c 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80013cc:	f64d 7347 	movw	r3, #57159	; 0xdf47
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d2:	2303      	movs	r3, #3
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	4858      	ldr	r0, [pc, #352]	; (8001544 <MX_GPIO_Init+0x2f8>)
 80013e2:	f002 f81f 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 80013e6:	f640 0303 	movw	r3, #2051	; 0x803
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	4853      	ldr	r0, [pc, #332]	; (8001548 <MX_GPIO_Init+0x2fc>)
 80013fc:	f002 f812 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001400:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	484b      	ldr	r0, [pc, #300]	; (8001548 <MX_GPIO_Init+0x2fc>)
 800141a:	f002 f803 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 800141e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001424:	2303      	movs	r3, #3
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001430:	4619      	mov	r1, r3
 8001432:	4845      	ldr	r0, [pc, #276]	; (8001548 <MX_GPIO_Init+0x2fc>)
 8001434:	f001 fff6 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8001438:	2308      	movs	r3, #8
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2302      	movs	r3, #2
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	483d      	ldr	r0, [pc, #244]	; (8001544 <MX_GPIO_Init+0x2f8>)
 8001450:	f001 ffe8 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8001454:	f640 6307 	movw	r3, #3591	; 0xe07
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	483b      	ldr	r0, [pc, #236]	; (8001558 <MX_GPIO_Init+0x30c>)
 800146a:	f001 ffdb 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800146e:	f647 0394 	movw	r3, #30868	; 0x7894
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001474:	2301      	movs	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147c:	2300      	movs	r3, #0
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	4619      	mov	r1, r3
 8001486:	4831      	ldr	r0, [pc, #196]	; (800154c <MX_GPIO_Init+0x300>)
 8001488:	f001 ffcc 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 800148c:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	482c      	ldr	r0, [pc, #176]	; (8001554 <MX_GPIO_Init+0x308>)
 80014a2:	f001 ffbf 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 80014a6:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4824      	ldr	r0, [pc, #144]	; (800154c <MX_GPIO_Init+0x300>)
 80014bc:	f001 ffb2 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 80014c0:	f241 5310 	movw	r3, #5392	; 0x1510
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	481e      	ldr	r0, [pc, #120]	; (8001550 <MX_GPIO_Init+0x304>)
 80014d6:	f001 ffa5 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80014da:	f64e 2388 	movw	r3, #60040	; 0xea88
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4817      	ldr	r0, [pc, #92]	; (8001550 <MX_GPIO_Init+0x304>)
 80014f4:	f001 ff96 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80014f8:	f64e 630c 	movw	r3, #60940	; 0xee0c
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4810      	ldr	r0, [pc, #64]	; (8001554 <MX_GPIO_Init+0x308>)
 8001512:	f001 ff87 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <MX_GPIO_Init+0x2f8>)
 800152a:	f001 ff7b 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	e00f      	b.n	800155c <MX_GPIO_Init+0x310>
 800153c:	40023800 	.word	0x40023800
 8001540:	40021000 	.word	0x40021000
 8001544:	40020800 	.word	0x40020800
 8001548:	40021400 	.word	0x40021400
 800154c:	40020400 	.word	0x40020400
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021800 	.word	0x40021800
 8001558:	40020000 	.word	0x40020000
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	480f      	ldr	r0, [pc, #60]	; (80015a8 <MX_GPIO_Init+0x35c>)
 800156a:	f001 ff5b 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 800156e:	2307      	movs	r3, #7
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001572:	2303      	movs	r3, #3
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <MX_GPIO_Init+0x360>)
 8001582:	f001 ff4f 	bl	8003424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001586:	f44f 7358 	mov.w	r3, #864	; 0x360
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800158c:	2303      	movs	r3, #3
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_GPIO_Init+0x364>)
 800159c:	f001 ff42 	bl	8003424 <HAL_GPIO_Init>

}
 80015a0:	bf00      	nop
 80015a2:	3738      	adds	r7, #56	; 0x38
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40020400 	.word	0x40020400

080015b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b4:	b5b0      	push	{r4, r5, r7, lr}
 80015b6:	b0ac      	sub	sp, #176	; 0xb0
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ba:	f000 fc62 	bl	8001e82 <HAL_Init>

  /* USER CODE BEGIN Init */

	// Definiere Variablen fuer Main-Funktion
	uint8_t TxData[8], OutData[5], InData[5], status;
	uint16_t count = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
  	uint32_t lastcan = 0, lastsendcan = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  	CAN_FilterTypeDef sFilterConfig;

  	// Erstelle Can-Nachrichten
  	CAN_TxHeaderTypeDef TxMessage = {0x123, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 80015d0:	4bbd      	ldr	r3, [pc, #756]	; (80018c8 <main+0x314>)
 80015d2:	f107 0448 	add.w	r4, r7, #72	; 0x48
 80015d6:	461d      	mov	r5, r3
 80015d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015e0:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxOutput = {MOTOR_CAN_DIGITAL_OUT, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 80015e4:	4bb9      	ldr	r3, [pc, #740]	; (80018cc <main+0x318>)
 80015e6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80015ea:	461d      	mov	r5, r3
 80015ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80015f4:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxInput = {MOTOR_CAN_DIGITAL_IN, 0, CAN_RTR_DATA, CAN_ID_STD, 5, DISABLE};
 80015f8:	4bb5      	ldr	r3, [pc, #724]	; (80018d0 <main+0x31c>)
 80015fa:	f107 0418 	add.w	r4, r7, #24
 80015fe:	461d      	mov	r5, r3
 8001600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001604:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001608:	e884 0003 	stmia.w	r4, {r0, r1}
  	CAN_TxHeaderTypeDef TxMotor1 = {MOTOR_CAN_DREHZAHL, 0, CAN_RTR_DATA, CAN_ID_STD, 8, DISABLE};
 800160c:	4bb1      	ldr	r3, [pc, #708]	; (80018d4 <main+0x320>)
 800160e:	463c      	mov	r4, r7
 8001610:	461d      	mov	r5, r3
 8001612:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001616:	e895 0003 	ldmia.w	r5, {r0, r1}
 800161a:	e884 0003 	stmia.w	r4, {r0, r1}

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f9ef 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f7ff fe13 	bl	800124c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001626:	f000 fb8f 	bl	8001d48 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 800162a:	f7ff fd75 	bl	8001118 <MX_CAN3_Init>
  MX_ADC1_Init();
 800162e:	f7ff fc25 	bl	8000e7c <MX_ADC1_Init>
  MX_TIM6_Init();
 8001632:	f000 fb2d 	bl	8001c90 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 8001636:	f7ff f92f 	bl	8000898 <readResetSource>
 800163a:	4603      	mov	r3, r0
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff f97d 	bl	800093c <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART	"\nUART3 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 8001642:	213a      	movs	r1, #58	; 0x3a
 8001644:	48a4      	ldr	r0, [pc, #656]	; (80018d8 <main+0x324>)
 8001646:	f7fe ffab 	bl	80005a0 <uartTransmit>

  	/* Sammel Systeminformationen */
  	collectSystemInfo();
 800164a:	f7ff f903 	bl	8000854 <collectSystemInfo>
#endif

  	// Leds Testen
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	48a2      	ldr	r0, [pc, #648]	; (80018dc <main+0x328>)
 8001654:	f002 f8aa 	bl	80037ac <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8001658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165c:	f000 fc6e 	bl	8001f3c <HAL_Delay>
    HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	489d      	ldr	r0, [pc, #628]	; (80018dc <main+0x328>)
 8001666:	f002 f8a1 	bl	80037ac <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800166a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166e:	f000 fc65 	bl	8001f3c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001678:	4898      	ldr	r0, [pc, #608]	; (80018dc <main+0x328>)
 800167a:	f002 f897 	bl	80037ac <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800167e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001682:	f000 fc5b 	bl	8001f3c <HAL_Delay>
    HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168c:	4893      	ldr	r0, [pc, #588]	; (80018dc <main+0x328>)
 800168e:	f002 f88d 	bl	80037ac <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8001692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001696:	f000 fc51 	bl	8001f3c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800169a:	2201      	movs	r2, #1
 800169c:	2104      	movs	r1, #4
 800169e:	488f      	ldr	r0, [pc, #572]	; (80018dc <main+0x328>)
 80016a0:	f002 f884 	bl	80037ac <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 80016a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016a8:	f000 fc48 	bl	8001f3c <HAL_Delay>
    HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2104      	movs	r1, #4
 80016b0:	488a      	ldr	r0, [pc, #552]	; (80018dc <main+0x328>)
 80016b2:	f002 f87b 	bl	80037ac <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80016b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ba:	f000 fc3f 	bl	8001f3c <HAL_Delay>

  	/* Lese alle Eingaenge */
  	readall_inputs();
 80016be:	f7ff f9dd 	bl	8000a7c <readall_inputs>

  	// Starte CAN Bus
  	if((status = HAL_CAN_Start(&hcan3)) != HAL_OK)
 80016c2:	4887      	ldr	r0, [pc, #540]	; (80018e0 <main+0x32c>)
 80016c4:	f001 f916 	bl	80028f4 <HAL_CAN_Start>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 80016ce:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d006      	beq.n	80016e4 <main+0x130>
  	{
  		/* Start Error */
  		hal_error(status);
 80016d6:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f99e 	bl	8000a1c <hal_error>
  		Error_Handler();
 80016e0:	f000 fa4c 	bl	8001b7c <Error_Handler>
  	}
  	uartTransmit("CAN START\n", 10);
 80016e4:	210a      	movs	r1, #10
 80016e6:	487f      	ldr	r0, [pc, #508]	; (80018e4 <main+0x330>)
 80016e8:	f7fe ff5a 	bl	80005a0 <uartTransmit>

  	// Aktiviere Interrupts für CAN Bus
  	if((status = HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING)) != HAL_OK)
 80016ec:	2102      	movs	r1, #2
 80016ee:	487c      	ldr	r0, [pc, #496]	; (80018e0 <main+0x32c>)
 80016f0:	f001 fb31 	bl	8002d56 <HAL_CAN_ActivateNotification>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 80016fa:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <main+0x15c>
  	{
  		/* Notification Error */
  		hal_error(status);
 8001702:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f988 	bl	8000a1c <hal_error>
  		Error_Handler();
 800170c:	f000 fa36 	bl	8001b7c <Error_Handler>
  	}
  	uartTransmit("Send Message\n", 13);
 8001710:	210d      	movs	r1, #13
 8001712:	4875      	ldr	r0, [pc, #468]	; (80018e8 <main+0x334>)
 8001714:	f7fe ff44 	bl	80005a0 <uartTransmit>

  	// Filter Bank initialisieren um Daten zu empfangen
    sFilterConfig.FilterBank = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	677b      	str	r3, [r7, #116]	; 0x74
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800171c:	2300      	movs	r3, #0
 800171e:	67bb      	str	r3, [r7, #120]	; 0x78
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001720:	2301      	movs	r3, #1
 8001722:	67fb      	str	r3, [r7, #124]	; 0x7c
    sFilterConfig.FilterIdHigh = 0x0000;
 8001724:	2300      	movs	r3, #0
 8001726:	663b      	str	r3, [r7, #96]	; 0x60
    sFilterConfig.FilterIdLow = 0x0000;
 8001728:	2300      	movs	r3, #0
 800172a:	667b      	str	r3, [r7, #100]	; 0x64
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 800172c:	2300      	movs	r3, #0
 800172e:	66bb      	str	r3, [r7, #104]	; 0x68
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8001730:	2300      	movs	r3, #0
 8001732:	66fb      	str	r3, [r7, #108]	; 0x6c
    sFilterConfig.FilterFIFOAssignment = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	673b      	str	r3, [r7, #112]	; 0x70
    sFilterConfig.FilterActivation = ENABLE;
 8001738:	2301      	movs	r3, #1
 800173a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // Filter Bank schreiben
    if((status = HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig)) != HAL_OK)
 800173e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001742:	4619      	mov	r1, r3
 8001744:	4866      	ldr	r0, [pc, #408]	; (80018e0 <main+0x32c>)
 8001746:	f000 ffe9 	bl	800271c <HAL_CAN_ConfigFilter>
 800174a:	4603      	mov	r3, r0
 800174c:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
 8001750:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <main+0x1b2>
    {
    	/* Filter configuration Error */
  		hal_error(status);
 8001758:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff f95d 	bl	8000a1c <hal_error>
  		Error_Handler();
 8001762:	f000 fa0b 	bl	8001b7c <Error_Handler>
	TxMotor1.RTR = CAN_RTR_DATA;
	TxMotor1.IDE = CAN_ID_STD;
	TxMotor1.DLC = 8;
	TxMotor1.TransmitGlobalTime=DISABLE;*/

  	for (uint8_t j = 0; j < 8; j++)
 8001766:	2300      	movs	r3, #0
 8001768:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 800176c:	e00f      	b.n	800178e <main+0x1da>
  		TxData[j] = (j + 1);
 800176e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001772:	f897 20a3 	ldrb.w	r2, [r7, #163]	; 0xa3
 8001776:	3201      	adds	r2, #1
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800177e:	440b      	add	r3, r1
 8001780:	f803 2c18 	strb.w	r2, [r3, #-24]
  	for (uint8_t j = 0; j < 8; j++)
 8001784:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001788:	3301      	adds	r3, #1
 800178a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 800178e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001792:	2b07      	cmp	r3, #7
 8001794:	d9eb      	bls.n	800176e <main+0x1ba>

  	// Start timer
  	HAL_TIM_Base_Start(&htim6);
 8001796:	4855      	ldr	r0, [pc, #340]	; (80018ec <main+0x338>)
 8001798:	f003 f976 	bl	8004a88 <HAL_TIM_Base_Start>

  	uartTransmit("\nStarte While\n\n", 15);
 800179c:	210f      	movs	r1, #15
 800179e:	4854      	ldr	r0, [pc, #336]	; (80018f0 <main+0x33c>)
 80017a0:	f7fe fefe 	bl	80005a0 <uartTransmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	// Task wird jede Millisekunde ausgefuehrt
		if (millisekunden_flag_1 == 1)
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <main+0x340>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <main+0x20a>
		{
			count++;													// Zähle count hoch
 80017ae:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80017b2:	3301      	adds	r3, #1
 80017b4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
			millisekunden_flag_1 = 0;									// Setze Millisekunden-Flag zurück
 80017b8:	4b4e      	ldr	r3, [pc, #312]	; (80018f4 <main+0x340>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
		}

		// Task wird alle 20 Millisekunden ausgefueht
		if (count == 20)
 80017be:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80017c2:	2b14      	cmp	r3, #20
 80017c4:	d10d      	bne.n	80017e2 <main+0x22e>
		{
			// Sende Nachricht Motor1
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMotor1, motor1.output, (uint32_t *)CAN_TX_MAILBOX0);
 80017c6:	4639      	mov	r1, r7
 80017c8:	2301      	movs	r3, #1
 80017ca:	4a4b      	ldr	r2, [pc, #300]	; (80018f8 <main+0x344>)
 80017cc:	4844      	ldr	r0, [pc, #272]	; (80018e0 <main+0x32c>)
 80017ce:	f001 f8d5 	bl	800297c <HAL_CAN_AddTxMessage>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			hal_error(status);
 80017d8:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff f91d 	bl	8000a1c <hal_error>
		}

		// Task wird alle 200 Millisekunden ausgefueht
		if (count == 200)
 80017e2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80017e6:	2bc8      	cmp	r3, #200	; 0xc8
 80017e8:	d153      	bne.n	8001892 <main+0x2de>
		{
			// Daten fuer Ausgaenge zusammenfuehren
			OutData[0] = system_out.systemoutput;
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <main+0x348>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			OutData[1] = highcurrent_out.high_out;
 80017f2:	4b43      	ldr	r3, [pc, #268]	; (8001900 <main+0x34c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
			OutData[2] = (leuchten_out.ledoutput >> 8);
 80017fa:	4b42      	ldr	r3, [pc, #264]	; (8001904 <main+0x350>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	0a1b      	lsrs	r3, r3, #8
 8001800:	b29b      	uxth	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			OutData[3] = leuchten_out.ledoutput;
 8001808:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <main+0x350>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			OutData[4] = komfort_out.komfortoutput;
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <main+0x354>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

			// Sende Nachricht digitale Ausgaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxOutput, OutData, (uint32_t *)CAN_TX_MAILBOX0);
 800181a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800181e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001822:	2301      	movs	r3, #1
 8001824:	482e      	ldr	r0, [pc, #184]	; (80018e0 <main+0x32c>)
 8001826:	f001 f8a9 	bl	800297c <HAL_CAN_AddTxMessage>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			hal_error(status);
 8001830:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f8f1 	bl	8000a1c <hal_error>

			// Daten fuer Eingaenge zusammenfuehren
			InData[0] = (system_in.systeminput >> 8);
 800183a:	4b34      	ldr	r3, [pc, #208]	; (800190c <main+0x358>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	b29b      	uxth	r3, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			InData[1] = system_in.systeminput;
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <main+0x358>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			InData[2] = sdc_in.sdcinput;
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <main+0x35c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			InData[3] = (komfort_in.komfortinput >> 8);
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <main+0x360>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	b29b      	uxth	r3, r3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			InData[4] = komfort_in.komfortinput;
 8001868:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <main+0x360>)
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

			// Sende Nachricht digitale Eingaenge
			status = HAL_CAN_AddTxMessage(&hcan3, &TxInput, InData, (uint32_t *)CAN_TX_MAILBOX0);
 8001872:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001876:	f107 0118 	add.w	r1, r7, #24
 800187a:	2301      	movs	r3, #1
 800187c:	4818      	ldr	r0, [pc, #96]	; (80018e0 <main+0x32c>)
 800187e:	f001 f87d 	bl	800297c <HAL_CAN_AddTxMessage>
 8001882:	4603      	mov	r3, r0
 8001884:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			hal_error(status);
 8001888:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f8c5 	bl	8000a1c <hal_error>
		}

	  	// Task wird alle 5 Millisekunden ausgefuehrt
	  	if (millis() - lastcan >= 5)
 8001892:	f7ff faeb 	bl	8000e6c <millis>
 8001896:	4602      	mov	r2, r0
 8001898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d97e      	bls.n	80019a0 <main+0x3ec>
		{
			// Wenn Nachricht über den CAN-Bus empfangen wurde
			if (can_change == 1)
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <main+0x364>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d17a      	bne.n	80019a0 <main+0x3ec>
			{
				// Nachricht ID über UART ausgeben
				uartTransmitNumber(RxMessage.StdId, 16);
 80018aa:	4b1c      	ldr	r3, [pc, #112]	; (800191c <main+0x368>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2110      	movs	r1, #16
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe89 	bl	80005c8 <uartTransmitNumber>
				uartTransmit("\t", 1);
 80018b6:	2101      	movs	r1, #1
 80018b8:	4819      	ldr	r0, [pc, #100]	; (8001920 <main+0x36c>)
 80018ba:	f7fe fe71 	bl	80005a0 <uartTransmit>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 80018c4:	e03b      	b.n	800193e <main+0x38a>
 80018c6:	bf00      	nop
 80018c8:	08005e08 	.word	0x08005e08
 80018cc:	08005e20 	.word	0x08005e20
 80018d0:	08005e38 	.word	0x08005e38
 80018d4:	08005e50 	.word	0x08005e50
 80018d8:	08005d64 	.word	0x08005d64
 80018dc:	40020400 	.word	0x40020400
 80018e0:	200000a0 	.word	0x200000a0
 80018e4:	08005da0 	.word	0x08005da0
 80018e8:	08005dac 	.word	0x08005dac
 80018ec:	200000ec 	.word	0x200000ec
 80018f0:	08005dbc 	.word	0x08005dbc
 80018f4:	20000029 	.word	0x20000029
 80018f8:	20000034 	.word	0x20000034
 80018fc:	2000004c 	.word	0x2000004c
 8001900:	20000050 	.word	0x20000050
 8001904:	20000054 	.word	0x20000054
 8001908:	20000048 	.word	0x20000048
 800190c:	2000003c 	.word	0x2000003c
 8001910:	20000044 	.word	0x20000044
 8001914:	20000040 	.word	0x20000040
 8001918:	20000028 	.word	0x20000028
 800191c:	200000d0 	.word	0x200000d0
 8001920:	08005dcc 	.word	0x08005dcc
				{
					uartTransmitNumber(RxData[i], 16);
 8001924:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8001928:	4a2d      	ldr	r2, [pc, #180]	; (80019e0 <main+0x42c>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	2110      	movs	r1, #16
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe4a 	bl	80005c8 <uartTransmitNumber>
				for (uint8_t i = 0; i < RxMessage.DLC; i++)
 8001934:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8001938:	3301      	adds	r3, #1
 800193a:	f887 30a2 	strb.w	r3, [r7, #162]	; 0xa2
 800193e:	f897 20a2 	ldrb.w	r2, [r7, #162]	; 0xa2
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <main+0x430>)
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3ec      	bcc.n	8001924 <main+0x370>
				}
				uartTransmit("\n", 1);
 800194a:	2101      	movs	r1, #1
 800194c:	4826      	ldr	r0, [pc, #152]	; (80019e8 <main+0x434>)
 800194e:	f7fe fe27 	bl	80005a0 <uartTransmit>

				// Sortieren der IDs nach Geräten
				switch (RxMessage.StdId)
 8001952:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <main+0x430>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f240 1211 	movw	r2, #273	; 0x111
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <main+0x3ba>
 800195e:	f240 1281 	movw	r2, #385	; 0x181
 8001962:	4293      	cmp	r3, r2
 8001964:	d108      	bne.n	8001978 <main+0x3c4>
				{
					case BAMOCAR_RX_ID:
						BAMOCAN_ID(&RxData[0]);
 8001966:	481e      	ldr	r0, [pc, #120]	; (80019e0 <main+0x42c>)
 8001968:	f7fe fdea 	bl	8000540 <BAMOCAN_ID>
						break;
 800196c:	e009      	b.n	8001982 <main+0x3ce>
					case 0x111:
						uartTransmit("CAN-ID Computer config\n", 23);
 800196e:	2117      	movs	r1, #23
 8001970:	481e      	ldr	r0, [pc, #120]	; (80019ec <main+0x438>)
 8001972:	f7fe fe15 	bl	80005a0 <uartTransmit>
						break;
 8001976:	e004      	b.n	8001982 <main+0x3ce>
					default:
						uartTransmit("CAN-ID nicht verfuegbar\n", 24);
 8001978:	2118      	movs	r1, #24
 800197a:	481d      	ldr	r0, [pc, #116]	; (80019f0 <main+0x43c>)
 800197c:	f7fe fe10 	bl	80005a0 <uartTransmit>
						break;
 8001980:	bf00      	nop
				}

				TxData[2] = motor1.output[2];
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <main+0x440>)
 8001984:	789b      	ldrb	r3, [r3, #2]
 8001986:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
				TxData[3] = motor1.output[3];
 800198a:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <main+0x440>)
 800198c:	78db      	ldrb	r3, [r3, #3]
 800198e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
				lastcan = millis();
 8001992:	f7ff fa6b 	bl	8000e6c <millis>
 8001996:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
				can_change = 0;
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <main+0x444>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
			}
		}

		// Sende CAN Nachricht auf CAN-Bus
		if (millis() - lastsendcan >= 993)
 80019a0:	f7ff fa64 	bl	8000e6c <millis>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f5b3 7f78 	cmp.w	r3, #992	; 0x3e0
 80019b0:	f67f aef8 	bls.w	80017a4 <main+0x1f0>
		{
			status = HAL_CAN_AddTxMessage(&hcan3, &TxMessage, TxData, (uint32_t *)CAN_TX_MAILBOX0);
 80019b4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80019b8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80019bc:	2301      	movs	r3, #1
 80019be:	480f      	ldr	r0, [pc, #60]	; (80019fc <main+0x448>)
 80019c0:	f000 ffdc 	bl	800297c <HAL_CAN_AddTxMessage>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
			hal_error(status);
 80019ca:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f824 	bl	8000a1c <hal_error>
			lastsendcan = millis();
 80019d4:	f7ff fa4a 	bl	8000e6c <millis>
 80019d8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		if (millisekunden_flag_1 == 1)
 80019dc:	e6e2      	b.n	80017a4 <main+0x1f0>
 80019de:	bf00      	nop
 80019e0:	200000c8 	.word	0x200000c8
 80019e4:	200000d0 	.word	0x200000d0
 80019e8:	08005dd0 	.word	0x08005dd0
 80019ec:	08005dd4 	.word	0x08005dd4
 80019f0:	08005dec 	.word	0x08005dec
 80019f4:	20000034 	.word	0x20000034
 80019f8:	20000028 	.word	0x20000028
 80019fc:	200000a0 	.word	0x200000a0

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0b8      	sub	sp, #224	; 0xe0
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a0a:	2234      	movs	r2, #52	; 0x34
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f004 f80e 	bl	8005a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	2290      	movs	r2, #144	; 0x90
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f003 ffff 	bl	8005a30 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <SystemClock_Config+0x118>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a38      	ldr	r2, [pc, #224]	; (8001b18 <SystemClock_Config+0x118>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <SystemClock_Config+0x118>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a4a:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <SystemClock_Config+0x11c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a52:	4a32      	ldr	r2, [pc, #200]	; (8001b1c <SystemClock_Config+0x11c>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <SystemClock_Config+0x11c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a74:	2302      	movs	r3, #2
 8001a76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a82:	2319      	movs	r3, #25
 8001a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001a88:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 feed 	bl	8003880 <HAL_RCC_OscConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001aac:	f000 f866 	bl	8001b7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ab0:	f001 fe96 	bl	80037e0 <HAL_PWREx_EnableOverDrive>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001aba:	f000 f85f 	bl	8001b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001abe:	230f      	movs	r3, #15
 8001ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ade:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f002 f979 	bl	8003ddc <HAL_RCC_ClockConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001af0:	f000 f844 	bl	8001b7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afc:	f107 0308 	add.w	r3, r7, #8
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 fb41 	bl	8004188 <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001b0c:	f000 f836 	bl	8001b7c <Error_Handler>
  }
}
 8001b10:	bf00      	nop
 8001b12:	37e0      	adds	r7, #224	; 0xe0
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40007000 	.word	0x40007000

08001b20 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
// Interrupts
// Can-Interrupt: Nachricht wartet
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxMessage, RxData);
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 ffff 	bl	8002b32 <HAL_CAN_GetRxMessage>
	can_change = 1;
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200000c8 	.word	0x200000c8
 8001b48:	200000d0 	.word	0x200000d0
 8001b4c:	20000028 	.word	0x20000028

08001b50 <HAL_TIM_PeriodElapsedCallback>:

// Timer-Interrupt: Timer ist uebergelaufen
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	// Kontrolliere welcher Timer den Ueberlauf ausgeloest hat
	if (htim == &htim6)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d102      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		millisekunden_flag_1 = 1;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
	}
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	200000ec 	.word	0x200000ec
 8001b78:	20000029 	.word	0x20000029

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2104      	movs	r1, #4
 8001b88:	4803      	ldr	r0, [pc, #12]	; (8001b98 <Error_Handler+0x1c>)
 8001b8a:	f001 fe0f 	bl	80037ac <HAL_GPIO_WritePin>
#ifdef DEBUG
#define ERRORMESSAGE			"\nError Handler ausgeloest\n"
  uartTransmit(ERRORMESSAGE,sizeof(ERRORMESSAGE));
 8001b8e:	211b      	movs	r1, #27
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <Error_Handler+0x20>)
 8001b92:	f7fe fd05 	bl	80005a0 <uartTransmit>
#endif
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <Error_Handler+0x1a>
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	08005e68 	.word	0x08005e68

08001ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_MspInit+0x44>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_MspInit+0x44>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_MspInit+0x44>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_MspInit+0x44>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4a08      	ldr	r2, [pc, #32]	; (8001be4 <HAL_MspInit+0x44>)
 8001bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_MspInit+0x44>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f962 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM6_DAC_IRQHandler+0x10>)
 8001c42:	f002 ff91 	bl	8004b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200000ec 	.word	0x200000ec

08001c50 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <CAN3_RX0_IRQHandler+0x10>)
 8001c56:	f001 f8a4 	bl	8002da2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200000a0 	.word	0x200000a0

08001c64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <SystemInit+0x28>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <SystemInit+0x28>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SystemInit+0x28>)
 8001c7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001ca2:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <MX_TIM6_Init+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001ca8:	2205      	movs	r2, #5
 8001caa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001cb2:	4b10      	ldr	r3, [pc, #64]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cc0:	480c      	ldr	r0, [pc, #48]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cc2:	f002 fe89 	bl	80049d8 <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ccc:	f7ff ff56 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <MX_TIM6_Init+0x64>)
 8001cde:	f003 f92b 	bl	8004f38 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ce8:	f7ff ff48 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200000ec 	.word	0x200000ec
 8001cf8:	40001000 	.word	0x40001000

08001cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_TIM_Base_MspInit+0x44>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d113      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_TIM_Base_MspInit+0x48>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_TIM_Base_MspInit+0x48>)
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_TIM_Base_MspInit+0x48>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f001 fb43 	bl	80033b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d30:	2036      	movs	r0, #54	; 0x36
 8001d32:	f001 fb5c 	bl	80033ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40001000 	.word	0x40001000
 8001d44:	40023800 	.word	0x40023800

08001d48 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d4e:	4a15      	ldr	r2, [pc, #84]	; (8001da4 <MX_USART2_UART_Init+0x5c>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d52:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d8a:	4805      	ldr	r0, [pc, #20]	; (8001da0 <MX_USART2_UART_Init+0x58>)
 8001d8c:	f003 f980 	bl	8005090 <HAL_UART_Init>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d96:	f7ff fef1 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000138 	.word	0x20000138
 8001da4:	40004400 	.word	0x40004400

08001da8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_UART_MspInit+0x7c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d127      	bne.n	8001e1a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_UART_MspInit+0x80>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8001dfa:	2360      	movs	r3, #96	; 0x60
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_UART_MspInit+0x84>)
 8001e16:	f001 fb05 	bl	8003424 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40004400 	.word	0x40004400
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020c00 	.word	0x40020c00

08001e30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e36:	e003      	b.n	8001e40 <LoopCopyDataInit>

08001e38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e3e:	3104      	adds	r1, #4

08001e40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e40:	480b      	ldr	r0, [pc, #44]	; (8001e70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e42:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e48:	d3f6      	bcc.n	8001e38 <CopyDataInit>
  ldr  r2, =_sbss
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e4c:	e002      	b.n	8001e54 <LoopFillZerobss>

08001e4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e50:	f842 3b04 	str.w	r3, [r2], #4

08001e54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e58:	d3f9      	bcc.n	8001e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e5a:	f7ff ff03 	bl	8001c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e5e:	f003 fdc3 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e62:	f7ff fba7 	bl	80015b4 <main>
  bx  lr    
 8001e66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e68:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001e6c:	08005ed4 	.word	0x08005ed4
  ldr  r0, =_sdata
 8001e70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e74:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001e78:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001e7c:	200001c0 	.word	0x200001c0

08001e80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e80:	e7fe      	b.n	8001e80 <ADC_IRQHandler>

08001e82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e86:	2003      	movs	r0, #3
 8001e88:	f001 fa8a 	bl	80033a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f000 f805 	bl	8001e9c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001e92:	f7ff fe85 	bl	8001ba0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 faa5 	bl	800340a <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f001 fa6d 	bl	80033b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	200001bc 	.word	0x200001bc

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	200001bc 	.word	0x200001bc

08001f3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f44:	f7ff ffee 	bl	8001f24 <HAL_GetTick>
 8001f48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f54:	d005      	beq.n	8001f62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_Delay+0x44>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f62:	bf00      	nop
 8001f64:	f7ff ffde 	bl	8001f24 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d8f7      	bhi.n	8001f64 <HAL_Delay+0x28>
  {
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008

08001f84 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <HAL_GetHalVersion+0x10>)
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	01020900 	.word	0x01020900

08001f98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_GetREVID+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e0042000 	.word	0xe0042000

08001fb0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001fb4:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_GetDEVID+0x18>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e0042000 	.word	0xe0042000

08001fcc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_GetUIDw0+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	1ff0f420 	.word	0x1ff0f420

08001fe4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetUIDw1+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	1ff0f424 	.word	0x1ff0f424

08001ffc <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_GetUIDw2+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	1ff0f428 	.word	0x1ff0f428

08002014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e031      	b.n	800208e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7fe fffc 	bl	8001030 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <HAL_ADC_Init+0x84>)
 8002058:	4013      	ands	r3, r2
 800205a:	f043 0202 	orr.w	r2, r3, #2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f964 	bl	8002330 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f023 0303 	bic.w	r3, r3, #3
 8002076:	f043 0201 	orr.w	r2, r3, #1
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
 800207e:	e001      	b.n	8002084 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	ffffeefd 	.word	0xffffeefd

0800209c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x1c>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e12a      	b.n	800230e <HAL_ADC_ConfigChannel+0x272>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b09      	cmp	r3, #9
 80020c6:	d93a      	bls.n	800213e <HAL_ADC_ConfigChannel+0xa2>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020d0:	d035      	beq.n	800213e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68d9      	ldr	r1, [r3, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	3b1e      	subs	r3, #30
 80020e8:	2207      	movs	r2, #7
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a87      	ldr	r2, [pc, #540]	; (800231c <HAL_ADC_ConfigChannel+0x280>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68d9      	ldr	r1, [r3, #12]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	061a      	lsls	r2, r3, #24
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002116:	e035      	b.n	8002184 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68d9      	ldr	r1, [r3, #12]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	4618      	mov	r0, r3
 800212a:	4603      	mov	r3, r0
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4403      	add	r3, r0
 8002130:	3b1e      	subs	r3, #30
 8002132:	409a      	lsls	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800213c:	e022      	b.n	8002184 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6919      	ldr	r1, [r3, #16]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	2207      	movs	r2, #7
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43da      	mvns	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	400a      	ands	r2, r1
 8002160:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6919      	ldr	r1, [r3, #16]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	4603      	mov	r3, r0
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4403      	add	r3, r0
 800217a:	409a      	lsls	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b06      	cmp	r3, #6
 800218a:	d824      	bhi.n	80021d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3b05      	subs	r3, #5
 800219e:	221f      	movs	r2, #31
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43da      	mvns	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	400a      	ands	r2, r1
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b05      	subs	r3, #5
 80021c8:	fa00 f203 	lsl.w	r2, r0, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34
 80021d4:	e04c      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d824      	bhi.n	8002228 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3b23      	subs	r3, #35	; 0x23
 80021f0:	221f      	movs	r2, #31
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	400a      	ands	r2, r1
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	4618      	mov	r0, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	3b23      	subs	r3, #35	; 0x23
 800221a:	fa00 f203 	lsl.w	r2, r0, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	631a      	str	r2, [r3, #48]	; 0x30
 8002226:	e023      	b.n	8002270 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b41      	subs	r3, #65	; 0x41
 800223a:	221f      	movs	r2, #31
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43da      	mvns	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	400a      	ands	r2, r1
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	3b41      	subs	r3, #65	; 0x41
 8002264:	fa00 f203 	lsl.w	r2, r0, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <HAL_ADC_ConfigChannel+0x284>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d10a      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1f4>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002282:	d105      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_ADC_ConfigChannel+0x288>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <HAL_ADC_ConfigChannel+0x288>)
 800228a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800228e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <HAL_ADC_ConfigChannel+0x284>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d109      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x212>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b12      	cmp	r3, #18
 80022a0:	d105      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_ADC_ConfigChannel+0x288>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	4a1f      	ldr	r2, [pc, #124]	; (8002324 <HAL_ADC_ConfigChannel+0x288>)
 80022a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022ac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_ADC_ConfigChannel+0x284>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d125      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x268>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a17      	ldr	r2, [pc, #92]	; (800231c <HAL_ADC_ConfigChannel+0x280>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d003      	beq.n	80022ca <HAL_ADC_ConfigChannel+0x22e>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b11      	cmp	r3, #17
 80022c8:	d11c      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <HAL_ADC_ConfigChannel+0x288>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_ADC_ConfigChannel+0x288>)
 80022d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022d4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a10      	ldr	r2, [pc, #64]	; (800231c <HAL_ADC_ConfigChannel+0x280>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d111      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_ADC_ConfigChannel+0x28c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_ADC_ConfigChannel+0x290>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9a      	lsrs	r2, r3, #18
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022f6:	e002      	b.n	80022fe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f9      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	10000012 	.word	0x10000012
 8002320:	40012000 	.word	0x40012000
 8002324:	40012300 	.word	0x40012300
 8002328:	20000000 	.word	0x20000000
 800232c:	431bde83 	.word	0x431bde83

08002330 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002338:	4b78      	ldr	r3, [pc, #480]	; (800251c <ADC_Init+0x1ec>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4a77      	ldr	r2, [pc, #476]	; (800251c <ADC_Init+0x1ec>)
 800233e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002342:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002344:	4b75      	ldr	r3, [pc, #468]	; (800251c <ADC_Init+0x1ec>)
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4973      	ldr	r1, [pc, #460]	; (800251c <ADC_Init+0x1ec>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	021a      	lsls	r2, r3, #8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6899      	ldr	r1, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	4a58      	ldr	r2, [pc, #352]	; (8002520 <ADC_Init+0x1f0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d022      	beq.n	800240a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	e00f      	b.n	800242a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002428:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0202 	bic.w	r2, r2, #2
 8002438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	005a      	lsls	r2, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01b      	beq.n	8002490 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002466:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002476:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6859      	ldr	r1, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	3b01      	subs	r3, #1
 8002484:	035a      	lsls	r2, r3, #13
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	e007      	b.n	80024a0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800249e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	051a      	lsls	r2, r3, #20
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6899      	ldr	r1, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024e2:	025a      	lsls	r2, r3, #9
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	029a      	lsls	r2, r3, #10
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40012300 	.word	0x40012300
 8002520:	0f000001 	.word	0x0f000001

08002524 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0ed      	b.n	8002712 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3020 	ldrb.w	r3, [r3, #32]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d102      	bne.n	8002548 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fe1e 	bl	8001184 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0202 	bic.w	r2, r2, #2
 8002556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002558:	f7ff fce4 	bl	8001f24 <HAL_GetTick>
 800255c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800255e:	e012      	b.n	8002586 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002560:	f7ff fce0 	bl	8001f24 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b0a      	cmp	r3, #10
 800256c:	d90b      	bls.n	8002586 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2205      	movs	r2, #5
 800257e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0c5      	b.n	8002712 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e5      	bne.n	8002560 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a4:	f7ff fcbe 	bl	8001f24 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025aa:	e012      	b.n	80025d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025ac:	f7ff fcba 	bl	8001f24 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b0a      	cmp	r3, #10
 80025b8:	d90b      	bls.n	80025d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2205      	movs	r2, #5
 80025ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e09f      	b.n	8002712 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0e5      	beq.n	80025ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7e1b      	ldrb	r3, [r3, #24]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d108      	bne.n	80025fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e007      	b.n	800260a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7e5b      	ldrb	r3, [r3, #25]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d108      	bne.n	8002624 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	e007      	b.n	8002634 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	7e9b      	ldrb	r3, [r3, #26]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d108      	bne.n	800264e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0220 	orr.w	r2, r2, #32
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e007      	b.n	800265e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0220 	bic.w	r2, r2, #32
 800265c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7edb      	ldrb	r3, [r3, #27]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d108      	bne.n	8002678 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0210 	bic.w	r2, r2, #16
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e007      	b.n	8002688 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0210 	orr.w	r2, r2, #16
 8002686:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	7f1b      	ldrb	r3, [r3, #28]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d108      	bne.n	80026a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f042 0208 	orr.w	r2, r2, #8
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e007      	b.n	80026b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0208 	bic.w	r2, r2, #8
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	7f5b      	ldrb	r3, [r3, #29]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d108      	bne.n	80026cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f042 0204 	orr.w	r2, r2, #4
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e007      	b.n	80026dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0204 	bic.w	r2, r2, #4
 80026da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	ea42 0103 	orr.w	r1, r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	1e5a      	subs	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002732:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d003      	beq.n	8002742 <HAL_CAN_ConfigFilter+0x26>
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	2b02      	cmp	r3, #2
 800273e:	f040 80c7 	bne.w	80028d0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a69      	ldr	r2, [pc, #420]	; (80028ec <HAL_CAN_ConfigFilter+0x1d0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d001      	beq.n	8002750 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800274c:	4b68      	ldr	r3, [pc, #416]	; (80028f0 <HAL_CAN_ConfigFilter+0x1d4>)
 800274e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	4a63      	ldr	r2, [pc, #396]	; (80028f0 <HAL_CAN_ConfigFilter+0x1d4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d111      	bne.n	800278c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800276e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	431a      	orrs	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f003 031f 	and.w	r3, r3, #31
 8002794:	2201      	movs	r2, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	401a      	ands	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d123      	bne.n	80027fe <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	43db      	mvns	r3, r3
 80027c0:	401a      	ands	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3248      	adds	r2, #72	; 0x48
 80027de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027f4:	6979      	ldr	r1, [r7, #20]
 80027f6:	3348      	adds	r3, #72	; 0x48
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d122      	bne.n	800284c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	431a      	orrs	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002826:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3248      	adds	r2, #72	; 0x48
 800282c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002840:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002842:	6979      	ldr	r1, [r7, #20]
 8002844:	3348      	adds	r3, #72	; 0x48
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	43db      	mvns	r3, r3
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002866:	e007      	b.n	8002878 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	431a      	orrs	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	43db      	mvns	r3, r3
 800288a:	401a      	ands	r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002892:	e007      	b.n	80028a4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	431a      	orrs	r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028c2:	f023 0201 	bic.w	r2, r3, #1
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e006      	b.n	80028de <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40003400 	.word	0x40003400
 80028f0:	40006400 	.word	0x40006400

080028f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d12e      	bne.n	8002966 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002920:	f7ff fb00 	bl	8001f24 <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002926:	e012      	b.n	800294e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002928:	f7ff fafc 	bl	8001f24 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b0a      	cmp	r3, #10
 8002934:	d90b      	bls.n	800294e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2205      	movs	r2, #5
 8002946:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e012      	b.n	8002974 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1e5      	bne.n	8002928 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e006      	b.n	8002974 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800297c:	b480      	push	{r7}
 800297e:	b089      	sub	sp, #36	; 0x24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002990:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800299a:	7ffb      	ldrb	r3, [r7, #31]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d003      	beq.n	80029a8 <HAL_CAN_AddTxMessage+0x2c>
 80029a0:	7ffb      	ldrb	r3, [r7, #31]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	f040 80b8 	bne.w	8002b18 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80a0 	beq.w	8002b08 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	0e1b      	lsrs	r3, r3, #24
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d907      	bls.n	80029e8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e09e      	b.n	8002b26 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029e8:	2201      	movs	r2, #1
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	409a      	lsls	r2, r3
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10d      	bne.n	8002a16 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a04:	68f9      	ldr	r1, [r7, #12]
 8002a06:	6809      	ldr	r1, [r1, #0]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3318      	adds	r3, #24
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	440b      	add	r3, r1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e00f      	b.n	8002a36 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a20:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a2a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3318      	adds	r3, #24
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	440b      	add	r3, r1
 8002a34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6819      	ldr	r1, [r3, #0]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3318      	adds	r3, #24
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	440b      	add	r3, r1
 8002a46:	3304      	adds	r3, #4
 8002a48:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	7d1b      	ldrb	r3, [r3, #20]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d111      	bne.n	8002a76 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3318      	adds	r3, #24
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3304      	adds	r3, #4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	6811      	ldr	r1, [r2, #0]
 8002a66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3318      	adds	r3, #24
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	440b      	add	r3, r1
 8002a72:	3304      	adds	r3, #4
 8002a74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3307      	adds	r3, #7
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	061a      	lsls	r2, r3, #24
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3306      	adds	r3, #6
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3305      	adds	r3, #5
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	021b      	lsls	r3, r3, #8
 8002a90:	4313      	orrs	r3, r2
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	3204      	adds	r2, #4
 8002a96:	7812      	ldrb	r2, [r2, #0]
 8002a98:	4610      	mov	r0, r2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	6811      	ldr	r1, [r2, #0]
 8002a9e:	ea43 0200 	orr.w	r2, r3, r0
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002aac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3303      	adds	r3, #3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	061a      	lsls	r2, r3, #24
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	7812      	ldrb	r2, [r2, #0]
 8002ace:	4610      	mov	r0, r2
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	6811      	ldr	r1, [r2, #0]
 8002ad4:	ea43 0200 	orr.w	r2, r3, r0
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ae2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3318      	adds	r3, #24
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	4413      	add	r3, r2
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	6811      	ldr	r1, [r2, #0]
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3318      	adds	r3, #24
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	440b      	add	r3, r1
 8002b02:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e00e      	b.n	8002b26 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e006      	b.n	8002b26 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
  }
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b46:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d003      	beq.n	8002b56 <HAL_CAN_GetRxMessage+0x24>
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	f040 80f3 	bne.w	8002d3c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10e      	bne.n	8002b7a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0e7      	b.n	8002d4a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d107      	bne.n	8002b98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0d8      	b.n	8002d4a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	331b      	adds	r3, #27
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0204 	and.w	r2, r3, #4
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	331b      	adds	r3, #27
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	4413      	add	r3, r2
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0d5b      	lsrs	r3, r3, #21
 8002bc6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e00b      	b.n	8002be8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	331b      	adds	r3, #27
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	4413      	add	r3, r2
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	08db      	lsrs	r3, r3, #3
 8002be0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	331b      	adds	r3, #27
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	4413      	add	r3, r2
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0202 	and.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	331b      	adds	r3, #27
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	4413      	add	r3, r2
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 020f 	and.w	r2, r3, #15
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	331b      	adds	r3, #27
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	4413      	add	r3, r2
 8002c22:	3304      	adds	r3, #4
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	331b      	adds	r3, #27
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	4413      	add	r3, r2
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	0c1b      	lsrs	r3, r3, #16
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0a1a      	lsrs	r2, r3, #8
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0c1a      	lsrs	r2, r3, #16
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0e1a      	lsrs	r2, r3, #24
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	3303      	adds	r3, #3
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	b2d2      	uxtb	r2, r2
 8002cc0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	0a1a      	lsrs	r2, r3, #8
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	3305      	adds	r3, #5
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0c1a      	lsrs	r2, r3, #16
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	3306      	adds	r3, #6
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0e1a      	lsrs	r2, r3, #24
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	3307      	adds	r3, #7
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0220 	orr.w	r2, r2, #32
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	e007      	b.n	8002d38 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 0220 	orr.w	r2, r2, #32
 8002d36:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	e006      	b.n	8002d4a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	371c      	adds	r7, #28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d66:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d002      	beq.n	8002d74 <HAL_CAN_ActivateNotification+0x1e>
 8002d6e:	7bfb      	ldrb	r3, [r7, #15]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d109      	bne.n	8002d88 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6959      	ldr	r1, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e006      	b.n	8002d96 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b08a      	sub	sp, #40	; 0x28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d07c      	beq.n	8002ee2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d023      	beq.n	8002e3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f983 	bl	8003110 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e0a:	e016      	b.n	8002e3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d004      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	e00c      	b.n	8002e3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	e002      	b.n	8002e3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f989 	bl	800314c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d024      	beq.n	8002e8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f963 	bl	8003124 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e5e:	e016      	b.n	8002e8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d004      	beq.n	8002e74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	e00c      	b.n	8002e8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
 8002e86:	e002      	b.n	8002e8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f969 	bl	8003160 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d024      	beq.n	8002ee2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ea0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f943 	bl	8003138 <HAL_CAN_TxMailbox2CompleteCallback>
 8002eb2:	e016      	b.n	8002ee2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	e00c      	b.n	8002ee2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d004      	beq.n	8002edc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	e002      	b.n	8002ee2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f949 	bl	8003174 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00c      	beq.n	8002f06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d007      	beq.n	8002f06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2210      	movs	r2, #16
 8002f04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d006      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2208      	movs	r2, #8
 8002f20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f930 	bl	8003188 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fe fded 	bl	8001b20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00c      	beq.n	8002f6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2210      	movs	r2, #16
 8002f68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00b      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d006      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2208      	movs	r2, #8
 8002f84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f912 	bl	80031b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f8f9 	bl	800319c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00b      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8fc 	bl	80031c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d006      	beq.n	8002fee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f8f5 	bl	80031d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d07b      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d072      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	f043 0304 	orr.w	r3, r3, #4
 8003054:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305c:	2b00      	cmp	r3, #0
 800305e:	d043      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003066:	2b00      	cmp	r3, #0
 8003068:	d03e      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003070:	2b60      	cmp	r3, #96	; 0x60
 8003072:	d02b      	beq.n	80030cc <HAL_CAN_IRQHandler+0x32a>
 8003074:	2b60      	cmp	r3, #96	; 0x60
 8003076:	d82e      	bhi.n	80030d6 <HAL_CAN_IRQHandler+0x334>
 8003078:	2b50      	cmp	r3, #80	; 0x50
 800307a:	d022      	beq.n	80030c2 <HAL_CAN_IRQHandler+0x320>
 800307c:	2b50      	cmp	r3, #80	; 0x50
 800307e:	d82a      	bhi.n	80030d6 <HAL_CAN_IRQHandler+0x334>
 8003080:	2b40      	cmp	r3, #64	; 0x40
 8003082:	d019      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x316>
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d826      	bhi.n	80030d6 <HAL_CAN_IRQHandler+0x334>
 8003088:	2b30      	cmp	r3, #48	; 0x30
 800308a:	d010      	beq.n	80030ae <HAL_CAN_IRQHandler+0x30c>
 800308c:	2b30      	cmp	r3, #48	; 0x30
 800308e:	d822      	bhi.n	80030d6 <HAL_CAN_IRQHandler+0x334>
 8003090:	2b10      	cmp	r3, #16
 8003092:	d002      	beq.n	800309a <HAL_CAN_IRQHandler+0x2f8>
 8003094:	2b20      	cmp	r3, #32
 8003096:	d005      	beq.n	80030a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003098:	e01d      	b.n	80030d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030a2:	e019      	b.n	80030d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ac:	e014      	b.n	80030d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f043 0320 	orr.w	r3, r3, #32
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030b6:	e00f      	b.n	80030d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030c0:	e00a      	b.n	80030d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030ca:	e005      	b.n	80030d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80030d4:	e000      	b.n	80030d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80030d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2204      	movs	r2, #4
 80030ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d008      	beq.n	8003108 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f872 	bl	80031ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003108:	bf00      	nop
 800310a:	3728      	adds	r7, #40	; 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <__NVIC_SetPriorityGrouping+0x40>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800321c:	4013      	ands	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <__NVIC_SetPriorityGrouping+0x44>)
 800322a:	4313      	orrs	r3, r2
 800322c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322e:	4a04      	ldr	r2, [pc, #16]	; (8003240 <__NVIC_SetPriorityGrouping+0x40>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	60d3      	str	r3, [r2, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00
 8003244:	05fa0000 	.word	0x05fa0000

08003248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <__NVIC_GetPriorityGrouping+0x18>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	f003 0307 	and.w	r3, r3, #7
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003272:	2b00      	cmp	r3, #0
 8003274:	db0b      	blt.n	800328e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	4907      	ldr	r1, [pc, #28]	; (800329c <__NVIC_EnableIRQ+0x38>)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	095b      	lsrs	r3, r3, #5
 8003284:	2001      	movs	r0, #1
 8003286:	fa00 f202 	lsl.w	r2, r0, r2
 800328a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	e000e100 	.word	0xe000e100

080032a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	db0a      	blt.n	80032ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	490c      	ldr	r1, [pc, #48]	; (80032ec <__NVIC_SetPriority+0x4c>)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	0112      	lsls	r2, r2, #4
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	440b      	add	r3, r1
 80032c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c8:	e00a      	b.n	80032e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	4908      	ldr	r1, [pc, #32]	; (80032f0 <__NVIC_SetPriority+0x50>)
 80032d0:	79fb      	ldrb	r3, [r7, #7]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	3b04      	subs	r3, #4
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	b2d2      	uxtb	r2, r2
 80032dc:	440b      	add	r3, r1
 80032de:	761a      	strb	r2, [r3, #24]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000e100 	.word	0xe000e100
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b089      	sub	sp, #36	; 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f003 0307 	and.w	r3, r3, #7
 8003306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f1c3 0307 	rsb	r3, r3, #7
 800330e:	2b04      	cmp	r3, #4
 8003310:	bf28      	it	cs
 8003312:	2304      	movcs	r3, #4
 8003314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3304      	adds	r3, #4
 800331a:	2b06      	cmp	r3, #6
 800331c:	d902      	bls.n	8003324 <NVIC_EncodePriority+0x30>
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3b03      	subs	r3, #3
 8003322:	e000      	b.n	8003326 <NVIC_EncodePriority+0x32>
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	f04f 32ff 	mov.w	r2, #4294967295
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43da      	mvns	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	401a      	ands	r2, r3
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800333c:	f04f 31ff 	mov.w	r1, #4294967295
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	fa01 f303 	lsl.w	r3, r1, r3
 8003346:	43d9      	mvns	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800334c:	4313      	orrs	r3, r2
         );
}
 800334e:	4618      	mov	r0, r3
 8003350:	3724      	adds	r7, #36	; 0x24
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3b01      	subs	r3, #1
 8003368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800336c:	d301      	bcc.n	8003372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800336e:	2301      	movs	r3, #1
 8003370:	e00f      	b.n	8003392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <SysTick_Config+0x40>)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337a:	210f      	movs	r1, #15
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	f7ff ff8e 	bl	80032a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <SysTick_Config+0x40>)
 8003386:	2200      	movs	r2, #0
 8003388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <SysTick_Config+0x40>)
 800338c:	2207      	movs	r2, #7
 800338e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	e000e010 	.word	0xe000e010

080033a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff ff29 	bl	8003200 <__NVIC_SetPriorityGrouping>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b086      	sub	sp, #24
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033c8:	f7ff ff3e 	bl	8003248 <__NVIC_GetPriorityGrouping>
 80033cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	6978      	ldr	r0, [r7, #20]
 80033d4:	f7ff ff8e 	bl	80032f4 <NVIC_EncodePriority>
 80033d8:	4602      	mov	r2, r0
 80033da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff ff5d 	bl	80032a0 <__NVIC_SetPriority>
}
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	4603      	mov	r3, r0
 80033f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff31 	bl	8003264 <__NVIC_EnableIRQ>
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff ffa2 	bl	800335c <SysTick_Config>
 8003418:	4603      	mov	r3, r0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003424:	b480      	push	{r7}
 8003426:	b089      	sub	sp, #36	; 0x24
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800342e:	2300      	movs	r3, #0
 8003430:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	e175      	b.n	8003730 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003444:	2201      	movs	r2, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	f040 8164 	bne.w	800372a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d00b      	beq.n	8003482 <HAL_GPIO_Init+0x5e>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d007      	beq.n	8003482 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003476:	2b11      	cmp	r3, #17
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b12      	cmp	r3, #18
 8003480:	d130      	bne.n	80034e4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2203      	movs	r2, #3
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034b8:	2201      	movs	r2, #1
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 0201 	and.w	r2, r3, #1
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	2203      	movs	r2, #3
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x100>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b12      	cmp	r3, #18
 8003522:	d123      	bne.n	800356c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	691a      	ldr	r2, [r3, #16]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	08da      	lsrs	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	3208      	adds	r2, #8
 8003566:	69b9      	ldr	r1, [r7, #24]
 8003568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	2203      	movs	r2, #3
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4013      	ands	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0203 	and.w	r2, r3, #3
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80be 	beq.w	800372a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	4b66      	ldr	r3, [pc, #408]	; (8003748 <HAL_GPIO_Init+0x324>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	4a65      	ldr	r2, [pc, #404]	; (8003748 <HAL_GPIO_Init+0x324>)
 80035b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_GPIO_Init+0x324>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80035c6:	4a61      	ldr	r2, [pc, #388]	; (800374c <HAL_GPIO_Init+0x328>)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3302      	adds	r3, #2
 80035ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	220f      	movs	r2, #15
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a58      	ldr	r2, [pc, #352]	; (8003750 <HAL_GPIO_Init+0x32c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d037      	beq.n	8003662 <HAL_GPIO_Init+0x23e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a57      	ldr	r2, [pc, #348]	; (8003754 <HAL_GPIO_Init+0x330>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d031      	beq.n	800365e <HAL_GPIO_Init+0x23a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a56      	ldr	r2, [pc, #344]	; (8003758 <HAL_GPIO_Init+0x334>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d02b      	beq.n	800365a <HAL_GPIO_Init+0x236>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a55      	ldr	r2, [pc, #340]	; (800375c <HAL_GPIO_Init+0x338>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d025      	beq.n	8003656 <HAL_GPIO_Init+0x232>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a54      	ldr	r2, [pc, #336]	; (8003760 <HAL_GPIO_Init+0x33c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d01f      	beq.n	8003652 <HAL_GPIO_Init+0x22e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a53      	ldr	r2, [pc, #332]	; (8003764 <HAL_GPIO_Init+0x340>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d019      	beq.n	800364e <HAL_GPIO_Init+0x22a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a52      	ldr	r2, [pc, #328]	; (8003768 <HAL_GPIO_Init+0x344>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_GPIO_Init+0x226>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a51      	ldr	r2, [pc, #324]	; (800376c <HAL_GPIO_Init+0x348>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00d      	beq.n	8003646 <HAL_GPIO_Init+0x222>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a50      	ldr	r2, [pc, #320]	; (8003770 <HAL_GPIO_Init+0x34c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d007      	beq.n	8003642 <HAL_GPIO_Init+0x21e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a4f      	ldr	r2, [pc, #316]	; (8003774 <HAL_GPIO_Init+0x350>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d101      	bne.n	800363e <HAL_GPIO_Init+0x21a>
 800363a:	2309      	movs	r3, #9
 800363c:	e012      	b.n	8003664 <HAL_GPIO_Init+0x240>
 800363e:	230a      	movs	r3, #10
 8003640:	e010      	b.n	8003664 <HAL_GPIO_Init+0x240>
 8003642:	2308      	movs	r3, #8
 8003644:	e00e      	b.n	8003664 <HAL_GPIO_Init+0x240>
 8003646:	2307      	movs	r3, #7
 8003648:	e00c      	b.n	8003664 <HAL_GPIO_Init+0x240>
 800364a:	2306      	movs	r3, #6
 800364c:	e00a      	b.n	8003664 <HAL_GPIO_Init+0x240>
 800364e:	2305      	movs	r3, #5
 8003650:	e008      	b.n	8003664 <HAL_GPIO_Init+0x240>
 8003652:	2304      	movs	r3, #4
 8003654:	e006      	b.n	8003664 <HAL_GPIO_Init+0x240>
 8003656:	2303      	movs	r3, #3
 8003658:	e004      	b.n	8003664 <HAL_GPIO_Init+0x240>
 800365a:	2302      	movs	r3, #2
 800365c:	e002      	b.n	8003664 <HAL_GPIO_Init+0x240>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_GPIO_Init+0x240>
 8003662:	2300      	movs	r3, #0
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	f002 0203 	and.w	r2, r2, #3
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	4093      	lsls	r3, r2
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003674:	4935      	ldr	r1, [pc, #212]	; (800374c <HAL_GPIO_Init+0x328>)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	3302      	adds	r3, #2
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003682:	4b3d      	ldr	r3, [pc, #244]	; (8003778 <HAL_GPIO_Init+0x354>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a6:	4a34      	ldr	r2, [pc, #208]	; (8003778 <HAL_GPIO_Init+0x354>)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036ac:	4b32      	ldr	r3, [pc, #200]	; (8003778 <HAL_GPIO_Init+0x354>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d0:	4a29      	ldr	r2, [pc, #164]	; (8003778 <HAL_GPIO_Init+0x354>)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036d6:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_GPIO_Init+0x354>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	43db      	mvns	r3, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4013      	ands	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fa:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <HAL_GPIO_Init+0x354>)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003700:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <HAL_GPIO_Init+0x354>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	43db      	mvns	r3, r3
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	4013      	ands	r3, r2
 800370e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003724:	4a14      	ldr	r2, [pc, #80]	; (8003778 <HAL_GPIO_Init+0x354>)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3301      	adds	r3, #1
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	f67f ae86 	bls.w	8003444 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3724      	adds	r7, #36	; 0x24
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800
 800374c:	40013800 	.word	0x40013800
 8003750:	40020000 	.word	0x40020000
 8003754:	40020400 	.word	0x40020400
 8003758:	40020800 	.word	0x40020800
 800375c:	40020c00 	.word	0x40020c00
 8003760:	40021000 	.word	0x40021000
 8003764:	40021400 	.word	0x40021400
 8003768:	40021800 	.word	0x40021800
 800376c:	40021c00 	.word	0x40021c00
 8003770:	40022000 	.word	0x40022000
 8003774:	40022400 	.word	0x40022400
 8003778:	40013c00 	.word	0x40013c00

0800377c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
 8003798:	e001      	b.n	800379e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800379e:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
 80037b8:	4613      	mov	r3, r2
 80037ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037c2:	887a      	ldrh	r2, [r7, #2]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80037c8:	e003      	b.n	80037d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80037ca:	887b      	ldrh	r3, [r7, #2]
 80037cc:	041a      	lsls	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	619a      	str	r2, [r3, #24]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	4b23      	ldr	r3, [pc, #140]	; (8003878 <HAL_PWREx_EnableOverDrive+0x98>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a22      	ldr	r2, [pc, #136]	; (8003878 <HAL_PWREx_EnableOverDrive+0x98>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_PWREx_EnableOverDrive+0x98>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003802:	4b1e      	ldr	r3, [pc, #120]	; (800387c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800380c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800380e:	f7fe fb89 	bl	8001f24 <HAL_GetTick>
 8003812:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003814:	e009      	b.n	800382a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003816:	f7fe fb85 	bl	8001f24 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003824:	d901      	bls.n	800382a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e022      	b.n	8003870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_PWREx_EnableOverDrive+0x9c>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003836:	d1ee      	bne.n	8003816 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003838:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_PWREx_EnableOverDrive+0x9c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a0f      	ldr	r2, [pc, #60]	; (800387c <HAL_PWREx_EnableOverDrive+0x9c>)
 800383e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003842:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003844:	f7fe fb6e 	bl	8001f24 <HAL_GetTick>
 8003848:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800384a:	e009      	b.n	8003860 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800384c:	f7fe fb6a 	bl	8001f24 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800385a:	d901      	bls.n	8003860 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e007      	b.n	8003870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800386c:	d1ee      	bne.n	800384c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40023800 	.word	0x40023800
 800387c:	40007000 	.word	0x40007000

08003880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003888:	2300      	movs	r3, #0
 800388a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e29b      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8087 	beq.w	80039b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038a4:	4b96      	ldr	r3, [pc, #600]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 030c 	and.w	r3, r3, #12
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d00c      	beq.n	80038ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038b0:	4b93      	ldr	r3, [pc, #588]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d112      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62>
 80038bc:	4b90      	ldr	r3, [pc, #576]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038c8:	d10b      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ca:	4b8d      	ldr	r3, [pc, #564]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d06c      	beq.n	80039b0 <HAL_RCC_OscConfig+0x130>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d168      	bne.n	80039b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e275      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ea:	d106      	bne.n	80038fa <HAL_RCC_OscConfig+0x7a>
 80038ec:	4b84      	ldr	r3, [pc, #528]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a83      	ldr	r2, [pc, #524]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80038f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f6:	6013      	str	r3, [r2, #0]
 80038f8:	e02e      	b.n	8003958 <HAL_RCC_OscConfig+0xd8>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0x9c>
 8003902:	4b7f      	ldr	r3, [pc, #508]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a7e      	ldr	r2, [pc, #504]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	4b7c      	ldr	r3, [pc, #496]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a7b      	ldr	r2, [pc, #492]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e01d      	b.n	8003958 <HAL_RCC_OscConfig+0xd8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003924:	d10c      	bne.n	8003940 <HAL_RCC_OscConfig+0xc0>
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a75      	ldr	r2, [pc, #468]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 800392c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b73      	ldr	r3, [pc, #460]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a72      	ldr	r2, [pc, #456]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e00b      	b.n	8003958 <HAL_RCC_OscConfig+0xd8>
 8003940:	4b6f      	ldr	r3, [pc, #444]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a6e      	ldr	r2, [pc, #440]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6b      	ldr	r2, [pc, #428]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d013      	beq.n	8003988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe fae0 	bl	8001f24 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003968:	f7fe fadc 	bl	8001f24 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e229      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b61      	ldr	r3, [pc, #388]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0xe8>
 8003986:	e014      	b.n	80039b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7fe facc 	bl	8001f24 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003990:	f7fe fac8 	bl	8001f24 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b64      	cmp	r3, #100	; 0x64
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e215      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a2:	4b57      	ldr	r3, [pc, #348]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x110>
 80039ae:	e000      	b.n	80039b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d069      	beq.n	8003a92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039be:	4b50      	ldr	r3, [pc, #320]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00b      	beq.n	80039e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ca:	4b4d      	ldr	r3, [pc, #308]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 030c 	and.w	r3, r3, #12
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d11c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x190>
 80039d6:	4b4a      	ldr	r3, [pc, #296]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d116      	bne.n	8003a10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e2:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_RCC_OscConfig+0x17a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d001      	beq.n	80039fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e1e9      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b41      	ldr	r3, [pc, #260]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	493d      	ldr	r1, [pc, #244]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0e:	e040      	b.n	8003a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d023      	beq.n	8003a60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a18:	4b39      	ldr	r3, [pc, #228]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a38      	ldr	r2, [pc, #224]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fe fa7e 	bl	8001f24 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2c:	f7fe fa7a 	bl	8001f24 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1c7      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3e:	4b30      	ldr	r3, [pc, #192]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4929      	ldr	r1, [pc, #164]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
 8003a5e:	e018      	b.n	8003a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a60:	4b27      	ldr	r3, [pc, #156]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a26      	ldr	r2, [pc, #152]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fa5a 	bl	8001f24 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fe fa56 	bl	8001f24 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e1a3      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d038      	beq.n	8003b10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d019      	beq.n	8003ada <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa6:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aaa:	4a15      	ldr	r2, [pc, #84]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab2:	f7fe fa37 	bl	8001f24 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aba:	f7fe fa33 	bl	8001f24 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e180      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x23a>
 8003ad8:	e01a      	b.n	8003b10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	4a08      	ldr	r2, [pc, #32]	; (8003b00 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	f023 0301 	bic.w	r3, r3, #1
 8003ae4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae6:	f7fe fa1d 	bl	8001f24 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aee:	f7fe fa19 	bl	8001f24 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d903      	bls.n	8003b04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e166      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
 8003b00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b04:	4b92      	ldr	r3, [pc, #584]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1ee      	bne.n	8003aee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 80a4 	beq.w	8003c66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b1e:	4b8c      	ldr	r3, [pc, #560]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10d      	bne.n	8003b46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b2a:	4b89      	ldr	r3, [pc, #548]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	4a88      	ldr	r2, [pc, #544]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6413      	str	r3, [r2, #64]	; 0x40
 8003b36:	4b86      	ldr	r3, [pc, #536]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b46:	4b83      	ldr	r3, [pc, #524]	; (8003d54 <HAL_RCC_OscConfig+0x4d4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d118      	bne.n	8003b84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b52:	4b80      	ldr	r3, [pc, #512]	; (8003d54 <HAL_RCC_OscConfig+0x4d4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7f      	ldr	r2, [pc, #508]	; (8003d54 <HAL_RCC_OscConfig+0x4d4>)
 8003b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5e:	f7fe f9e1 	bl	8001f24 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b66:	f7fe f9dd 	bl	8001f24 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b64      	cmp	r3, #100	; 0x64
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e12a      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b78:	4b76      	ldr	r3, [pc, #472]	; (8003d54 <HAL_RCC_OscConfig+0x4d4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0f0      	beq.n	8003b66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d106      	bne.n	8003b9a <HAL_RCC_OscConfig+0x31a>
 8003b8c:	4b70      	ldr	r3, [pc, #448]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b90:	4a6f      	ldr	r2, [pc, #444]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6713      	str	r3, [r2, #112]	; 0x70
 8003b98:	e02d      	b.n	8003bf6 <HAL_RCC_OscConfig+0x376>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10c      	bne.n	8003bbc <HAL_RCC_OscConfig+0x33c>
 8003ba2:	4b6b      	ldr	r3, [pc, #428]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba6:	4a6a      	ldr	r2, [pc, #424]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	6713      	str	r3, [r2, #112]	; 0x70
 8003bae:	4b68      	ldr	r3, [pc, #416]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb2:	4a67      	ldr	r2, [pc, #412]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003bb4:	f023 0304 	bic.w	r3, r3, #4
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bba:	e01c      	b.n	8003bf6 <HAL_RCC_OscConfig+0x376>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d10c      	bne.n	8003bde <HAL_RCC_OscConfig+0x35e>
 8003bc4:	4b62      	ldr	r3, [pc, #392]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a61      	ldr	r2, [pc, #388]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003bca:	f043 0304 	orr.w	r3, r3, #4
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd0:	4b5f      	ldr	r3, [pc, #380]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a5e      	ldr	r2, [pc, #376]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	e00b      	b.n	8003bf6 <HAL_RCC_OscConfig+0x376>
 8003bde:	4b5c      	ldr	r3, [pc, #368]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a5b      	ldr	r2, [pc, #364]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bea:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a58      	ldr	r2, [pc, #352]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d015      	beq.n	8003c2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfe:	f7fe f991 	bl	8001f24 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c04:	e00a      	b.n	8003c1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c06:	f7fe f98d 	bl	8001f24 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e0d8      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1c:	4b4c      	ldr	r3, [pc, #304]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c20:	f003 0302 	and.w	r3, r3, #2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ee      	beq.n	8003c06 <HAL_RCC_OscConfig+0x386>
 8003c28:	e014      	b.n	8003c54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fe f97b 	bl	8001f24 <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fe f977 	bl	8001f24 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e0c2      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c48:	4b41      	ldr	r3, [pc, #260]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ee      	bne.n	8003c32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c5a:	4b3d      	ldr	r3, [pc, #244]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a3c      	ldr	r2, [pc, #240]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80ae 	beq.w	8003dcc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c70:	4b37      	ldr	r3, [pc, #220]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d06d      	beq.n	8003d58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d14b      	bne.n	8003d1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c84:	4b32      	ldr	r3, [pc, #200]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a31      	ldr	r2, [pc, #196]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fe f948 	bl	8001f24 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c98:	f7fe f944 	bl	8001f24 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e091      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69da      	ldr	r2, [r3, #28]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	019b      	lsls	r3, r3, #6
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	061b      	lsls	r3, r3, #24
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	071b      	lsls	r3, r3, #28
 8003ce2:	491b      	ldr	r1, [pc, #108]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ce8:	4b19      	ldr	r3, [pc, #100]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a18      	ldr	r2, [pc, #96]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe f916 	bl	8001f24 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fe f912 	bl	8001f24 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e05f      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x47c>
 8003d1a:	e057      	b.n	8003dcc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe f8fc 	bl	8001f24 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe f8f8 	bl	8001f24 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e045      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x4b0>
 8003d4e:	e03d      	b.n	8003dcc <HAL_RCC_OscConfig+0x54c>
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <HAL_RCC_OscConfig+0x558>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d030      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d129      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d122      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d119      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	3b01      	subs	r3, #1
 8003da2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d10f      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0d0      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df4:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d910      	bls.n	8003e24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 020f 	bic.w	r2, r3, #15
 8003e0a:	4965      	ldr	r1, [pc, #404]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0b8      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e3c:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e54:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a52      	ldr	r2, [pc, #328]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e60:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	494d      	ldr	r1, [pc, #308]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d040      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d115      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e07f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e073      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eae:	4b3d      	ldr	r3, [pc, #244]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e06b      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ebe:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 0203 	bic.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4936      	ldr	r1, [pc, #216]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed0:	f7fe f828 	bl	8001f24 <HAL_GetTick>
 8003ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed8:	f7fe f824 	bl	8001f24 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e053      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 020c 	and.w	r2, r3, #12
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d1eb      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f00:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d210      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 020f 	bic.w	r2, r3, #15
 8003f16:	4922      	ldr	r1, [pc, #136]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e032      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4916      	ldr	r1, [pc, #88]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f6e:	f000 f821 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	490a      	ldr	r1, [pc, #40]	; (8003fa8 <HAL_RCC_ClockConfig+0x1cc>)
 8003f80:	5ccb      	ldrb	r3, [r1, r3]
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1d0>)
 8003f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x1d4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd ff84 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023c00 	.word	0x40023c00
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	08005e84 	.word	0x08005e84
 8003fac:	20000000 	.word	0x20000000
 8003fb0:	20000004 	.word	0x20000004

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	b5b0      	push	{r4, r5, r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fba:	2100      	movs	r1, #0
 8003fbc:	6079      	str	r1, [r7, #4]
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	60f9      	str	r1, [r7, #12]
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fca:	4952      	ldr	r1, [pc, #328]	; (8004114 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fcc:	6889      	ldr	r1, [r1, #8]
 8003fce:	f001 010c 	and.w	r1, r1, #12
 8003fd2:	2908      	cmp	r1, #8
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x3e>
 8003fd6:	2908      	cmp	r1, #8
 8003fd8:	f200 8094 	bhi.w	8004104 <HAL_RCC_GetSysClockFreq+0x150>
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x32>
 8003fe0:	2904      	cmp	r1, #4
 8003fe2:	d003      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x38>
 8003fe4:	e08e      	b.n	8004104 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe6:	4b4c      	ldr	r3, [pc, #304]	; (8004118 <HAL_RCC_GetSysClockFreq+0x164>)
 8003fe8:	60bb      	str	r3, [r7, #8]
      break;
 8003fea:	e08e      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fec:	4b4b      	ldr	r3, [pc, #300]	; (800411c <HAL_RCC_GetSysClockFreq+0x168>)
 8003fee:	60bb      	str	r3, [r7, #8]
      break;
 8003ff0:	e08b      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff2:	4948      	ldr	r1, [pc, #288]	; (8004114 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ff4:	6849      	ldr	r1, [r1, #4]
 8003ff6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003ffa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ffc:	4945      	ldr	r1, [pc, #276]	; (8004114 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ffe:	6849      	ldr	r1, [r1, #4]
 8004000:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004004:	2900      	cmp	r1, #0
 8004006:	d024      	beq.n	8004052 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004008:	4942      	ldr	r1, [pc, #264]	; (8004114 <HAL_RCC_GetSysClockFreq+0x160>)
 800400a:	6849      	ldr	r1, [r1, #4]
 800400c:	0989      	lsrs	r1, r1, #6
 800400e:	4608      	mov	r0, r1
 8004010:	f04f 0100 	mov.w	r1, #0
 8004014:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004018:	f04f 0500 	mov.w	r5, #0
 800401c:	ea00 0204 	and.w	r2, r0, r4
 8004020:	ea01 0305 	and.w	r3, r1, r5
 8004024:	493d      	ldr	r1, [pc, #244]	; (800411c <HAL_RCC_GetSysClockFreq+0x168>)
 8004026:	fb01 f003 	mul.w	r0, r1, r3
 800402a:	2100      	movs	r1, #0
 800402c:	fb01 f102 	mul.w	r1, r1, r2
 8004030:	1844      	adds	r4, r0, r1
 8004032:	493a      	ldr	r1, [pc, #232]	; (800411c <HAL_RCC_GetSysClockFreq+0x168>)
 8004034:	fba2 0101 	umull	r0, r1, r2, r1
 8004038:	1863      	adds	r3, r4, r1
 800403a:	4619      	mov	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	461a      	mov	r2, r3
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	f7fc f900 	bl	8000248 <__aeabi_uldivmod>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4613      	mov	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e04a      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004052:	4b30      	ldr	r3, [pc, #192]	; (8004114 <HAL_RCC_GetSysClockFreq+0x160>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	461a      	mov	r2, r3
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004062:	f04f 0100 	mov.w	r1, #0
 8004066:	ea02 0400 	and.w	r4, r2, r0
 800406a:	ea03 0501 	and.w	r5, r3, r1
 800406e:	4620      	mov	r0, r4
 8004070:	4629      	mov	r1, r5
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	014b      	lsls	r3, r1, #5
 800407c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004080:	0142      	lsls	r2, r0, #5
 8004082:	4610      	mov	r0, r2
 8004084:	4619      	mov	r1, r3
 8004086:	1b00      	subs	r0, r0, r4
 8004088:	eb61 0105 	sbc.w	r1, r1, r5
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	018b      	lsls	r3, r1, #6
 8004096:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800409a:	0182      	lsls	r2, r0, #6
 800409c:	1a12      	subs	r2, r2, r0
 800409e:	eb63 0301 	sbc.w	r3, r3, r1
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f04f 0100 	mov.w	r1, #0
 80040aa:	00d9      	lsls	r1, r3, #3
 80040ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040b0:	00d0      	lsls	r0, r2, #3
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	1912      	adds	r2, r2, r4
 80040b8:	eb45 0303 	adc.w	r3, r5, r3
 80040bc:	f04f 0000 	mov.w	r0, #0
 80040c0:	f04f 0100 	mov.w	r1, #0
 80040c4:	0299      	lsls	r1, r3, #10
 80040c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80040ca:	0290      	lsls	r0, r2, #10
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4610      	mov	r0, r2
 80040d2:	4619      	mov	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	461a      	mov	r2, r3
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	f7fc f8b4 	bl	8000248 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4613      	mov	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040e8:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_GetSysClockFreq+0x160>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	60bb      	str	r3, [r7, #8]
      break;
 8004102:	e002      	b.n	800410a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <HAL_RCC_GetSysClockFreq+0x164>)
 8004106:	60bb      	str	r3, [r7, #8]
      break;
 8004108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800410a:	68bb      	ldr	r3, [r7, #8]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bdb0      	pop	{r4, r5, r7, pc}
 8004114:	40023800 	.word	0x40023800
 8004118:	00f42400 	.word	0x00f42400
 800411c:	017d7840 	.word	0x017d7840

08004120 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_RCC_GetHCLKFreq+0x14>)
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000000 	.word	0x20000000

08004138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800413c:	f7ff fff0 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004140:	4602      	mov	r2, r0
 8004142:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	0a9b      	lsrs	r3, r3, #10
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	4903      	ldr	r1, [pc, #12]	; (800415c <HAL_RCC_GetPCLK1Freq+0x24>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40023800 	.word	0x40023800
 800415c:	08005e94 	.word	0x08005e94

08004160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004164:	f7ff ffdc 	bl	8004120 <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b05      	ldr	r3, [pc, #20]	; (8004180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0b5b      	lsrs	r3, r3, #13
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4903      	ldr	r1, [pc, #12]	; (8004184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800417c:	4618      	mov	r0, r3
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800
 8004184:	08005e94 	.word	0x08005e94

08004188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800419c:	2300      	movs	r3, #0
 800419e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d012      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4a68      	ldr	r2, [pc, #416]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041ba:	6093      	str	r3, [r2, #8]
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	4964      	ldr	r1, [pc, #400]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d017      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e2:	4b5d      	ldr	r3, [pc, #372]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f0:	4959      	ldr	r1, [pc, #356]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800420e:	2301      	movs	r3, #1
 8004210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d017      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800421e:	4b4e      	ldr	r3, [pc, #312]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004224:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	494a      	ldr	r1, [pc, #296]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800424a:	2301      	movs	r3, #1
 800424c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800425a:	2301      	movs	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 808b 	beq.w	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800426c:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4a39      	ldr	r2, [pc, #228]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6413      	str	r3, [r2, #64]	; 0x40
 8004278:	4b37      	ldr	r3, [pc, #220]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a34      	ldr	r2, [pc, #208]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004290:	f7fd fe48 	bl	8001f24 <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004298:	f7fd fe44 	bl	8001f24 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e38f      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80042aa:	4b2c      	ldr	r3, [pc, #176]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042b6:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d035      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d02e      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d4:	4b20      	ldr	r3, [pc, #128]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042de:	4b1e      	ldr	r3, [pc, #120]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a1a      	ldr	r2, [pc, #104]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d114      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fd fe0c 	bl	8001f24 <HAL_GetTick>
 800430c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430e:	e00a      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fd fe08 	bl	8001f24 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e351      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0ee      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433e:	d111      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800434e:	400b      	ands	r3, r1
 8004350:	4901      	ldr	r1, [pc, #4]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
 8004356:	e00b      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004358:	40023800 	.word	0x40023800
 800435c:	40007000 	.word	0x40007000
 8004360:	0ffffcff 	.word	0x0ffffcff
 8004364:	4bb3      	ldr	r3, [pc, #716]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	4ab2      	ldr	r2, [pc, #712]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800436a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800436e:	6093      	str	r3, [r2, #8]
 8004370:	4bb0      	ldr	r3, [pc, #704]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	49ad      	ldr	r1, [pc, #692]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800437e:	4313      	orrs	r3, r2
 8004380:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d010      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800438e:	4ba9      	ldr	r3, [pc, #676]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004394:	4aa7      	ldr	r2, [pc, #668]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800439e:	4ba5      	ldr	r3, [pc, #660]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	49a2      	ldr	r1, [pc, #648]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043bc:	4b9d      	ldr	r3, [pc, #628]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ca:	499a      	ldr	r1, [pc, #616]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043de:	4b95      	ldr	r3, [pc, #596]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043ec:	4991      	ldr	r1, [pc, #580]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004400:	4b8c      	ldr	r3, [pc, #560]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440e:	4989      	ldr	r1, [pc, #548]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004422:	4b84      	ldr	r3, [pc, #528]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004428:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	4980      	ldr	r1, [pc, #512]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004444:	4b7b      	ldr	r3, [pc, #492]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f023 0203 	bic.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	4978      	ldr	r1, [pc, #480]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004466:	4b73      	ldr	r3, [pc, #460]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446c:	f023 020c 	bic.w	r2, r3, #12
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004474:	496f      	ldr	r1, [pc, #444]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	4967      	ldr	r1, [pc, #412]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80044aa:	4b62      	ldr	r3, [pc, #392]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b8:	495e      	ldr	r1, [pc, #376]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044cc:	4b59      	ldr	r3, [pc, #356]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044da:	4956      	ldr	r1, [pc, #344]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044ee:	4b51      	ldr	r3, [pc, #324]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	494d      	ldr	r1, [pc, #308]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004510:	4b48      	ldr	r3, [pc, #288]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	4945      	ldr	r1, [pc, #276]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004532:	4b40      	ldr	r3, [pc, #256]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004540:	493c      	ldr	r1, [pc, #240]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004554:	4b37      	ldr	r3, [pc, #220]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004562:	4934      	ldr	r1, [pc, #208]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d011      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004576:	4b2f      	ldr	r3, [pc, #188]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004584:	492b      	ldr	r1, [pc, #172]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004594:	d101      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80045a6:	2301      	movs	r3, #1
 80045a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045b6:	4b1f      	ldr	r3, [pc, #124]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c4:	491b      	ldr	r1, [pc, #108]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045d8:	4b16      	ldr	r3, [pc, #88]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045e8:	4912      	ldr	r1, [pc, #72]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00b      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004602:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	4909      	ldr	r1, [pc, #36]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00f      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004620:	4b04      	ldr	r3, [pc, #16]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004626:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	e002      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	4986      	ldr	r1, [pc, #536]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800464c:	4b81      	ldr	r3, [pc, #516]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800464e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004652:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465c:	497d      	ldr	r1, [pc, #500]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d006      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80d6 	beq.w	8004824 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004678:	4b76      	ldr	r3, [pc, #472]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a75      	ldr	r2, [pc, #468]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800467e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004684:	f7fd fc4e 	bl	8001f24 <HAL_GetTick>
 8004688:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800468c:	f7fd fc4a 	bl	8001f24 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e195      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800469e:	4b6d      	ldr	r3, [pc, #436]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d021      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x572>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11d      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046be:	4b65      	ldr	r3, [pc, #404]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c4:	0c1b      	lsrs	r3, r3, #16
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80046cc:	4b61      	ldr	r3, [pc, #388]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046d2:	0e1b      	lsrs	r3, r3, #24
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	019a      	lsls	r2, r3, #6
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	041b      	lsls	r3, r3, #16
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	061b      	lsls	r3, r3, #24
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	4958      	ldr	r1, [pc, #352]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800470e:	d00a      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02e      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004724:	d129      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004726:	4b4b      	ldr	r3, [pc, #300]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004734:	4b47      	ldr	r3, [pc, #284]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473a:	0f1b      	lsrs	r3, r3, #28
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	019a      	lsls	r2, r3, #6
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	061b      	lsls	r3, r3, #24
 8004754:	431a      	orrs	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	071b      	lsls	r3, r3, #28
 800475a:	493e      	ldr	r1, [pc, #248]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004762:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004768:	f023 021f 	bic.w	r2, r3, #31
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	3b01      	subs	r3, #1
 8004772:	4938      	ldr	r1, [pc, #224]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004774:	4313      	orrs	r3, r2
 8004776:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01d      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004786:	4b33      	ldr	r3, [pc, #204]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478c:	0e1b      	lsrs	r3, r3, #24
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004794:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479a:	0f1b      	lsrs	r3, r3, #28
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	019a      	lsls	r2, r3, #6
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	041b      	lsls	r3, r3, #16
 80047ae:	431a      	orrs	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	061b      	lsls	r3, r3, #24
 80047b4:	431a      	orrs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	071b      	lsls	r3, r3, #28
 80047ba:	4926      	ldr	r1, [pc, #152]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	019a      	lsls	r2, r3, #6
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	041b      	lsls	r3, r3, #16
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	061b      	lsls	r3, r3, #24
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	071b      	lsls	r3, r3, #28
 80047ea:	491a      	ldr	r1, [pc, #104]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047f2:	4b18      	ldr	r3, [pc, #96]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a17      	ldr	r2, [pc, #92]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80047f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fe:	f7fd fb91 	bl	8001f24 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004806:	f7fd fb8d 	bl	8001f24 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b64      	cmp	r3, #100	; 0x64
 8004812:	d901      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e0d8      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b01      	cmp	r3, #1
 8004828:	f040 80ce 	bne.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800482c:	4b09      	ldr	r3, [pc, #36]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a08      	ldr	r2, [pc, #32]	; (8004854 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fd fb74 	bl	8001f24 <HAL_GetTick>
 800483c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800483e:	e00b      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004840:	f7fd fb70 	bl	8001f24 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d904      	bls.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e0bb      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004852:	bf00      	nop
 8004854:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004858:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004864:	d0ec      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004882:	2b00      	cmp	r3, #0
 8004884:	d02e      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d12a      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800488e:	4b51      	ldr	r3, [pc, #324]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800489c:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800489e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a2:	0f1b      	lsrs	r3, r3, #28
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	019a      	lsls	r2, r3, #6
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	061b      	lsls	r3, r3, #24
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	071b      	lsls	r3, r3, #28
 80048c2:	4944      	ldr	r1, [pc, #272]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048ca:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	493d      	ldr	r1, [pc, #244]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d022      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f8:	d11d      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048fa:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	0f1b      	lsrs	r3, r3, #28
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	019a      	lsls	r2, r3, #6
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	061b      	lsls	r3, r3, #24
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	4929      	ldr	r1, [pc, #164]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d028      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	0e1b      	lsrs	r3, r3, #24
 800494a:	f003 030f 	and.w	r3, r3, #15
 800494e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	019a      	lsls	r2, r3, #6
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	431a      	orrs	r2, r3
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	061b      	lsls	r3, r3, #24
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	071b      	lsls	r3, r3, #28
 8004976:	4917      	ldr	r1, [pc, #92]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800497e:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004984:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	4911      	ldr	r1, [pc, #68]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0e      	ldr	r2, [pc, #56]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a0:	f7fd fac0 	bl	8001f24 <HAL_GetTick>
 80049a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80049a8:	f7fd fabc 	bl	8001f24 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e007      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c6:	d1ef      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800

080049d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e049      	b.n	8004a7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fd f97c 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f000 f9ee 	bl	8004df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d001      	beq.n	8004aa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e04c      	b.n	8004b3a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a26      	ldr	r2, [pc, #152]	; (8004b48 <HAL_TIM_Base_Start+0xc0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aba:	d01d      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a22      	ldr	r2, [pc, #136]	; (8004b4c <HAL_TIM_Base_Start+0xc4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a21      	ldr	r2, [pc, #132]	; (8004b50 <HAL_TIM_Base_Start+0xc8>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <HAL_TIM_Base_Start+0xcc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <HAL_TIM_Base_Start+0xd0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <HAL_TIM_Base_Start+0xd4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIM_Base_Start+0x70>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <HAL_TIM_Base_Start+0xd8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d115      	bne.n	8004b24 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <HAL_TIM_Base_Start+0xdc>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2b06      	cmp	r3, #6
 8004b08:	d015      	beq.n	8004b36 <HAL_TIM_Base_Start+0xae>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b10:	d011      	beq.n	8004b36 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0201 	orr.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b22:	e008      	b.n	8004b36 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e000      	b.n	8004b38 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40010000 	.word	0x40010000
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800
 8004b54:	40000c00 	.word	0x40000c00
 8004b58:	40010400 	.word	0x40010400
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40001800 	.word	0x40001800
 8004b64:	00010007 	.word	0x00010007

08004b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0202 	mvn.w	r2, #2
 8004b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f905 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f8f7 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f908 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0204 	mvn.w	r2, #4
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f8db 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f8cd 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8de 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0208 	mvn.w	r2, #8
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8b1 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f8a3 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f8b4 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d122      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d11b      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0210 	mvn.w	r2, #16
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2208      	movs	r2, #8
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f887 	bl	8004dba <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f879 	bl	8004da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f88a 	bl	8004dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d10e      	bne.n	8004cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d107      	bne.n	8004cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0201 	mvn.w	r2, #1
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fc ff32 	bl	8001b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b80      	cmp	r3, #128	; 0x80
 8004cf8:	d10e      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b80      	cmp	r3, #128	; 0x80
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f9a8 	bl	8005068 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d26:	d10e      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d107      	bne.n	8004d46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f99b 	bl	800507c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b40      	cmp	r3, #64	; 0x40
 8004d52:	d10e      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5e:	2b40      	cmp	r3, #64	; 0x40
 8004d60:	d107      	bne.n	8004d72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f838 	bl	8004de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f003 0320 	and.w	r3, r3, #32
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	d10e      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0320 	and.w	r3, r3, #32
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d107      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f06f 0220 	mvn.w	r2, #32
 8004d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f95b 	bl	8005054 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a40      	ldr	r2, [pc, #256]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e16:	d00f      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a3d      	ldr	r2, [pc, #244]	; (8004f10 <TIM_Base_SetConfig+0x118>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a3c      	ldr	r2, [pc, #240]	; (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a3b      	ldr	r2, [pc, #236]	; (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x40>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3a      	ldr	r2, [pc, #232]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d02b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d027      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2c      	ldr	r2, [pc, #176]	; (8004f10 <TIM_Base_SetConfig+0x118>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d023      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a2b      	ldr	r2, [pc, #172]	; (8004f14 <TIM_Base_SetConfig+0x11c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01f      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2a      	ldr	r2, [pc, #168]	; (8004f18 <TIM_Base_SetConfig+0x120>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d01b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a29      	ldr	r2, [pc, #164]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d017      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a28      	ldr	r2, [pc, #160]	; (8004f20 <TIM_Base_SetConfig+0x128>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <TIM_Base_SetConfig+0x12c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00f      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <TIM_Base_SetConfig+0x130>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d00b      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <TIM_Base_SetConfig+0x134>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d007      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <TIM_Base_SetConfig+0x138>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a23      	ldr	r2, [pc, #140]	; (8004f34 <TIM_Base_SetConfig+0x13c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <TIM_Base_SetConfig+0x114>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_Base_SetConfig+0xf8>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <TIM_Base_SetConfig+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d103      	bne.n	8004ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	615a      	str	r2, [r3, #20]
}
 8004efe:	bf00      	nop
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800
 8004f18:	40000c00 	.word	0x40000c00
 8004f1c:	40010400 	.word	0x40010400
 8004f20:	40014000 	.word	0x40014000
 8004f24:	40014400 	.word	0x40014400
 8004f28:	40014800 	.word	0x40014800
 8004f2c:	40001800 	.word	0x40001800
 8004f30:	40001c00 	.word	0x40001c00
 8004f34:	40002000 	.word	0x40002000

08004f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e06d      	b.n	800502c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a30      	ldr	r2, [pc, #192]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a2f      	ldr	r2, [pc, #188]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a20      	ldr	r2, [pc, #128]	; (8005038 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d022      	beq.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc2:	d01d      	beq.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a1c      	ldr	r2, [pc, #112]	; (8005044 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1a      	ldr	r2, [pc, #104]	; (8005048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a15      	ldr	r2, [pc, #84]	; (800503c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a16      	ldr	r2, [pc, #88]	; (800504c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	; (8005050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10c      	bne.n	800501a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005006:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4313      	orrs	r3, r2
 8005010:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40010000 	.word	0x40010000
 800503c:	40010400 	.word	0x40010400
 8005040:	40000400 	.word	0x40000400
 8005044:	40000800 	.word	0x40000800
 8005048:	40000c00 	.word	0x40000c00
 800504c:	40014000 	.word	0x40014000
 8005050:	40001800 	.word	0x40001800

08005054 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e040      	b.n	8005124 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d106      	bne.n	80050b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7fc fe78 	bl	8001da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2224      	movs	r2, #36	; 0x24
 80050bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8c0 	bl	8005254 <UART_SetConfig>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e022      	b.n	8005124 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fb16 	bl	8005718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800510a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fb9d 	bl	800585c <UART_CheckIdleState>
 8005122:	4603      	mov	r3, r0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b08a      	sub	sp, #40	; 0x28
 8005130:	af02      	add	r7, sp, #8
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005140:	2b20      	cmp	r3, #32
 8005142:	f040 8081 	bne.w	8005248 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <HAL_UART_Transmit+0x26>
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e079      	b.n	800524a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_UART_Transmit+0x38>
 8005160:	2302      	movs	r3, #2
 8005162:	e072      	b.n	800524a <HAL_UART_Transmit+0x11e>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2221      	movs	r2, #33	; 0x21
 8005178:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800517a:	f7fc fed3 	bl	8001f24 <HAL_GetTick>
 800517e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	88fa      	ldrh	r2, [r7, #6]
 8005184:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005198:	d108      	bne.n	80051ac <HAL_UART_Transmit+0x80>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d104      	bne.n	80051ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e003      	b.n	80051b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051bc:	e02c      	b.n	8005218 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2200      	movs	r2, #0
 80051c6:	2180      	movs	r1, #128	; 0x80
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 fb90 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e038      	b.n	800524a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10b      	bne.n	80051f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	3302      	adds	r3, #2
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e007      	b.n	8005206 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	3301      	adds	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800521e:	b29b      	uxth	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1cc      	bne.n	80051be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2200      	movs	r2, #0
 800522c:	2140      	movs	r1, #64	; 0x40
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fb5d 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e005      	b.n	800524a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3720      	adds	r7, #32
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
	...

08005254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4ba7      	ldr	r3, [pc, #668]	; (800551c <UART_SetConfig+0x2c8>)
 8005280:	4013      	ands	r3, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	6979      	ldr	r1, [r7, #20]
 8005288:	430b      	orrs	r3, r1
 800528a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a95      	ldr	r2, [pc, #596]	; (8005520 <UART_SetConfig+0x2cc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d120      	bne.n	8005312 <UART_SetConfig+0xbe>
 80052d0:	4b94      	ldr	r3, [pc, #592]	; (8005524 <UART_SetConfig+0x2d0>)
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d816      	bhi.n	800530c <UART_SetConfig+0xb8>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x90>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005301 	.word	0x08005301
 80052ec:	080052fb 	.word	0x080052fb
 80052f0:	08005307 	.word	0x08005307
 80052f4:	2301      	movs	r3, #1
 80052f6:	77fb      	strb	r3, [r7, #31]
 80052f8:	e14f      	b.n	800559a <UART_SetConfig+0x346>
 80052fa:	2302      	movs	r3, #2
 80052fc:	77fb      	strb	r3, [r7, #31]
 80052fe:	e14c      	b.n	800559a <UART_SetConfig+0x346>
 8005300:	2304      	movs	r3, #4
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e149      	b.n	800559a <UART_SetConfig+0x346>
 8005306:	2308      	movs	r3, #8
 8005308:	77fb      	strb	r3, [r7, #31]
 800530a:	e146      	b.n	800559a <UART_SetConfig+0x346>
 800530c:	2310      	movs	r3, #16
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e143      	b.n	800559a <UART_SetConfig+0x346>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a84      	ldr	r2, [pc, #528]	; (8005528 <UART_SetConfig+0x2d4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d132      	bne.n	8005382 <UART_SetConfig+0x12e>
 800531c:	4b81      	ldr	r3, [pc, #516]	; (8005524 <UART_SetConfig+0x2d0>)
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d828      	bhi.n	800537c <UART_SetConfig+0x128>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0xdc>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005365 	.word	0x08005365
 8005334:	0800537d 	.word	0x0800537d
 8005338:	0800537d 	.word	0x0800537d
 800533c:	0800537d 	.word	0x0800537d
 8005340:	08005371 	.word	0x08005371
 8005344:	0800537d 	.word	0x0800537d
 8005348:	0800537d 	.word	0x0800537d
 800534c:	0800537d 	.word	0x0800537d
 8005350:	0800536b 	.word	0x0800536b
 8005354:	0800537d 	.word	0x0800537d
 8005358:	0800537d 	.word	0x0800537d
 800535c:	0800537d 	.word	0x0800537d
 8005360:	08005377 	.word	0x08005377
 8005364:	2300      	movs	r3, #0
 8005366:	77fb      	strb	r3, [r7, #31]
 8005368:	e117      	b.n	800559a <UART_SetConfig+0x346>
 800536a:	2302      	movs	r3, #2
 800536c:	77fb      	strb	r3, [r7, #31]
 800536e:	e114      	b.n	800559a <UART_SetConfig+0x346>
 8005370:	2304      	movs	r3, #4
 8005372:	77fb      	strb	r3, [r7, #31]
 8005374:	e111      	b.n	800559a <UART_SetConfig+0x346>
 8005376:	2308      	movs	r3, #8
 8005378:	77fb      	strb	r3, [r7, #31]
 800537a:	e10e      	b.n	800559a <UART_SetConfig+0x346>
 800537c:	2310      	movs	r3, #16
 800537e:	77fb      	strb	r3, [r7, #31]
 8005380:	e10b      	b.n	800559a <UART_SetConfig+0x346>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a69      	ldr	r2, [pc, #420]	; (800552c <UART_SetConfig+0x2d8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d120      	bne.n	80053ce <UART_SetConfig+0x17a>
 800538c:	4b65      	ldr	r3, [pc, #404]	; (8005524 <UART_SetConfig+0x2d0>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005396:	2b30      	cmp	r3, #48	; 0x30
 8005398:	d013      	beq.n	80053c2 <UART_SetConfig+0x16e>
 800539a:	2b30      	cmp	r3, #48	; 0x30
 800539c:	d814      	bhi.n	80053c8 <UART_SetConfig+0x174>
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d009      	beq.n	80053b6 <UART_SetConfig+0x162>
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d810      	bhi.n	80053c8 <UART_SetConfig+0x174>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <UART_SetConfig+0x15c>
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d006      	beq.n	80053bc <UART_SetConfig+0x168>
 80053ae:	e00b      	b.n	80053c8 <UART_SetConfig+0x174>
 80053b0:	2300      	movs	r3, #0
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e0f1      	b.n	800559a <UART_SetConfig+0x346>
 80053b6:	2302      	movs	r3, #2
 80053b8:	77fb      	strb	r3, [r7, #31]
 80053ba:	e0ee      	b.n	800559a <UART_SetConfig+0x346>
 80053bc:	2304      	movs	r3, #4
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	e0eb      	b.n	800559a <UART_SetConfig+0x346>
 80053c2:	2308      	movs	r3, #8
 80053c4:	77fb      	strb	r3, [r7, #31]
 80053c6:	e0e8      	b.n	800559a <UART_SetConfig+0x346>
 80053c8:	2310      	movs	r3, #16
 80053ca:	77fb      	strb	r3, [r7, #31]
 80053cc:	e0e5      	b.n	800559a <UART_SetConfig+0x346>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a57      	ldr	r2, [pc, #348]	; (8005530 <UART_SetConfig+0x2dc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d120      	bne.n	800541a <UART_SetConfig+0x1c6>
 80053d8:	4b52      	ldr	r3, [pc, #328]	; (8005524 <UART_SetConfig+0x2d0>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80053e2:	2bc0      	cmp	r3, #192	; 0xc0
 80053e4:	d013      	beq.n	800540e <UART_SetConfig+0x1ba>
 80053e6:	2bc0      	cmp	r3, #192	; 0xc0
 80053e8:	d814      	bhi.n	8005414 <UART_SetConfig+0x1c0>
 80053ea:	2b80      	cmp	r3, #128	; 0x80
 80053ec:	d009      	beq.n	8005402 <UART_SetConfig+0x1ae>
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d810      	bhi.n	8005414 <UART_SetConfig+0x1c0>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <UART_SetConfig+0x1a8>
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d006      	beq.n	8005408 <UART_SetConfig+0x1b4>
 80053fa:	e00b      	b.n	8005414 <UART_SetConfig+0x1c0>
 80053fc:	2300      	movs	r3, #0
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e0cb      	b.n	800559a <UART_SetConfig+0x346>
 8005402:	2302      	movs	r3, #2
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e0c8      	b.n	800559a <UART_SetConfig+0x346>
 8005408:	2304      	movs	r3, #4
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e0c5      	b.n	800559a <UART_SetConfig+0x346>
 800540e:	2308      	movs	r3, #8
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	e0c2      	b.n	800559a <UART_SetConfig+0x346>
 8005414:	2310      	movs	r3, #16
 8005416:	77fb      	strb	r3, [r7, #31]
 8005418:	e0bf      	b.n	800559a <UART_SetConfig+0x346>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a45      	ldr	r2, [pc, #276]	; (8005534 <UART_SetConfig+0x2e0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d125      	bne.n	8005470 <UART_SetConfig+0x21c>
 8005424:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <UART_SetConfig+0x2d0>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005432:	d017      	beq.n	8005464 <UART_SetConfig+0x210>
 8005434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005438:	d817      	bhi.n	800546a <UART_SetConfig+0x216>
 800543a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800543e:	d00b      	beq.n	8005458 <UART_SetConfig+0x204>
 8005440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005444:	d811      	bhi.n	800546a <UART_SetConfig+0x216>
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <UART_SetConfig+0x1fe>
 800544a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800544e:	d006      	beq.n	800545e <UART_SetConfig+0x20a>
 8005450:	e00b      	b.n	800546a <UART_SetConfig+0x216>
 8005452:	2300      	movs	r3, #0
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e0a0      	b.n	800559a <UART_SetConfig+0x346>
 8005458:	2302      	movs	r3, #2
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e09d      	b.n	800559a <UART_SetConfig+0x346>
 800545e:	2304      	movs	r3, #4
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e09a      	b.n	800559a <UART_SetConfig+0x346>
 8005464:	2308      	movs	r3, #8
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e097      	b.n	800559a <UART_SetConfig+0x346>
 800546a:	2310      	movs	r3, #16
 800546c:	77fb      	strb	r3, [r7, #31]
 800546e:	e094      	b.n	800559a <UART_SetConfig+0x346>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a30      	ldr	r2, [pc, #192]	; (8005538 <UART_SetConfig+0x2e4>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d125      	bne.n	80054c6 <UART_SetConfig+0x272>
 800547a:	4b2a      	ldr	r3, [pc, #168]	; (8005524 <UART_SetConfig+0x2d0>)
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005488:	d017      	beq.n	80054ba <UART_SetConfig+0x266>
 800548a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800548e:	d817      	bhi.n	80054c0 <UART_SetConfig+0x26c>
 8005490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005494:	d00b      	beq.n	80054ae <UART_SetConfig+0x25a>
 8005496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800549a:	d811      	bhi.n	80054c0 <UART_SetConfig+0x26c>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <UART_SetConfig+0x254>
 80054a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a4:	d006      	beq.n	80054b4 <UART_SetConfig+0x260>
 80054a6:	e00b      	b.n	80054c0 <UART_SetConfig+0x26c>
 80054a8:	2301      	movs	r3, #1
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e075      	b.n	800559a <UART_SetConfig+0x346>
 80054ae:	2302      	movs	r3, #2
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e072      	b.n	800559a <UART_SetConfig+0x346>
 80054b4:	2304      	movs	r3, #4
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e06f      	b.n	800559a <UART_SetConfig+0x346>
 80054ba:	2308      	movs	r3, #8
 80054bc:	77fb      	strb	r3, [r7, #31]
 80054be:	e06c      	b.n	800559a <UART_SetConfig+0x346>
 80054c0:	2310      	movs	r3, #16
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e069      	b.n	800559a <UART_SetConfig+0x346>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1c      	ldr	r2, [pc, #112]	; (800553c <UART_SetConfig+0x2e8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d137      	bne.n	8005540 <UART_SetConfig+0x2ec>
 80054d0:	4b14      	ldr	r3, [pc, #80]	; (8005524 <UART_SetConfig+0x2d0>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054de:	d017      	beq.n	8005510 <UART_SetConfig+0x2bc>
 80054e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054e4:	d817      	bhi.n	8005516 <UART_SetConfig+0x2c2>
 80054e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ea:	d00b      	beq.n	8005504 <UART_SetConfig+0x2b0>
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f0:	d811      	bhi.n	8005516 <UART_SetConfig+0x2c2>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <UART_SetConfig+0x2aa>
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	d006      	beq.n	800550a <UART_SetConfig+0x2b6>
 80054fc:	e00b      	b.n	8005516 <UART_SetConfig+0x2c2>
 80054fe:	2300      	movs	r3, #0
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e04a      	b.n	800559a <UART_SetConfig+0x346>
 8005504:	2302      	movs	r3, #2
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e047      	b.n	800559a <UART_SetConfig+0x346>
 800550a:	2304      	movs	r3, #4
 800550c:	77fb      	strb	r3, [r7, #31]
 800550e:	e044      	b.n	800559a <UART_SetConfig+0x346>
 8005510:	2308      	movs	r3, #8
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e041      	b.n	800559a <UART_SetConfig+0x346>
 8005516:	2310      	movs	r3, #16
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e03e      	b.n	800559a <UART_SetConfig+0x346>
 800551c:	efff69f3 	.word	0xefff69f3
 8005520:	40011000 	.word	0x40011000
 8005524:	40023800 	.word	0x40023800
 8005528:	40004400 	.word	0x40004400
 800552c:	40004800 	.word	0x40004800
 8005530:	40004c00 	.word	0x40004c00
 8005534:	40005000 	.word	0x40005000
 8005538:	40011400 	.word	0x40011400
 800553c:	40007800 	.word	0x40007800
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a71      	ldr	r2, [pc, #452]	; (800570c <UART_SetConfig+0x4b8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d125      	bne.n	8005596 <UART_SetConfig+0x342>
 800554a:	4b71      	ldr	r3, [pc, #452]	; (8005710 <UART_SetConfig+0x4bc>)
 800554c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005550:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005554:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005558:	d017      	beq.n	800558a <UART_SetConfig+0x336>
 800555a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800555e:	d817      	bhi.n	8005590 <UART_SetConfig+0x33c>
 8005560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005564:	d00b      	beq.n	800557e <UART_SetConfig+0x32a>
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556a:	d811      	bhi.n	8005590 <UART_SetConfig+0x33c>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <UART_SetConfig+0x324>
 8005570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005574:	d006      	beq.n	8005584 <UART_SetConfig+0x330>
 8005576:	e00b      	b.n	8005590 <UART_SetConfig+0x33c>
 8005578:	2300      	movs	r3, #0
 800557a:	77fb      	strb	r3, [r7, #31]
 800557c:	e00d      	b.n	800559a <UART_SetConfig+0x346>
 800557e:	2302      	movs	r3, #2
 8005580:	77fb      	strb	r3, [r7, #31]
 8005582:	e00a      	b.n	800559a <UART_SetConfig+0x346>
 8005584:	2304      	movs	r3, #4
 8005586:	77fb      	strb	r3, [r7, #31]
 8005588:	e007      	b.n	800559a <UART_SetConfig+0x346>
 800558a:	2308      	movs	r3, #8
 800558c:	77fb      	strb	r3, [r7, #31]
 800558e:	e004      	b.n	800559a <UART_SetConfig+0x346>
 8005590:	2310      	movs	r3, #16
 8005592:	77fb      	strb	r3, [r7, #31]
 8005594:	e001      	b.n	800559a <UART_SetConfig+0x346>
 8005596:	2310      	movs	r3, #16
 8005598:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a2:	d15b      	bne.n	800565c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80055a4:	7ffb      	ldrb	r3, [r7, #31]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d827      	bhi.n	80055fa <UART_SetConfig+0x3a6>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x35c>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	080055dd 	.word	0x080055dd
 80055b8:	080055e5 	.word	0x080055e5
 80055bc:	080055fb 	.word	0x080055fb
 80055c0:	080055eb 	.word	0x080055eb
 80055c4:	080055fb 	.word	0x080055fb
 80055c8:	080055fb 	.word	0x080055fb
 80055cc:	080055fb 	.word	0x080055fb
 80055d0:	080055f3 	.word	0x080055f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d4:	f7fe fdb0 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 80055d8:	61b8      	str	r0, [r7, #24]
        break;
 80055da:	e013      	b.n	8005604 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055dc:	f7fe fdc0 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 80055e0:	61b8      	str	r0, [r7, #24]
        break;
 80055e2:	e00f      	b.n	8005604 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055e4:	4b4b      	ldr	r3, [pc, #300]	; (8005714 <UART_SetConfig+0x4c0>)
 80055e6:	61bb      	str	r3, [r7, #24]
        break;
 80055e8:	e00c      	b.n	8005604 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ea:	f7fe fce3 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80055ee:	61b8      	str	r0, [r7, #24]
        break;
 80055f0:	e008      	b.n	8005604 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f6:	61bb      	str	r3, [r7, #24]
        break;
 80055f8:	e004      	b.n	8005604 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	77bb      	strb	r3, [r7, #30]
        break;
 8005602:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d074      	beq.n	80056f4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	005a      	lsls	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	441a      	add	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	fbb2 f3f3 	udiv	r3, r2, r3
 800561e:	b29b      	uxth	r3, r3
 8005620:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b0f      	cmp	r3, #15
 8005626:	d916      	bls.n	8005656 <UART_SetConfig+0x402>
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562e:	d212      	bcs.n	8005656 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	b29b      	uxth	r3, r3
 8005634:	f023 030f 	bic.w	r3, r3, #15
 8005638:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	b29b      	uxth	r3, r3
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	b29a      	uxth	r2, r3
 8005646:	89fb      	ldrh	r3, [r7, #14]
 8005648:	4313      	orrs	r3, r2
 800564a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	89fa      	ldrh	r2, [r7, #14]
 8005652:	60da      	str	r2, [r3, #12]
 8005654:	e04e      	b.n	80056f4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	77bb      	strb	r3, [r7, #30]
 800565a:	e04b      	b.n	80056f4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800565c:	7ffb      	ldrb	r3, [r7, #31]
 800565e:	2b08      	cmp	r3, #8
 8005660:	d827      	bhi.n	80056b2 <UART_SetConfig+0x45e>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <UART_SetConfig+0x414>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	0800568d 	.word	0x0800568d
 800566c:	08005695 	.word	0x08005695
 8005670:	0800569d 	.word	0x0800569d
 8005674:	080056b3 	.word	0x080056b3
 8005678:	080056a3 	.word	0x080056a3
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056b3 	.word	0x080056b3
 8005684:	080056b3 	.word	0x080056b3
 8005688:	080056ab 	.word	0x080056ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fe fd54 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8005690:	61b8      	str	r0, [r7, #24]
        break;
 8005692:	e013      	b.n	80056bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005694:	f7fe fd64 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 8005698:	61b8      	str	r0, [r7, #24]
        break;
 800569a:	e00f      	b.n	80056bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800569c:	4b1d      	ldr	r3, [pc, #116]	; (8005714 <UART_SetConfig+0x4c0>)
 800569e:	61bb      	str	r3, [r7, #24]
        break;
 80056a0:	e00c      	b.n	80056bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056a2:	f7fe fc87 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80056a6:	61b8      	str	r0, [r7, #24]
        break;
 80056a8:	e008      	b.n	80056bc <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ae:	61bb      	str	r3, [r7, #24]
        break;
 80056b0:	e004      	b.n	80056bc <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	77bb      	strb	r3, [r7, #30]
        break;
 80056ba:	bf00      	nop
    }

    if (pclk != 0U)
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d018      	beq.n	80056f4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	085a      	lsrs	r2, r3, #1
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	441a      	add	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b0f      	cmp	r3, #15
 80056dc:	d908      	bls.n	80056f0 <UART_SetConfig+0x49c>
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e4:	d204      	bcs.n	80056f0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	e001      	b.n	80056f4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005700:	7fbb      	ldrb	r3, [r7, #30]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3720      	adds	r7, #32
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	40007c00 	.word	0x40007c00
 8005710:	40023800 	.word	0x40023800
 8005714:	00f42400 	.word	0x00f42400

08005718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01a      	beq.n	800582e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005816:	d10a      	bne.n	800582e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	605a      	str	r2, [r3, #4]
  }
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af02      	add	r7, sp, #8
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800586c:	f7fc fb5a 	bl	8001f24 <HAL_GetTick>
 8005870:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b08      	cmp	r3, #8
 800587e:	d10e      	bne.n	800589e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f82d 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e023      	b.n	80058e6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d10e      	bne.n	80058ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f817 	bl	80058ee <UART_WaitOnFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e00d      	b.n	80058e6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	603b      	str	r3, [r7, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058fe:	e05e      	b.n	80059be <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d05a      	beq.n	80059be <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005908:	f7fc fb0c 	bl	8001f24 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	429a      	cmp	r2, r3
 8005916:	d302      	bcc.n	800591e <UART_WaitOnFlagUntilTimeout+0x30>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d11b      	bne.n	8005956 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800592c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e043      	b.n	80059de <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d02c      	beq.n	80059be <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800596e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005972:	d124      	bne.n	80059be <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800597c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800598c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e00f      	b.n	80059de <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d091      	beq.n	8005900 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	; (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	; (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	; (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	; (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 f864 	bl	8005ac8 <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08005ecc 	.word	0x08005ecc
 8005a24:	08005ecc 	.word	0x08005ecc
 8005a28:	08005ecc 	.word	0x08005ecc
 8005a2c:	08005ed0 	.word	0x08005ed0

08005a30 <memset>:
 8005a30:	4402      	add	r2, r0
 8005a32:	4603      	mov	r3, r0
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d100      	bne.n	8005a3a <memset+0xa>
 8005a38:	4770      	bx	lr
 8005a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a3e:	e7f9      	b.n	8005a34 <memset+0x4>

08005a40 <__utoa>:
 8005a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a42:	4c1f      	ldr	r4, [pc, #124]	; (8005ac0 <__utoa+0x80>)
 8005a44:	b08b      	sub	sp, #44	; 0x2c
 8005a46:	4605      	mov	r5, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	466e      	mov	r6, sp
 8005a4c:	f104 0c20 	add.w	ip, r4, #32
 8005a50:	6820      	ldr	r0, [r4, #0]
 8005a52:	6861      	ldr	r1, [r4, #4]
 8005a54:	4637      	mov	r7, r6
 8005a56:	c703      	stmia	r7!, {r0, r1}
 8005a58:	3408      	adds	r4, #8
 8005a5a:	4564      	cmp	r4, ip
 8005a5c:	463e      	mov	r6, r7
 8005a5e:	d1f7      	bne.n	8005a50 <__utoa+0x10>
 8005a60:	7921      	ldrb	r1, [r4, #4]
 8005a62:	7139      	strb	r1, [r7, #4]
 8005a64:	1e91      	subs	r1, r2, #2
 8005a66:	6820      	ldr	r0, [r4, #0]
 8005a68:	6038      	str	r0, [r7, #0]
 8005a6a:	2922      	cmp	r1, #34	; 0x22
 8005a6c:	f04f 0100 	mov.w	r1, #0
 8005a70:	d904      	bls.n	8005a7c <__utoa+0x3c>
 8005a72:	7019      	strb	r1, [r3, #0]
 8005a74:	460b      	mov	r3, r1
 8005a76:	4618      	mov	r0, r3
 8005a78:	b00b      	add	sp, #44	; 0x2c
 8005a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a7c:	1e58      	subs	r0, r3, #1
 8005a7e:	4684      	mov	ip, r0
 8005a80:	fbb5 f7f2 	udiv	r7, r5, r2
 8005a84:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005a88:	fb02 5617 	mls	r6, r2, r7, r5
 8005a8c:	4476      	add	r6, lr
 8005a8e:	460c      	mov	r4, r1
 8005a90:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005a94:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005a98:	462e      	mov	r6, r5
 8005a9a:	42b2      	cmp	r2, r6
 8005a9c:	f101 0101 	add.w	r1, r1, #1
 8005aa0:	463d      	mov	r5, r7
 8005aa2:	d9ed      	bls.n	8005a80 <__utoa+0x40>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	545a      	strb	r2, [r3, r1]
 8005aa8:	1919      	adds	r1, r3, r4
 8005aaa:	1aa5      	subs	r5, r4, r2
 8005aac:	42aa      	cmp	r2, r5
 8005aae:	dae2      	bge.n	8005a76 <__utoa+0x36>
 8005ab0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005ab4:	780e      	ldrb	r6, [r1, #0]
 8005ab6:	7006      	strb	r6, [r0, #0]
 8005ab8:	3201      	adds	r2, #1
 8005aba:	f801 5901 	strb.w	r5, [r1], #-1
 8005abe:	e7f4      	b.n	8005aaa <__utoa+0x6a>
 8005ac0:	08005e9c 	.word	0x08005e9c

08005ac4 <utoa>:
 8005ac4:	f7ff bfbc 	b.w	8005a40 <__utoa>

08005ac8 <_init>:
 8005ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aca:	bf00      	nop
 8005acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ace:	bc08      	pop	{r3}
 8005ad0:	469e      	mov	lr, r3
 8005ad2:	4770      	bx	lr

08005ad4 <_fini>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	bf00      	nop
 8005ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ada:	bc08      	pop	{r3}
 8005adc:	469e      	mov	lr, r3
 8005ade:	4770      	bx	lr
