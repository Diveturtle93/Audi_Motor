
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a2c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08004c24  08004c24  00014c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f40  08004f40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f40  08004f40  00014f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f48  08004f48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08004f5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004f5c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f34b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002695  00000000  00000000  0002f385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00031a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  000324e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298d0  00000000  00000000  00032e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e964  00000000  00000000  0005c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb69d  00000000  00000000  0006b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f4  00000000  00000000  001667ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004c0c 	.word	0x08004c0c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004c0c 	.word	0x08004c0c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f003 fe73 	bl	8004240 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000ac 	.word	0x200000ac

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	itoa(number, str, base);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	f107 010c 	add.w	r1, r7, #12
 800057a:	4618      	mov	r0, r3
 800057c:	f004 fafa 	bl	8004b74 <itoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f003 fe52 	bl	8004240 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000ac 	.word	0x200000ac

080005a8 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80005ac:	2112      	movs	r1, #18
 80005ae:	4822      	ldr	r0, [pc, #136]	; (8000638 <collectMiddlewareInfo+0x90>)
 80005b0:	f7ff ffc6 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);					// CMSIS Version anzeigen
 80005b4:	210a      	movs	r1, #10
 80005b6:	2005      	movs	r0, #5
 80005b8:	f7ff ffd6 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 80005bc:	2101      	movs	r1, #1
 80005be:	481f      	ldr	r0, [pc, #124]	; (800063c <collectMiddlewareInfo+0x94>)
 80005c0:	f7ff ffbe 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);					// CMSIS Version anzeigen
 80005c4:	210a      	movs	r1, #10
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff ffce 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));		// Hal Version anzeigen
 80005cc:	2110      	movs	r1, #16
 80005ce:	481c      	ldr	r0, [pc, #112]	; (8000640 <collectMiddlewareInfo+0x98>)
 80005d0:	f7ff ffb6 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80005d4:	f001 fcc0 	bl	8001f58 <HAL_GetHalVersion>
 80005d8:	4603      	mov	r3, r0
 80005da:	0e1b      	lsrs	r3, r3, #24
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	210a      	movs	r1, #10
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffc1 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 80005e6:	2101      	movs	r1, #1
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <collectMiddlewareInfo+0x94>)
 80005ea:	f7ff ffa9 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80005ee:	f001 fcb3 	bl	8001f58 <HAL_GetHalVersion>
 80005f2:	4603      	mov	r3, r0
 80005f4:	0c1b      	lsrs	r3, r3, #16
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	210a      	movs	r1, #10
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffb4 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 8000600:	2101      	movs	r1, #1
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <collectMiddlewareInfo+0x94>)
 8000604:	f7ff ff9c 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000608:	f001 fca6 	bl	8001f58 <HAL_GetHalVersion>
 800060c:	4603      	mov	r3, r0
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	b2db      	uxtb	r3, r3
 8000612:	210a      	movs	r1, #10
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffa7 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 800061a:	2101      	movs	r1, #1
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <collectMiddlewareInfo+0x94>)
 800061e:	f7ff ff8f 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000622:	f001 fc99 	bl	8001f58 <HAL_GetHalVersion>
 8000626:	4603      	mov	r3, r0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	210a      	movs	r1, #10
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff9b 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);					// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	08004c24 	.word	0x08004c24
 800063c:	08004c38 	.word	0x08004c38
 8000640:	08004c3c 	.word	0x08004c3c

08000644 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 8000648:	2110      	movs	r1, #16
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <collectSoftwareInfo+0x60>)
 800064c:	f7ff ff78 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));						// Git Commit anzeigen
 8000650:	2108      	movs	r1, #8
 8000652:	4815      	ldr	r0, [pc, #84]	; (80006a8 <collectSoftwareInfo+0x64>)
 8000654:	f7ff ff74 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000658:	210f      	movs	r1, #15
 800065a:	4814      	ldr	r0, [pc, #80]	; (80006ac <collectSoftwareInfo+0x68>)
 800065c:	f7ff ff70 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));						// Git Branch anzeigen
 8000660:	210c      	movs	r1, #12
 8000662:	4813      	ldr	r0, [pc, #76]	; (80006b0 <collectSoftwareInfo+0x6c>)
 8000664:	f7ff ff6c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000668:	210d      	movs	r1, #13
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <collectSoftwareInfo+0x70>)
 800066c:	f7ff ff68 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));							// Git Hash anzeigen
 8000670:	2129      	movs	r1, #41	; 0x29
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <collectSoftwareInfo+0x74>)
 8000674:	f7ff ff64 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000678:	210f      	movs	r1, #15
 800067a:	4810      	ldr	r0, [pc, #64]	; (80006bc <collectSoftwareInfo+0x78>)
 800067c:	f7ff ff60 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));						// Kompilierdatum anzeigen
 8000680:	210c      	movs	r1, #12
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <collectSoftwareInfo+0x7c>)
 8000684:	f7ff ff5c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000688:	210f      	movs	r1, #15
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <collectSoftwareInfo+0x80>)
 800068c:	f7ff ff58 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));						// Kompilierzeit anzeigen
 8000690:	2109      	movs	r1, #9
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <collectSoftwareInfo+0x84>)
 8000694:	f7ff ff54 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);
 8000698:	2101      	movs	r1, #1
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <collectSoftwareInfo+0x88>)
 800069c:	f7ff ff50 	bl	8000540 <uartTransmit>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	08004c4c 	.word	0x08004c4c
 80006a8:	08004c5c 	.word	0x08004c5c
 80006ac:	08004c64 	.word	0x08004c64
 80006b0:	08004c74 	.word	0x08004c74
 80006b4:	08004c80 	.word	0x08004c80
 80006b8:	08004c90 	.word	0x08004c90
 80006bc:	08004cbc 	.word	0x08004cbc
 80006c0:	08004ccc 	.word	0x08004ccc
 80006c4:	08004cd8 	.word	0x08004cd8
 80006c8:	08004ce8 	.word	0x08004ce8
 80006cc:	08004cf4 	.word	0x08004cf4

080006d0 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80006d6:	2113      	movs	r1, #19
 80006d8:	483b      	ldr	r0, [pc, #236]	; (80007c8 <collectHardwareInfo+0xf8>)
 80006da:	f7ff ff31 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);								// Mikrocontroller Typ
 80006de:	f001 fc51 	bl	8001f84 <HAL_GetDEVID>
 80006e2:	4603      	mov	r3, r0
 80006e4:	210a      	movs	r1, #10
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff3e 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80006ec:	2115      	movs	r1, #21
 80006ee:	4837      	ldr	r0, [pc, #220]	; (80007cc <collectHardwareInfo+0xfc>)
 80006f0:	f7ff ff26 	bl	8000540 <uartTransmit>
	
	switch(HAL_GetREVID())												// Mikrocontroller Revision
 80006f4:	f001 fc3a 	bl	8001f6c <HAL_GetREVID>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f242 0201 	movw	r2, #8193	; 0x2001
 80006fe:	4293      	cmp	r3, r2
 8000700:	d016      	beq.n	8000730 <collectHardwareInfo+0x60>
 8000702:	f242 0201 	movw	r2, #8193	; 0x2001
 8000706:	4293      	cmp	r3, r2
 8000708:	d817      	bhi.n	800073a <collectHardwareInfo+0x6a>
 800070a:	f241 0201 	movw	r2, #4097	; 0x1001
 800070e:	4293      	cmp	r3, r2
 8000710:	d004      	beq.n	800071c <collectHardwareInfo+0x4c>
 8000712:	f241 0203 	movw	r2, #4099	; 0x1003
 8000716:	4293      	cmp	r3, r2
 8000718:	d005      	beq.n	8000726 <collectHardwareInfo+0x56>
 800071a:	e00e      	b.n	800073a <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 800071c:	2101      	movs	r1, #1
 800071e:	482c      	ldr	r0, [pc, #176]	; (80007d0 <collectHardwareInfo+0x100>)
 8000720:	f7ff ff0e 	bl	8000540 <uartTransmit>
			break;
 8000724:	e011      	b.n	800074a <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000726:	2101      	movs	r1, #1
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <collectHardwareInfo+0x104>)
 800072a:	f7ff ff09 	bl	8000540 <uartTransmit>
			break;
 800072e:	e00c      	b.n	800074a <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000730:	2101      	movs	r1, #1
 8000732:	4829      	ldr	r0, [pc, #164]	; (80007d8 <collectHardwareInfo+0x108>)
 8000734:	f7ff ff04 	bl	8000540 <uartTransmit>
			break;
 8000738:	e007      	b.n	800074a <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800073a:	f001 fc17 	bl	8001f6c <HAL_GetREVID>
 800073e:	4603      	mov	r3, r0
 8000740:	210a      	movs	r1, #10
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff10 	bl	8000568 <uartTransmitNumber>
			break;
 8000748:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 800074a:	2113      	movs	r1, #19
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <collectHardwareInfo+0x10c>)
 800074e:	f7ff fef7 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();					// Systemfrequenz ausgeben
 8000752:	f003 f815 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8000756:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <collectHardwareInfo+0x110>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	0c9b      	lsrs	r3, r3, #18
 8000762:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000764:	210a      	movs	r1, #10
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff fefe 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 800076c:	2104      	movs	r1, #4
 800076e:	481d      	ldr	r0, [pc, #116]	; (80007e4 <collectHardwareInfo+0x114>)
 8000770:	f7ff fee6 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000774:	210f      	movs	r1, #15
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <collectHardwareInfo+0x118>)
 8000778:	f7ff fee2 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);								// UID0 ausgeben
 800077c:	f001 fc10 	bl	8001fa0 <HAL_GetUIDw0>
 8000780:	4603      	mov	r3, r0
 8000782:	2110      	movs	r1, #16
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff feef 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 800078a:	2101      	movs	r1, #1
 800078c:	4817      	ldr	r0, [pc, #92]	; (80007ec <collectHardwareInfo+0x11c>)
 800078e:	f7ff fed7 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);								// UID1 ausgeben
 8000792:	f001 fc11 	bl	8001fb8 <HAL_GetUIDw1>
 8000796:	4603      	mov	r3, r0
 8000798:	2110      	movs	r1, #16
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fee4 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80007a0:	2101      	movs	r1, #1
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <collectHardwareInfo+0x11c>)
 80007a4:	f7ff fecc 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);								// UID2 ausgeben
 80007a8:	f001 fc12 	bl	8001fd0 <HAL_GetUIDw2>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2110      	movs	r1, #16
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fed9 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80007b6:	2101      	movs	r1, #1
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <collectHardwareInfo+0x120>)
 80007ba:	f7ff fec1 	bl	8000540 <uartTransmit>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	08004cf8 	.word	0x08004cf8
 80007cc:	08004d0c 	.word	0x08004d0c
 80007d0:	08004d24 	.word	0x08004d24
 80007d4:	08004d28 	.word	0x08004d28
 80007d8:	08004d2c 	.word	0x08004d2c
 80007dc:	08004d30 	.word	0x08004d30
 80007e0:	431bde83 	.word	0x431bde83
 80007e4:	08004d44 	.word	0x08004d44
 80007e8:	08004d4c 	.word	0x08004d4c
 80007ec:	08004d5c 	.word	0x08004d5c
 80007f0:	08004cf4 	.word	0x08004cf4

080007f4 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80007f8:	2111      	movs	r1, #17
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <collectSystemInfo+0x34>)
 80007fc:	f7ff fea0 	bl	8000540 <uartTransmit>
	collectHardwareInfo();												// Sammelt Hardware Informationen und gibt diese über Uart aus
 8000800:	f7ff ff66 	bl	80006d0 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000804:	2111      	movs	r1, #17
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <collectSystemInfo+0x38>)
 8000808:	f7ff fe9a 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();												// Sammelt Software Informationen und gibt diese über Uart aus
 800080c:	f7ff ff1a 	bl	8000644 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000810:	2113      	movs	r1, #19
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <collectSystemInfo+0x3c>)
 8000814:	f7ff fe94 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();											// Sammelt Middleware Informationen und gibt diese über Uart aus
 8000818:	f7ff fec6 	bl	80005a8 <collectMiddlewareInfo>

	uartTransmit("\n", 1);
 800081c:	2101      	movs	r1, #1
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <collectSystemInfo+0x40>)
 8000820:	f7ff fe8e 	bl	8000540 <uartTransmit>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08004d60 	.word	0x08004d60
 800082c:	08004d74 	.word	0x08004d74
 8000830:	08004d88 	.word	0x08004d88
 8000834:	08004cf4 	.word	0x08004cf4

08000838 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800083e:	2300      	movs	r3, #0
 8000840:	71fb      	strb	r3, [r7, #7]

	// Prüfe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <readResetSource+0xa0>)
 8000844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <readResetSource+0xa0>)
 8000856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000858:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	3302      	adds	r3, #2
 8000864:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <readResetSource+0xa0>)
 8000868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800086a:	2b00      	cmp	r3, #0
 800086c:	da02      	bge.n	8000874 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	3304      	adds	r3, #4
 8000872:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <readResetSource+0xa0>)
 8000876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3308      	adds	r3, #8
 8000884:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <readResetSource+0xa0>)
 8000888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800088a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	3310      	adds	r3, #16
 8000896:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <readResetSource+0xa0>)
 800089a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	3320      	adds	r3, #32
 80008a8:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <readResetSource+0xa0>)
 80008ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	3340      	adds	r3, #64	; 0x40
 80008ba:	71fb      	strb	r3, [r7, #7]
	}

	// Lösche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <readResetSource+0xa0>)
 80008be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <readResetSource+0xa0>)
 80008c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008c6:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	if (reset_flags == STARTUP)											// Regulärer Start
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <printResetSource+0x1a>
	{
		uartTransmit("Regular Start\r\n", 15);
 80008ec:	210f      	movs	r1, #15
 80008ee:	4827      	ldr	r0, [pc, #156]	; (800098c <printResetSource+0xb0>)
 80008f0:	f7ff fe26 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80008f4:	e046      	b.n	8000984 <printResetSource+0xa8>
		if (reset_flags & IWDG1)										// Interner watchdog Reset
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d003      	beq.n	8000908 <printResetSource+0x2c>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000900:	2118      	movs	r1, #24
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <printResetSource+0xb4>)
 8000904:	f7ff fe1c 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)										// Window watchdog Reset
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d003      	beq.n	800091a <printResetSource+0x3e>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000912:	2116      	movs	r1, #22
 8000914:	481f      	ldr	r0, [pc, #124]	; (8000994 <printResetSource+0xb8>)
 8000916:	f7ff fe13 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)										// CPU Reset
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <printResetSource+0x50>
			uartTransmit("CPU Reset\n", 10);
 8000924:	210a      	movs	r1, #10
 8000926:	481c      	ldr	r0, [pc, #112]	; (8000998 <printResetSource+0xbc>)
 8000928:	f7ff fe0a 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)										// Brown out Reset
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <printResetSource+0x62>
			uartTransmit("Brown Out Reset\n", 16);
 8000936:	2110      	movs	r1, #16
 8000938:	4818      	ldr	r0, [pc, #96]	; (800099c <printResetSource+0xc0>)
 800093a:	f7ff fe01 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)										//Power on Reset / Power down Reser
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <printResetSource+0x74>
			uartTransmit("Power On Reset\n", 15);
 8000948:	210f      	movs	r1, #15
 800094a:	4815      	ldr	r0, [pc, #84]	; (80009a0 <printResetSource+0xc4>)
 800094c:	f7ff fdf8 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)										// Software Reset
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 0320 	and.w	r3, r3, #32
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <printResetSource+0x86>
			uartTransmit("Software Reset\n", 15);
 800095a:	210f      	movs	r1, #15
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <printResetSource+0xc8>)
 800095e:	f7ff fdef 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)										//NRST pin
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000968:	2b00      	cmp	r3, #0
 800096a:	d003      	beq.n	8000974 <printResetSource+0x98>
			uartTransmit("PIN Reset\n", 10);
 800096c:	210a      	movs	r1, #10
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <printResetSource+0xcc>)
 8000970:	f7ff fde6 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	da03      	bge.n	8000984 <printResetSource+0xa8>
			uartTransmit("RMVF\n", 5);
 800097c:	2105      	movs	r1, #5
 800097e:	480b      	ldr	r0, [pc, #44]	; (80009ac <printResetSource+0xd0>)
 8000980:	f7ff fdde 	bl	8000540 <uartTransmit>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	08004d9c 	.word	0x08004d9c
 8000990:	08004dac 	.word	0x08004dac
 8000994:	08004dc8 	.word	0x08004dc8
 8000998:	08004de0 	.word	0x08004de0
 800099c:	08004dec 	.word	0x08004dec
 80009a0:	08004e00 	.word	0x08004e00
 80009a4:	08004e10 	.word	0x08004e10
 80009a8:	08004e20 	.word	0x08004e20
 80009ac:	08004e2c 	.word	0x08004e2c

080009b0 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);
 80009b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b8:	48ce      	ldr	r0, [pc, #824]	; (8000cf4 <readall_inputs+0x344>)
 80009ba:	f002 fac5 	bl	8002f48 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	b2d9      	uxtb	r1, r3
 80009c6:	4acc      	ldr	r2, [pc, #816]	; (8000cf8 <readall_inputs+0x348>)
 80009c8:	7813      	ldrb	r3, [r2, #0]
 80009ca:	f361 0300 	bfi	r3, r1, #0, #1
 80009ce:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);
 80009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d4:	48c7      	ldr	r0, [pc, #796]	; (8000cf4 <readall_inputs+0x344>)
 80009d6:	f002 fab7 	bl	8002f48 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	b2d9      	uxtb	r1, r3
 80009e2:	4ac5      	ldr	r2, [pc, #788]	; (8000cf8 <readall_inputs+0x348>)
 80009e4:	7813      	ldrb	r3, [r2, #0]
 80009e6:	f361 0341 	bfi	r3, r1, #1, #1
 80009ea:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	48c0      	ldr	r0, [pc, #768]	; (8000cf4 <readall_inputs+0x344>)
 80009f2:	f002 faa9 	bl	8002f48 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	b2d9      	uxtb	r1, r3
 80009fe:	4abe      	ldr	r2, [pc, #760]	; (8000cf8 <readall_inputs+0x348>)
 8000a00:	7813      	ldrb	r3, [r2, #0]
 8000a02:	f361 0382 	bfi	r3, r1, #2, #1
 8000a06:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);
 8000a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0c:	48b9      	ldr	r0, [pc, #740]	; (8000cf4 <readall_inputs+0x344>)
 8000a0e:	f002 fa9b 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	b2d9      	uxtb	r1, r3
 8000a1a:	4ab7      	ldr	r2, [pc, #732]	; (8000cf8 <readall_inputs+0x348>)
 8000a1c:	7813      	ldrb	r3, [r2, #0]
 8000a1e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a22:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);
 8000a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a28:	48b2      	ldr	r0, [pc, #712]	; (8000cf4 <readall_inputs+0x344>)
 8000a2a:	f002 fa8d 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	b2d9      	uxtb	r1, r3
 8000a36:	4ab0      	ldr	r2, [pc, #704]	; (8000cf8 <readall_inputs+0x348>)
 8000a38:	7813      	ldrb	r3, [r2, #0]
 8000a3a:	f361 1304 	bfi	r3, r1, #4, #1
 8000a3e:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);
 8000a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a44:	48ad      	ldr	r0, [pc, #692]	; (8000cfc <readall_inputs+0x34c>)
 8000a46:	f002 fa7f 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	b2d9      	uxtb	r1, r3
 8000a52:	4aa9      	ldr	r2, [pc, #676]	; (8000cf8 <readall_inputs+0x348>)
 8000a54:	7813      	ldrb	r3, [r2, #0]
 8000a56:	f361 1345 	bfi	r3, r1, #5, #1
 8000a5a:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	48a7      	ldr	r0, [pc, #668]	; (8000cfc <readall_inputs+0x34c>)
 8000a60:	f002 fa72 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	b2d9      	uxtb	r1, r3
 8000a6c:	4aa2      	ldr	r2, [pc, #648]	; (8000cf8 <readall_inputs+0x348>)
 8000a6e:	7813      	ldrb	r3, [r2, #0]
 8000a70:	f361 1386 	bfi	r3, r1, #6, #1
 8000a74:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);
 8000a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7a:	48a1      	ldr	r0, [pc, #644]	; (8000d00 <readall_inputs+0x350>)
 8000a7c:	f002 fa64 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	b2d9      	uxtb	r1, r3
 8000a88:	4a9b      	ldr	r2, [pc, #620]	; (8000cf8 <readall_inputs+0x348>)
 8000a8a:	7813      	ldrb	r3, [r2, #0]
 8000a8c:	f361 13c7 	bfi	r3, r1, #7, #1
 8000a90:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	489b      	ldr	r0, [pc, #620]	; (8000d04 <readall_inputs+0x354>)
 8000a98:	f002 fa56 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	b2d9      	uxtb	r1, r3
 8000aa4:	4a94      	ldr	r2, [pc, #592]	; (8000cf8 <readall_inputs+0x348>)
 8000aa6:	7853      	ldrb	r3, [r2, #1]
 8000aa8:	f361 0300 	bfi	r3, r1, #0, #1
 8000aac:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4895      	ldr	r0, [pc, #596]	; (8000d08 <readall_inputs+0x358>)
 8000ab2:	f002 fa49 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	b2d9      	uxtb	r1, r3
 8000abe:	4a8e      	ldr	r2, [pc, #568]	; (8000cf8 <readall_inputs+0x348>)
 8000ac0:	7853      	ldrb	r3, [r2, #1]
 8000ac2:	f361 0341 	bfi	r3, r1, #1, #1
 8000ac6:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	488c      	ldr	r0, [pc, #560]	; (8000cfc <readall_inputs+0x34c>)
 8000acc:	f002 fa3c 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	b2d9      	uxtb	r1, r3
 8000ad8:	4a87      	ldr	r2, [pc, #540]	; (8000cf8 <readall_inputs+0x348>)
 8000ada:	7853      	ldrb	r3, [r2, #1]
 8000adc:	f361 0382 	bfi	r3, r1, #2, #1
 8000ae0:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000ae2:	2140      	movs	r1, #64	; 0x40
 8000ae4:	4883      	ldr	r0, [pc, #524]	; (8000cf4 <readall_inputs+0x344>)
 8000ae6:	f002 fa2f 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	b2d9      	uxtb	r1, r3
 8000af2:	4a81      	ldr	r2, [pc, #516]	; (8000cf8 <readall_inputs+0x348>)
 8000af4:	7853      	ldrb	r3, [r2, #1]
 8000af6:	f361 03c3 	bfi	r3, r1, #3, #1
 8000afa:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);
 8000afc:	2101      	movs	r1, #1
 8000afe:	4883      	ldr	r0, [pc, #524]	; (8000d0c <readall_inputs+0x35c>)
 8000b00:	f002 fa22 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	b2d9      	uxtb	r1, r3
 8000b0c:	4a7a      	ldr	r2, [pc, #488]	; (8000cf8 <readall_inputs+0x348>)
 8000b0e:	7853      	ldrb	r3, [r2, #1]
 8000b10:	f361 1304 	bfi	r3, r1, #4, #1
 8000b14:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);
 8000b16:	2104      	movs	r1, #4
 8000b18:	487c      	ldr	r0, [pc, #496]	; (8000d0c <readall_inputs+0x35c>)
 8000b1a:	f002 fa15 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	4a74      	ldr	r2, [pc, #464]	; (8000cf8 <readall_inputs+0x348>)
 8000b28:	7853      	ldrb	r3, [r2, #1]
 8000b2a:	f361 1345 	bfi	r3, r1, #5, #1
 8000b2e:	7053      	strb	r3, [r2, #1]
	//system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);
	//system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);
 8000b30:	2102      	movs	r1, #2
 8000b32:	4876      	ldr	r0, [pc, #472]	; (8000d0c <readall_inputs+0x35c>)
 8000b34:	f002 fa08 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2d9      	uxtb	r1, r3
 8000b40:	4a73      	ldr	r2, [pc, #460]	; (8000d10 <readall_inputs+0x360>)
 8000b42:	7813      	ldrb	r3, [r2, #0]
 8000b44:	f361 0300 	bfi	r3, r1, #0, #1
 8000b48:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	4869      	ldr	r0, [pc, #420]	; (8000cf4 <readall_inputs+0x344>)
 8000b50:	f002 f9fa 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	b2d9      	uxtb	r1, r3
 8000b5c:	4a6c      	ldr	r2, [pc, #432]	; (8000d10 <readall_inputs+0x360>)
 8000b5e:	7813      	ldrb	r3, [r2, #0]
 8000b60:	f361 0341 	bfi	r3, r1, #1, #1
 8000b64:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4862      	ldr	r0, [pc, #392]	; (8000cf4 <readall_inputs+0x344>)
 8000b6c:	f002 f9ec 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	b2d9      	uxtb	r1, r3
 8000b78:	4a65      	ldr	r2, [pc, #404]	; (8000d10 <readall_inputs+0x360>)
 8000b7a:	7813      	ldrb	r3, [r2, #0]
 8000b7c:	f361 0382 	bfi	r3, r1, #2, #1
 8000b80:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	485e      	ldr	r0, [pc, #376]	; (8000d00 <readall_inputs+0x350>)
 8000b88:	f002 f9de 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	b2d9      	uxtb	r1, r3
 8000b94:	4a5e      	ldr	r2, [pc, #376]	; (8000d10 <readall_inputs+0x360>)
 8000b96:	7813      	ldrb	r3, [r2, #0]
 8000b98:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b9c:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCCDC_FAULT_GPIO_Port, DCCDC_FAULT_Pin);
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4859      	ldr	r0, [pc, #356]	; (8000d08 <readall_inputs+0x358>)
 8000ba2:	f002 f9d1 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	b2d9      	uxtb	r1, r3
 8000bae:	4a58      	ldr	r2, [pc, #352]	; (8000d10 <readall_inputs+0x360>)
 8000bb0:	7813      	ldrb	r3, [r2, #0]
 8000bb2:	f361 1304 	bfi	r3, r1, #4, #1
 8000bb6:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4853      	ldr	r0, [pc, #332]	; (8000d08 <readall_inputs+0x358>)
 8000bbc:	f002 f9c4 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	b2d9      	uxtb	r1, r3
 8000bc8:	4a52      	ldr	r2, [pc, #328]	; (8000d14 <readall_inputs+0x364>)
 8000bca:	7813      	ldrb	r3, [r2, #0]
 8000bcc:	f361 0300 	bfi	r3, r1, #0, #1
 8000bd0:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	484b      	ldr	r0, [pc, #300]	; (8000d04 <readall_inputs+0x354>)
 8000bd6:	f002 f9b7 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	b2d9      	uxtb	r1, r3
 8000be2:	4a4c      	ldr	r2, [pc, #304]	; (8000d14 <readall_inputs+0x364>)
 8000be4:	7813      	ldrb	r3, [r2, #0]
 8000be6:	f361 0341 	bfi	r3, r1, #1, #1
 8000bea:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);
 8000bec:	2108      	movs	r1, #8
 8000bee:	4841      	ldr	r0, [pc, #260]	; (8000cf4 <readall_inputs+0x344>)
 8000bf0:	f002 f9aa 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	b2d9      	uxtb	r1, r3
 8000bfc:	4a45      	ldr	r2, [pc, #276]	; (8000d14 <readall_inputs+0x364>)
 8000bfe:	7813      	ldrb	r3, [r2, #0]
 8000c00:	f361 0382 	bfi	r3, r1, #2, #1
 8000c04:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	483f      	ldr	r0, [pc, #252]	; (8000d08 <readall_inputs+0x358>)
 8000c0c:	f002 f99c 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	b2d9      	uxtb	r1, r3
 8000c18:	4a3e      	ldr	r2, [pc, #248]	; (8000d14 <readall_inputs+0x364>)
 8000c1a:	7813      	ldrb	r3, [r2, #0]
 8000c1c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000c20:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);
 8000c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c26:	4839      	ldr	r0, [pc, #228]	; (8000d0c <readall_inputs+0x35c>)
 8000c28:	f002 f98e 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	b2d9      	uxtb	r1, r3
 8000c34:	4a37      	ldr	r2, [pc, #220]	; (8000d14 <readall_inputs+0x364>)
 8000c36:	7813      	ldrb	r3, [r2, #0]
 8000c38:	f361 1304 	bfi	r3, r1, #4, #1
 8000c3c:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);
 8000c3e:	2110      	movs	r1, #16
 8000c40:	482c      	ldr	r0, [pc, #176]	; (8000cf4 <readall_inputs+0x344>)
 8000c42:	f002 f981 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	b2d9      	uxtb	r1, r3
 8000c4e:	4a31      	ldr	r2, [pc, #196]	; (8000d14 <readall_inputs+0x364>)
 8000c50:	7813      	ldrb	r3, [r2, #0]
 8000c52:	f361 1345 	bfi	r3, r1, #5, #1
 8000c56:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	4829      	ldr	r0, [pc, #164]	; (8000d04 <readall_inputs+0x354>)
 8000c5e:	f002 f973 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	b2d9      	uxtb	r1, r3
 8000c6a:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <readall_inputs+0x364>)
 8000c6c:	7813      	ldrb	r3, [r2, #0]
 8000c6e:	f361 1386 	bfi	r3, r1, #6, #1
 8000c72:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);
 8000c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c78:	4822      	ldr	r0, [pc, #136]	; (8000d04 <readall_inputs+0x354>)
 8000c7a:	f002 f965 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	b2d9      	uxtb	r1, r3
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <readall_inputs+0x364>)
 8000c88:	7813      	ldrb	r3, [r2, #0]
 8000c8a:	f361 13c7 	bfi	r3, r1, #7, #1
 8000c8e:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4821      	ldr	r0, [pc, #132]	; (8000d18 <readall_inputs+0x368>)
 8000c94:	f002 f958 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	b2d9      	uxtb	r1, r3
 8000ca0:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <readall_inputs+0x364>)
 8000ca2:	7853      	ldrb	r3, [r2, #1]
 8000ca4:	f361 0300 	bfi	r3, r1, #0, #1
 8000ca8:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);
 8000caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cae:	4817      	ldr	r0, [pc, #92]	; (8000d0c <readall_inputs+0x35c>)
 8000cb0:	f002 f94a 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	b2d9      	uxtb	r1, r3
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <readall_inputs+0x364>)
 8000cbe:	7853      	ldrb	r3, [r2, #1]
 8000cc0:	f361 0341 	bfi	r3, r1, #1, #1
 8000cc4:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);
 8000cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cca:	4810      	ldr	r0, [pc, #64]	; (8000d0c <readall_inputs+0x35c>)
 8000ccc:	f002 f93c 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	b2d9      	uxtb	r1, r3
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <readall_inputs+0x364>)
 8000cda:	7853      	ldrb	r3, [r2, #1]
 8000cdc:	f361 0382 	bfi	r3, r1, #2, #1
 8000ce0:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <readall_inputs+0x358>)
 8000ce6:	f002 f92f 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2d9      	uxtb	r1, r3
 8000cf2:	e013      	b.n	8000d1c <readall_inputs+0x36c>
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	40021400 	.word	0x40021400
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	40021800 	.word	0x40021800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	20000030 	.word	0x20000030
 8000d14:	2000002c 	.word	0x2000002c
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <readall_inputs+0x3e4>)
 8000d1e:	7853      	ldrb	r3, [r2, #1]
 8000d20:	f361 03c3 	bfi	r3, r1, #3, #1
 8000d24:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	481b      	ldr	r0, [pc, #108]	; (8000d98 <readall_inputs+0x3e8>)
 8000d2a:	f002 f90d 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <readall_inputs+0x3e4>)
 8000d38:	7853      	ldrb	r3, [r2, #1]
 8000d3a:	f361 1304 	bfi	r3, r1, #4, #1
 8000d3e:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	4815      	ldr	r0, [pc, #84]	; (8000d98 <readall_inputs+0x3e8>)
 8000d44:	f002 f900 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	b2d9      	uxtb	r1, r3
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <readall_inputs+0x3e4>)
 8000d52:	7853      	ldrb	r3, [r2, #1]
 8000d54:	f361 1345 	bfi	r3, r1, #5, #1
 8000d58:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);
 8000d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <readall_inputs+0x3e8>)
 8000d60:	f002 f8f2 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	b2d9      	uxtb	r1, r3
 8000d6c:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <readall_inputs+0x3e4>)
 8000d6e:	7853      	ldrb	r3, [r2, #1]
 8000d70:	f361 1386 	bfi	r3, r1, #6, #1
 8000d74:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);
 8000d76:	2120      	movs	r1, #32
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <readall_inputs+0x3ec>)
 8000d7a:	f002 f8e5 	bl	8002f48 <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <readall_inputs+0x3e4>)
 8000d88:	7853      	ldrb	r3, [r2, #1]
 8000d8a:	f361 13c7 	bfi	r3, r1, #7, #1
 8000d8e:	7053      	strb	r3, [r2, #1]
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000002c 	.word	0x2000002c
 8000d98:	40021800 	.word	0x40021800
 8000d9c:	40021000 	.word	0x40021000

08000da0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db2:	4b62      	ldr	r3, [pc, #392]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000db4:	4a62      	ldr	r2, [pc, #392]	; (8000f40 <MX_ADC1_Init+0x1a0>)
 8000db6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db8:	4b60      	ldr	r3, [pc, #384]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000dba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dcc:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd2:	4b5a      	ldr	r3, [pc, #360]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dda:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de0:	4b56      	ldr	r3, [pc, #344]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000de2:	4a58      	ldr	r2, [pc, #352]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de6:	4b55      	ldr	r3, [pc, #340]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8000dec:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000dee:	220a      	movs	r2, #10
 8000df0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df2:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfa:	4b50      	ldr	r3, [pc, #320]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e00:	484e      	ldr	r0, [pc, #312]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000e02:	f001 f8f1 	bl	8001fe8 <HAL_ADC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e0c:	f000 ff1c 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e10:	230e      	movs	r3, #14
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4846      	ldr	r0, [pc, #280]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000e22:	f001 fabf 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e2c:	f000 ff0c 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e30:	2306      	movs	r3, #6
 8000e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	483f      	ldr	r0, [pc, #252]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000e3e:	f001 fab1 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e48:	f000 fefe 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e50:	2303      	movs	r3, #3
 8000e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	4838      	ldr	r0, [pc, #224]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000e5a:	f001 faa3 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000e64:	f000 fef0 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e68:	2305      	movs	r3, #5
 8000e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	4831      	ldr	r0, [pc, #196]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000e76:	f001 fa95 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000e80:	f000 fee2 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e84:	230f      	movs	r3, #15
 8000e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e88:	2305      	movs	r3, #5
 8000e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	4619      	mov	r1, r3
 8000e90:	482a      	ldr	r0, [pc, #168]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000e92:	f001 fa87 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e9c:	f000 fed4 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ea4:	2306      	movs	r3, #6
 8000ea6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4823      	ldr	r0, [pc, #140]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000eae:	f001 fa79 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000eb8:	f000 fec6 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481c      	ldr	r0, [pc, #112]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000eca:	f001 fa6b 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000ed4:	f000 feb8 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <MX_ADC1_Init+0x1a8>)
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000edc:	2308      	movs	r3, #8
 8000ede:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4814      	ldr	r0, [pc, #80]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000eea:	f001 fa5b 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x158>
  {
    Error_Handler();
 8000ef4:	f000 fea8 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000efc:	2309      	movs	r3, #9
 8000efe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f00:	2302      	movs	r3, #2
 8000f02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000f0a:	f001 fa4b 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0x178>
  {
    Error_Handler();
 8000f14:	f000 fe98 	bl	8001c48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f18:	2309      	movs	r3, #9
 8000f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_ADC1_Init+0x19c>)
 8000f26:	f001 fa3d 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x194>
  {
    Error_Handler();
 8000f30:	f000 fe8a 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000034 	.word	0x20000034
 8000f40:	40012000 	.word	0x40012000
 8000f44:	0f000001 	.word	0x0f000001
 8000f48:	10000012 	.word	0x10000012

08000f4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08c      	sub	sp, #48	; 0x30
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <HAL_ADC_MspInit+0xd4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d153      	bne.n	8001016 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b27      	ldr	r3, [pc, #156]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a26      	ldr	r2, [pc, #152]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a20      	ldr	r2, [pc, #128]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a1a      	ldr	r2, [pc, #104]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_ADC_MspInit+0xd8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8000fce:	23f8      	movs	r3, #248	; 0xf8
 8000fd0:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4811      	ldr	r0, [pc, #68]	; (8001028 <HAL_ADC_MspInit+0xdc>)
 8000fe2:	f001 fe05 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8000fe6:	2330      	movs	r3, #48	; 0x30
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <HAL_ADC_MspInit+0xe0>)
 8000ffa:	f001 fdf9 	bl	8002bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8000ffe:	2303      	movs	r3, #3
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	; (8001030 <HAL_ADC_MspInit+0xe4>)
 8001012:	f001 fded 	bl	8002bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001016:	bf00      	nop
 8001018:	3730      	adds	r7, #48	; 0x30
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40012000 	.word	0x40012000
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020800 	.word	0x40020800
 8001030:	40020400 	.word	0x40020400

08001034 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_CAN3_Init+0x64>)
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <MX_CAN3_Init+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <MX_CAN3_Init+0x64>)
 8001040:	2206      	movs	r2, #6
 8001042:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_CAN3_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_CAN3_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_CAN3_Init+0x64>)
 8001052:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001056:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_CAN3_Init+0x64>)
 800105a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800105e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <MX_CAN3_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_CAN3_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <MX_CAN3_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_CAN3_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <MX_CAN3_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_CAN3_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_CAN3_Init+0x64>)
 8001086:	f001 fbd1 	bl	800282c <HAL_CAN_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001090:	f000 fdda 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000007c 	.word	0x2000007c
 800109c:	40003400 	.word	0x40003400

080010a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a23      	ldr	r2, [pc, #140]	; (800114c <HAL_CAN_MspInit+0xac>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d140      	bne.n	8001144 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a22      	ldr	r2, [pc, #136]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 80010c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 80010e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a16      	ldr	r2, [pc, #88]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 80010f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_CAN_MspInit+0xb0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 8001122:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001134:	230b      	movs	r3, #11
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_CAN_MspInit+0xb4>)
 8001140:	f001 fd56 	bl	8002bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40003400 	.word	0x40003400
 8001150:	40023800 	.word	0x40023800
 8001154:	40020000 	.word	0x40020000

08001158 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	; 0x38
 800115c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800116e:	4bb6      	ldr	r3, [pc, #728]	; (8001448 <MX_GPIO_Init+0x2f0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4ab5      	ldr	r2, [pc, #724]	; (8001448 <MX_GPIO_Init+0x2f0>)
 8001174:	f043 0310 	orr.w	r3, r3, #16
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4bb3      	ldr	r3, [pc, #716]	; (8001448 <MX_GPIO_Init+0x2f0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0310 	and.w	r3, r3, #16
 8001182:	623b      	str	r3, [r7, #32]
 8001184:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4bb0      	ldr	r3, [pc, #704]	; (8001448 <MX_GPIO_Init+0x2f0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4aaf      	ldr	r2, [pc, #700]	; (8001448 <MX_GPIO_Init+0x2f0>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4bad      	ldr	r3, [pc, #692]	; (8001448 <MX_GPIO_Init+0x2f0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	4baa      	ldr	r3, [pc, #680]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4aa9      	ldr	r2, [pc, #676]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011a4:	f043 0320 	orr.w	r3, r3, #32
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4ba7      	ldr	r3, [pc, #668]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	4ba4      	ldr	r3, [pc, #656]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4aa3      	ldr	r2, [pc, #652]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4ba1      	ldr	r3, [pc, #644]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b9e      	ldr	r3, [pc, #632]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a9d      	ldr	r2, [pc, #628]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b9b      	ldr	r3, [pc, #620]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b98      	ldr	r3, [pc, #608]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a97      	ldr	r2, [pc, #604]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b95      	ldr	r3, [pc, #596]	; (8001448 <MX_GPIO_Init+0x2f0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fe:	4b92      	ldr	r3, [pc, #584]	; (8001448 <MX_GPIO_Init+0x2f0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a91      	ldr	r2, [pc, #580]	; (8001448 <MX_GPIO_Init+0x2f0>)
 8001204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b8f      	ldr	r3, [pc, #572]	; (8001448 <MX_GPIO_Init+0x2f0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001216:	4b8c      	ldr	r3, [pc, #560]	; (8001448 <MX_GPIO_Init+0x2f0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a8b      	ldr	r2, [pc, #556]	; (8001448 <MX_GPIO_Init+0x2f0>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b89      	ldr	r3, [pc, #548]	; (8001448 <MX_GPIO_Init+0x2f0>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 800122e:	2200      	movs	r2, #0
 8001230:	f248 0187 	movw	r1, #32903	; 0x8087
 8001234:	4885      	ldr	r0, [pc, #532]	; (800144c <MX_GPIO_Init+0x2f4>)
 8001236:	f001 fe9f 	bl	8002f78 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f242 0108 	movw	r1, #8200	; 0x2008
 8001240:	4883      	ldr	r0, [pc, #524]	; (8001450 <MX_GPIO_Init+0x2f8>)
 8001242:	f001 fe99 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001246:	2200      	movs	r2, #0
 8001248:	f24f 013c 	movw	r1, #61500	; 0xf03c
 800124c:	4881      	ldr	r0, [pc, #516]	; (8001454 <MX_GPIO_Init+0x2fc>)
 800124e:	f001 fe93 	bl	8002f78 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001252:	2200      	movs	r2, #0
 8001254:	f647 0194 	movw	r1, #30868	; 0x7894
 8001258:	487f      	ldr	r0, [pc, #508]	; (8001458 <MX_GPIO_Init+0x300>)
 800125a:	f001 fe8d 	bl	8002f78 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 800125e:	2200      	movs	r2, #0
 8001260:	f64e 2188 	movw	r1, #60040	; 0xea88
 8001264:	487d      	ldr	r0, [pc, #500]	; (800145c <MX_GPIO_Init+0x304>)
 8001266:	f001 fe87 	bl	8002f78 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 800126a:	2200      	movs	r2, #0
 800126c:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001270:	487b      	ldr	r0, [pc, #492]	; (8001460 <MX_GPIO_Init+0x308>)
 8001272:	f001 fe81 	bl	8002f78 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800127c:	4879      	ldr	r0, [pc, #484]	; (8001464 <MX_GPIO_Init+0x30c>)
 800127e:	f001 fe7b 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001282:	f248 0387 	movw	r3, #32903	; 0x8087
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	486c      	ldr	r0, [pc, #432]	; (800144c <MX_GPIO_Init+0x2f4>)
 800129c:	f001 fca8 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 80012a0:	f647 7378 	movw	r3, #32632	; 0x7f78
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	4865      	ldr	r0, [pc, #404]	; (800144c <MX_GPIO_Init+0x2f4>)
 80012b6:	f001 fc9b 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	485f      	ldr	r0, [pc, #380]	; (8001450 <MX_GPIO_Init+0x2f8>)
 80012d4:	f001 fc8c 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80012d8:	f64d 7347 	movw	r3, #57159	; 0xdf47
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4858      	ldr	r0, [pc, #352]	; (8001450 <MX_GPIO_Init+0x2f8>)
 80012ee:	f001 fc7f 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 80012f2:	f640 0303 	movw	r3, #2051	; 0x803
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	4853      	ldr	r0, [pc, #332]	; (8001454 <MX_GPIO_Init+0x2fc>)
 8001308:	f001 fc72 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800130c:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	484b      	ldr	r0, [pc, #300]	; (8001454 <MX_GPIO_Init+0x2fc>)
 8001326:	f001 fc63 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 800132a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	4845      	ldr	r0, [pc, #276]	; (8001454 <MX_GPIO_Init+0x2fc>)
 8001340:	f001 fc56 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 8001344:	2308      	movs	r3, #8
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001348:	2301      	movs	r3, #1
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001350:	2302      	movs	r3, #2
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	483d      	ldr	r0, [pc, #244]	; (8001450 <MX_GPIO_Init+0x2f8>)
 800135c:	f001 fc48 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8001360:	f640 6307 	movw	r3, #3591	; 0xe07
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	483b      	ldr	r0, [pc, #236]	; (8001464 <MX_GPIO_Init+0x30c>)
 8001376:	f001 fc3b 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800137a:	f647 0394 	movw	r3, #30868	; 0x7894
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4831      	ldr	r0, [pc, #196]	; (8001458 <MX_GPIO_Init+0x300>)
 8001394:	f001 fc2c 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8001398:	f241 13f3 	movw	r3, #4595	; 0x11f3
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	482c      	ldr	r0, [pc, #176]	; (8001460 <MX_GPIO_Init+0x308>)
 80013ae:	f001 fc1f 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 80013b2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	4824      	ldr	r0, [pc, #144]	; (8001458 <MX_GPIO_Init+0x300>)
 80013c8:	f001 fc12 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 80013cc:	f241 5310 	movw	r3, #5392	; 0x1510
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	481e      	ldr	r0, [pc, #120]	; (800145c <MX_GPIO_Init+0x304>)
 80013e2:	f001 fc05 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80013e6:	f64e 2388 	movw	r3, #60040	; 0xea88
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	4817      	ldr	r0, [pc, #92]	; (800145c <MX_GPIO_Init+0x304>)
 8001400:	f001 fbf6 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001404:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140a:	2301      	movs	r3, #1
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	4810      	ldr	r0, [pc, #64]	; (8001460 <MX_GPIO_Init+0x308>)
 800141e:	f001 fbe7 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_GPIO_Init+0x2f8>)
 8001436:	f001 fbdb 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	e00f      	b.n	8001468 <MX_GPIO_Init+0x310>
 8001448:	40023800 	.word	0x40023800
 800144c:	40021000 	.word	0x40021000
 8001450:	40020800 	.word	0x40020800
 8001454:	40021400 	.word	0x40021400
 8001458:	40020400 	.word	0x40020400
 800145c:	40020c00 	.word	0x40020c00
 8001460:	40021800 	.word	0x40021800
 8001464:	40020000 	.word	0x40020000
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	4619      	mov	r1, r3
 8001474:	480f      	ldr	r0, [pc, #60]	; (80014b4 <MX_GPIO_Init+0x35c>)
 8001476:	f001 fbbb 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 800147a:	2307      	movs	r3, #7
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147e:	2303      	movs	r3, #3
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	480a      	ldr	r0, [pc, #40]	; (80014b8 <MX_GPIO_Init+0x360>)
 800148e:	f001 fbaf 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001492:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_GPIO_Init+0x364>)
 80014a8:	f001 fba2 	bl	8002bf0 <HAL_GPIO_Init>

}
 80014ac:	bf00      	nop
 80014ae:	3738      	adds	r7, #56	; 0x38
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40020400 	.word	0x40020400

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t ADC_VAL[10] = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d4:	f000 fcbf 	bl	8001e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d8:	f000 f9e4 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014dc:	f7ff fe3c 	bl	8001158 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014e0:	f000 fc1c 	bl	8001d1c <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80014e4:	f7ff fda6 	bl	8001034 <MX_CAN3_Init>
  MX_ADC1_Init();
 80014e8:	f7ff fc5a 	bl	8000da0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80014ec:	f7ff f9a4 	bl	8000838 <readResetSource>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f9f2 	bl	80008dc <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART  "\nUART3 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80014f8:	213a      	movs	r1, #58	; 0x3a
 80014fa:	4831      	ldr	r0, [pc, #196]	; (80015c0 <main+0x100>)
 80014fc:	f7ff f820 	bl	8000540 <uartTransmit>

  	/* Sammel Systeminformationen */
  	collectSystemInfo();
 8001500:	f7ff f978 	bl	80007f4 <collectSystemInfo>
#endif

  	/* Lese alle Eingaenge */
  	readall_inputs();
 8001504:	f7ff fa54 	bl	80009b0 <readall_inputs>

  	uartTransmit("Temperatur messen\n", 18);
 8001508:	2112      	movs	r1, #18
 800150a:	482e      	ldr	r0, [pc, #184]	; (80015c4 <main+0x104>)
 800150c:	f7ff f818 	bl	8000540 <uartTransmit>
	uartTransmitNumber(*TEMP30_CAL_VALUE, 10);
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <main+0x108>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	210a      	movs	r1, #10
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f826 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\n", 1);
 800151c:	2101      	movs	r1, #1
 800151e:	482b      	ldr	r0, [pc, #172]	; (80015cc <main+0x10c>)
 8001520:	f7ff f80e 	bl	8000540 <uartTransmit>
	uartTransmitNumber(*TEMP110_CAL_VALUE, 10);
 8001524:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <main+0x110>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	210a      	movs	r1, #10
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f81c 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\n", 1);
 8001530:	2101      	movs	r1, #1
 8001532:	4826      	ldr	r0, [pc, #152]	; (80015cc <main+0x10c>)
 8001534:	f7ff f804 	bl	8000540 <uartTransmit>
	ADC_Select_CH9();
 8001538:	f000 fb64 	bl	8001c04 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 800153c:	4825      	ldr	r0, [pc, #148]	; (80015d4 <main+0x114>)
 800153e:	f000 fd97 	bl	8002070 <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8001542:	2164      	movs	r1, #100	; 0x64
 8001544:	4823      	ldr	r0, [pc, #140]	; (80015d4 <main+0x114>)
 8001546:	f000 fe95 	bl	8002274 <HAL_ADC_PollForConversion>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d149      	bne.n	80015e4 <main+0x124>
	{
		sensorValue = (float)HAL_ADC_GetValue(&hadc1);
 8001550:	4820      	ldr	r0, [pc, #128]	; (80015d4 <main+0x114>)
 8001552:	f000 ff1a 	bl	800238a <HAL_ADC_GetValue>
 8001556:	ee07 0a90 	vmov	s15, r0
 800155a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155e:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <main+0x118>)
 8001560:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Stop(&hadc1);
 8001564:	481b      	ldr	r0, [pc, #108]	; (80015d4 <main+0x114>)
 8001566:	f000 fe51 	bl	800220c <HAL_ADC_Stop>
		temperature = (int32_t)((TEMP110 - TEMP30) / ((float)(*TEMP110_CAL_VALUE) - (float)(*TEMP30_CAL_VALUE)) * (sensorValue - (float)(*TEMP30_CAL_VALUE)) + TEMP30);
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <main+0x110>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <main+0x108>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001586:	eddf 6a15 	vldr	s13, [pc, #84]	; 80015dc <main+0x11c>
 800158a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <main+0x118>)
 8001590:	edd3 6a00 	vldr	s13, [r3]
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <main+0x108>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80015a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80015ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b4:	ee17 2a90 	vmov	r2, s15
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <main+0x120>)
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e016      	b.n	80015ec <main+0x12c>
 80015be:	bf00      	nop
 80015c0:	08004e34 	.word	0x08004e34
 80015c4:	08004e70 	.word	0x08004e70
 80015c8:	1ff0f44c 	.word	0x1ff0f44c
 80015cc:	08004e84 	.word	0x08004e84
 80015d0:	1ff0f44e 	.word	0x1ff0f44e
 80015d4:	20000034 	.word	0x20000034
 80015d8:	200000a8 	.word	0x200000a8
 80015dc:	42a00000 	.word	0x42a00000
 80015e0:	200000a4 	.word	0x200000a4
	}
	else
	{
		temperature = -273;
 80015e4:	4ba1      	ldr	r3, [pc, #644]	; (800186c <main+0x3ac>)
 80015e6:	f46f 7288 	mvn.w	r2, #272	; 0x110
 80015ea:	601a      	str	r2, [r3, #0]
	}
	uartTransmitNumber(temperature, 10);
 80015ec:	4b9f      	ldr	r3, [pc, #636]	; (800186c <main+0x3ac>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	210a      	movs	r1, #10
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffb8 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\n", 1);
 80015f8:	2101      	movs	r1, #1
 80015fa:	489d      	ldr	r0, [pc, #628]	; (8001870 <main+0x3b0>)
 80015fc:	f7fe ffa0 	bl	8000540 <uartTransmit>

	HAL_Delay(1000);
 8001600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001604:	f000 fc84 	bl	8001f10 <HAL_Delay>
	ADC_Select_CH0();
 8001608:	f000 f9dc 	bl	80019c4 <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 800160c:	4899      	ldr	r0, [pc, #612]	; (8001874 <main+0x3b4>)
 800160e:	f000 fd2f 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001612:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001616:	4897      	ldr	r0, [pc, #604]	; (8001874 <main+0x3b4>)
 8001618:	f000 fe2c 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 800161c:	4895      	ldr	r0, [pc, #596]	; (8001874 <main+0x3b4>)
 800161e:	f000 feb4 	bl	800238a <HAL_ADC_GetValue>
 8001622:	4603      	mov	r3, r0
 8001624:	b29b      	uxth	r3, r3
 8001626:	80bb      	strh	r3, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8001628:	4892      	ldr	r0, [pc, #584]	; (8001874 <main+0x3b4>)
 800162a:	f000 fdef 	bl	800220c <HAL_ADC_Stop>

	ADC_Select_CH1();
 800162e:	f000 f9e9 	bl	8001a04 <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 8001632:	4890      	ldr	r0, [pc, #576]	; (8001874 <main+0x3b4>)
 8001634:	f000 fd1c 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001638:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800163c:	488d      	ldr	r0, [pc, #564]	; (8001874 <main+0x3b4>)
 800163e:	f000 fe19 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 8001642:	488c      	ldr	r0, [pc, #560]	; (8001874 <main+0x3b4>)
 8001644:	f000 fea1 	bl	800238a <HAL_ADC_GetValue>
 8001648:	4603      	mov	r3, r0
 800164a:	b29b      	uxth	r3, r3
 800164c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 800164e:	4889      	ldr	r0, [pc, #548]	; (8001874 <main+0x3b4>)
 8001650:	f000 fddc 	bl	800220c <HAL_ADC_Stop>

	ADC_Select_CH2();
 8001654:	f000 f9f6 	bl	8001a44 <ADC_Select_CH2>
	HAL_ADC_Start(&hadc1);
 8001658:	4886      	ldr	r0, [pc, #536]	; (8001874 <main+0x3b4>)
 800165a:	f000 fd09 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800165e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001662:	4884      	ldr	r0, [pc, #528]	; (8001874 <main+0x3b4>)
 8001664:	f000 fe06 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8001668:	4882      	ldr	r0, [pc, #520]	; (8001874 <main+0x3b4>)
 800166a:	f000 fe8e 	bl	800238a <HAL_ADC_GetValue>
 800166e:	4603      	mov	r3, r0
 8001670:	b29b      	uxth	r3, r3
 8001672:	813b      	strh	r3, [r7, #8]
	HAL_ADC_Stop(&hadc1);
 8001674:	487f      	ldr	r0, [pc, #508]	; (8001874 <main+0x3b4>)
 8001676:	f000 fdc9 	bl	800220c <HAL_ADC_Stop>

	ADC_Select_CH3();
 800167a:	f000 fa03 	bl	8001a84 <ADC_Select_CH3>
	HAL_ADC_Start(&hadc1);
 800167e:	487d      	ldr	r0, [pc, #500]	; (8001874 <main+0x3b4>)
 8001680:	f000 fcf6 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001688:	487a      	ldr	r0, [pc, #488]	; (8001874 <main+0x3b4>)
 800168a:	f000 fdf3 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[3] = HAL_ADC_GetValue(&hadc1);
 800168e:	4879      	ldr	r0, [pc, #484]	; (8001874 <main+0x3b4>)
 8001690:	f000 fe7b 	bl	800238a <HAL_ADC_GetValue>
 8001694:	4603      	mov	r3, r0
 8001696:	b29b      	uxth	r3, r3
 8001698:	817b      	strh	r3, [r7, #10]
	HAL_ADC_Stop(&hadc1);
 800169a:	4876      	ldr	r0, [pc, #472]	; (8001874 <main+0x3b4>)
 800169c:	f000 fdb6 	bl	800220c <HAL_ADC_Stop>

	ADC_Select_CH4();
 80016a0:	f000 fa10 	bl	8001ac4 <ADC_Select_CH4>
	HAL_ADC_Start(&hadc1);
 80016a4:	4873      	ldr	r0, [pc, #460]	; (8001874 <main+0x3b4>)
 80016a6:	f000 fce3 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80016aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016ae:	4871      	ldr	r0, [pc, #452]	; (8001874 <main+0x3b4>)
 80016b0:	f000 fde0 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[4] = HAL_ADC_GetValue(&hadc1);
 80016b4:	486f      	ldr	r0, [pc, #444]	; (8001874 <main+0x3b4>)
 80016b6:	f000 fe68 	bl	800238a <HAL_ADC_GetValue>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29b      	uxth	r3, r3
 80016be:	81bb      	strh	r3, [r7, #12]
	HAL_ADC_Stop(&hadc1);
 80016c0:	486c      	ldr	r0, [pc, #432]	; (8001874 <main+0x3b4>)
 80016c2:	f000 fda3 	bl	800220c <HAL_ADC_Stop>

	ADC_Select_CH5();
 80016c6:	f000 fa1d 	bl	8001b04 <ADC_Select_CH5>
	HAL_ADC_Start(&hadc1);
 80016ca:	486a      	ldr	r0, [pc, #424]	; (8001874 <main+0x3b4>)
 80016cc:	f000 fcd0 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80016d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016d4:	4867      	ldr	r0, [pc, #412]	; (8001874 <main+0x3b4>)
 80016d6:	f000 fdcd 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[5] = HAL_ADC_GetValue(&hadc1);
 80016da:	4866      	ldr	r0, [pc, #408]	; (8001874 <main+0x3b4>)
 80016dc:	f000 fe55 	bl	800238a <HAL_ADC_GetValue>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	81fb      	strh	r3, [r7, #14]
	HAL_ADC_Stop(&hadc1);
 80016e6:	4863      	ldr	r0, [pc, #396]	; (8001874 <main+0x3b4>)
 80016e8:	f000 fd90 	bl	800220c <HAL_ADC_Stop>

	ADC_Select_CH6();
 80016ec:	f000 fa2a 	bl	8001b44 <ADC_Select_CH6>
	HAL_ADC_Start(&hadc1);
 80016f0:	4860      	ldr	r0, [pc, #384]	; (8001874 <main+0x3b4>)
 80016f2:	f000 fcbd 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80016f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016fa:	485e      	ldr	r0, [pc, #376]	; (8001874 <main+0x3b4>)
 80016fc:	f000 fdba 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[6] = HAL_ADC_GetValue(&hadc1);
 8001700:	485c      	ldr	r0, [pc, #368]	; (8001874 <main+0x3b4>)
 8001702:	f000 fe42 	bl	800238a <HAL_ADC_GetValue>
 8001706:	4603      	mov	r3, r0
 8001708:	b29b      	uxth	r3, r3
 800170a:	823b      	strh	r3, [r7, #16]
	HAL_ADC_Stop(&hadc1);
 800170c:	4859      	ldr	r0, [pc, #356]	; (8001874 <main+0x3b4>)
 800170e:	f000 fd7d 	bl	800220c <HAL_ADC_Stop>

	ADC_Select_CH7();
 8001712:	f000 fa37 	bl	8001b84 <ADC_Select_CH7>
	HAL_ADC_Start(&hadc1);
 8001716:	4857      	ldr	r0, [pc, #348]	; (8001874 <main+0x3b4>)
 8001718:	f000 fcaa 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800171c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001720:	4854      	ldr	r0, [pc, #336]	; (8001874 <main+0x3b4>)
 8001722:	f000 fda7 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[7] = HAL_ADC_GetValue(&hadc1);
 8001726:	4853      	ldr	r0, [pc, #332]	; (8001874 <main+0x3b4>)
 8001728:	f000 fe2f 	bl	800238a <HAL_ADC_GetValue>
 800172c:	4603      	mov	r3, r0
 800172e:	b29b      	uxth	r3, r3
 8001730:	827b      	strh	r3, [r7, #18]
	HAL_ADC_Stop(&hadc1);
 8001732:	4850      	ldr	r0, [pc, #320]	; (8001874 <main+0x3b4>)
 8001734:	f000 fd6a 	bl	800220c <HAL_ADC_Stop>

	ADC_Select_CH8();
 8001738:	f000 fa44 	bl	8001bc4 <ADC_Select_CH8>
	HAL_ADC_Start(&hadc1);
 800173c:	484d      	ldr	r0, [pc, #308]	; (8001874 <main+0x3b4>)
 800173e:	f000 fc97 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001742:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001746:	484b      	ldr	r0, [pc, #300]	; (8001874 <main+0x3b4>)
 8001748:	f000 fd94 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[8] = HAL_ADC_GetValue(&hadc1);
 800174c:	4849      	ldr	r0, [pc, #292]	; (8001874 <main+0x3b4>)
 800174e:	f000 fe1c 	bl	800238a <HAL_ADC_GetValue>
 8001752:	4603      	mov	r3, r0
 8001754:	b29b      	uxth	r3, r3
 8001756:	82bb      	strh	r3, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 8001758:	4846      	ldr	r0, [pc, #280]	; (8001874 <main+0x3b4>)
 800175a:	f000 fd57 	bl	800220c <HAL_ADC_Stop>

	ADC_Select_CH9();
 800175e:	f000 fa51 	bl	8001c04 <ADC_Select_CH9>
	HAL_ADC_Start(&hadc1);
 8001762:	4844      	ldr	r0, [pc, #272]	; (8001874 <main+0x3b4>)
 8001764:	f000 fc84 	bl	8002070 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001768:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800176c:	4841      	ldr	r0, [pc, #260]	; (8001874 <main+0x3b4>)
 800176e:	f000 fd81 	bl	8002274 <HAL_ADC_PollForConversion>
	ADC_VAL[9] = HAL_ADC_GetValue(&hadc1);
 8001772:	4840      	ldr	r0, [pc, #256]	; (8001874 <main+0x3b4>)
 8001774:	f000 fe09 	bl	800238a <HAL_ADC_GetValue>
 8001778:	4603      	mov	r3, r0
 800177a:	b29b      	uxth	r3, r3
 800177c:	82fb      	strh	r3, [r7, #22]
	HAL_ADC_Stop(&hadc1);
 800177e:	483d      	ldr	r0, [pc, #244]	; (8001874 <main+0x3b4>)
 8001780:	f000 fd44 	bl	800220c <HAL_ADC_Stop>

	uartTransmit("KL15: ", 6);
 8001784:	2106      	movs	r1, #6
 8001786:	483c      	ldr	r0, [pc, #240]	; (8001878 <main+0x3b8>)
 8001788:	f7fe feda 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[0], 10);
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	210a      	movs	r1, #10
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fee9 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\nKühlwasser: ", 13);
 8001796:	210d      	movs	r1, #13
 8001798:	4838      	ldr	r0, [pc, #224]	; (800187c <main+0x3bc>)
 800179a:	f7fe fed1 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[1], 10);
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	210a      	movs	r1, #10
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fee0 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\nKlimaFlap: ", 12);
 80017a8:	210c      	movs	r1, #12
 80017aa:	4835      	ldr	r0, [pc, #212]	; (8001880 <main+0x3c0>)
 80017ac:	f7fe fec8 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[2], 10);
 80017b0:	893b      	ldrh	r3, [r7, #8]
 80017b2:	210a      	movs	r1, #10
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fed7 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\nGas: ", 6);
 80017ba:	2106      	movs	r1, #6
 80017bc:	4831      	ldr	r0, [pc, #196]	; (8001884 <main+0x3c4>)
 80017be:	f7fe febf 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[3], 10);
 80017c2:	897b      	ldrh	r3, [r7, #10]
 80017c4:	210a      	movs	r1, #10
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fece 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\nPCB: ", 6);
 80017cc:	2106      	movs	r1, #6
 80017ce:	482e      	ldr	r0, [pc, #184]	; (8001888 <main+0x3c8>)
 80017d0:	f7fe feb6 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[4], 10);
 80017d4:	89bb      	ldrh	r3, [r7, #12]
 80017d6:	210a      	movs	r1, #10
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fec5 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\nReturn: ", 9);
 80017de:	2109      	movs	r1, #9
 80017e0:	482a      	ldr	r0, [pc, #168]	; (800188c <main+0x3cc>)
 80017e2:	f7fe fead 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[5], 10);
 80017e6:	89fb      	ldrh	r3, [r7, #14]
 80017e8:	210a      	movs	r1, #10
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe febc 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\nInfo: ", 7);
 80017f0:	2107      	movs	r1, #7
 80017f2:	4827      	ldr	r0, [pc, #156]	; (8001890 <main+0x3d0>)
 80017f4:	f7fe fea4 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[6], 10);
 80017f8:	8a3b      	ldrh	r3, [r7, #16]
 80017fa:	210a      	movs	r1, #10
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe feb3 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\nBremsdruck: ", 13);
 8001802:	210d      	movs	r1, #13
 8001804:	4823      	ldr	r0, [pc, #140]	; (8001894 <main+0x3d4>)
 8001806:	f7fe fe9b 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[7], 10);
 800180a:	8a7b      	ldrh	r3, [r7, #18]
 800180c:	210a      	movs	r1, #10
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe feaa 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\nBremstemp: ", 12);
 8001814:	210c      	movs	r1, #12
 8001816:	4820      	ldr	r0, [pc, #128]	; (8001898 <main+0x3d8>)
 8001818:	f7fe fe92 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[8], 10);
 800181c:	8abb      	ldrh	r3, [r7, #20]
 800181e:	210a      	movs	r1, #10
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fea1 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\nSTM Temp: ", 11);
 8001826:	210b      	movs	r1, #11
 8001828:	481c      	ldr	r0, [pc, #112]	; (800189c <main+0x3dc>)
 800182a:	f7fe fe89 	bl	8000540 <uartTransmit>
	uartTransmitNumber(ADC_VAL[9], 10);
 800182e:	8afb      	ldrh	r3, [r7, #22]
 8001830:	210a      	movs	r1, #10
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe98 	bl	8000568 <uartTransmitNumber>
	uartTransmit("\n", 1);
 8001838:	2101      	movs	r1, #1
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <main+0x3b0>)
 800183c:	f7fe fe80 	bl	8000540 <uartTransmit>

	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001840:	2200      	movs	r2, #0
 8001842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001846:	4816      	ldr	r0, [pc, #88]	; (80018a0 <main+0x3e0>)
 8001848:	f001 fb96 	bl	8002f78 <HAL_GPIO_WritePin>
	HAL_Delay(4500);
 800184c:	f241 1094 	movw	r0, #4500	; 0x1194
 8001850:	f000 fb5e 	bl	8001f10 <HAL_Delay>
	HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800185a:	4811      	ldr	r0, [pc, #68]	; (80018a0 <main+0x3e0>)
 800185c:	f001 fb8c 	bl	8002f78 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001864:	f000 fb54 	bl	8001f10 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001868:	e7fe      	b.n	8001868 <main+0x3a8>
 800186a:	bf00      	nop
 800186c:	200000a4 	.word	0x200000a4
 8001870:	08004e84 	.word	0x08004e84
 8001874:	20000034 	.word	0x20000034
 8001878:	08004e88 	.word	0x08004e88
 800187c:	08004e90 	.word	0x08004e90
 8001880:	08004ea0 	.word	0x08004ea0
 8001884:	08004eb0 	.word	0x08004eb0
 8001888:	08004eb8 	.word	0x08004eb8
 800188c:	08004ec0 	.word	0x08004ec0
 8001890:	08004ecc 	.word	0x08004ecc
 8001894:	08004ed4 	.word	0x08004ed4
 8001898:	08004ee4 	.word	0x08004ee4
 800189c:	08004ef4 	.word	0x08004ef4
 80018a0:	40020400 	.word	0x40020400

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0b8      	sub	sp, #224	; 0xe0
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018ae:	2234      	movs	r2, #52	; 0x34
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 f960 	bl	8004b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	2290      	movs	r2, #144	; 0x90
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f003 f951 	bl	8004b78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <SystemClock_Config+0x118>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a38      	ldr	r2, [pc, #224]	; (80019bc <SystemClock_Config+0x118>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40
 80018e2:	4b36      	ldr	r3, [pc, #216]	; (80019bc <SystemClock_Config+0x118>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80018ee:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <SystemClock_Config+0x11c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018f6:	4a32      	ldr	r2, [pc, #200]	; (80019c0 <SystemClock_Config+0x11c>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <SystemClock_Config+0x11c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190a:	2301      	movs	r3, #1
 800190c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001918:	2302      	movs	r3, #2
 800191a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001926:	2319      	movs	r3, #25
 8001928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 800192c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001934:	2302      	movs	r3, #2
 8001936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001944:	4618      	mov	r0, r3
 8001946:	f001 fb81 	bl	800304c <HAL_RCC_OscConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001950:	f000 f97a 	bl	8001c48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001954:	f001 fb2a 	bl	8002fac <HAL_PWREx_EnableOverDrive>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800195e:	f000 f973 	bl	8001c48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001962:	230f      	movs	r3, #15
 8001964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2302      	movs	r3, #2
 800196a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001982:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001986:	2103      	movs	r1, #3
 8001988:	4618      	mov	r0, r3
 800198a:	f001 fe0d 	bl	80035a8 <HAL_RCC_ClockConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001994:	f000 f958 	bl	8001c48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800199c:	2300      	movs	r3, #0
 800199e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 ffd5 	bl	8003954 <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80019b0:	f000 f94a 	bl	8001c48 <Error_Handler>
  }
}
 80019b4:	bf00      	nop
 80019b6:	37e0      	adds	r7, #224	; 0xe0
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40007000 	.word	0x40007000

080019c4 <ADC_Select_CH0>:

/* USER CODE BEGIN 4 */

void ADC_Select_CH0 (void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80019ca:	463b      	mov	r3, r7
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_3;
 80019d6:	2303      	movs	r3, #3
 80019d8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80019da:	2301      	movs	r3, #1
 80019dc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80019de:	2305      	movs	r3, #5
 80019e0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e2:	463b      	mov	r3, r7
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <ADC_Select_CH0+0x3c>)
 80019e8:	f000 fcdc 	bl	80023a4 <HAL_ADC_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <ADC_Select_CH0+0x32>
	{
	Error_Handler();
 80019f2:	f000 f929 	bl	8001c48 <Error_Handler>
	}
}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000034 	.word	0x20000034

08001a04 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_4;
 8001a16:	2304      	movs	r3, #4
 8001a18:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001a1e:	2305      	movs	r3, #5
 8001a20:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <ADC_Select_CH1+0x3c>)
 8001a28:	f000 fcbc 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <ADC_Select_CH1+0x32>
	{
	Error_Handler();
 8001a32:	f000 f909 	bl	8001c48 <Error_Handler>
	}
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000034 	.word	0x20000034

08001a44 <ADC_Select_CH2>:

void ADC_Select_CH2 (void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_5;
 8001a56:	2305      	movs	r3, #5
 8001a58:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001a5e:	2305      	movs	r3, #5
 8001a60:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a62:	463b      	mov	r3, r7
 8001a64:	4619      	mov	r1, r3
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <ADC_Select_CH2+0x3c>)
 8001a68:	f000 fc9c 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <ADC_Select_CH2+0x32>
	{
	Error_Handler();
 8001a72:	f000 f8e9 	bl	8001c48 <Error_Handler>
	}
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000034 	.word	0x20000034

08001a84 <ADC_Select_CH3>:

void ADC_Select_CH3 (void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_6;
 8001a96:	2306      	movs	r3, #6
 8001a98:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <ADC_Select_CH3+0x3c>)
 8001aa8:	f000 fc7c 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <ADC_Select_CH3+0x32>
	{
	Error_Handler();
 8001ab2:	f000 f8c9 	bl	8001c48 <Error_Handler>
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000034 	.word	0x20000034

08001ac4 <ADC_Select_CH4>:

void ADC_Select_CH4 (void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001aca:	463b      	mov	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_7;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001ade:	2305      	movs	r3, #5
 8001ae0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <ADC_Select_CH4+0x3c>)
 8001ae8:	f000 fc5c 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <ADC_Select_CH4+0x32>
	{
	Error_Handler();
 8001af2:	f000 f8a9 	bl	8001c48 <Error_Handler>
	}
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000034 	.word	0x20000034

08001b04 <ADC_Select_CH5>:

void ADC_Select_CH5 (void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_8;
 8001b16:	2308      	movs	r3, #8
 8001b18:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001b1e:	2305      	movs	r3, #5
 8001b20:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <ADC_Select_CH5+0x3c>)
 8001b28:	f000 fc3c 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <ADC_Select_CH5+0x32>
	{
	Error_Handler();
 8001b32:	f000 f889 	bl	8001c48 <Error_Handler>
	}
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000034 	.word	0x20000034

08001b44 <ADC_Select_CH6>:

void ADC_Select_CH6 (void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_9;
 8001b56:	2309      	movs	r3, #9
 8001b58:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001b5e:	2305      	movs	r3, #5
 8001b60:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	; (8001b80 <ADC_Select_CH6+0x3c>)
 8001b68:	f000 fc1c 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <ADC_Select_CH6+0x32>
	{
	Error_Handler();
 8001b72:	f000 f869 	bl	8001c48 <Error_Handler>
	}
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000034 	.word	0x20000034

08001b84 <ADC_Select_CH7>:

void ADC_Select_CH7 (void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_14;
 8001b96:	230e      	movs	r3, #14
 8001b98:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <ADC_Select_CH7+0x3c>)
 8001ba8:	f000 fbfc 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <ADC_Select_CH7+0x32>
	{
	Error_Handler();
 8001bb2:	f000 f849 	bl	8001c48 <Error_Handler>
	}
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000034 	.word	0x20000034

08001bc4 <ADC_Select_CH8>:

void ADC_Select_CH8 (void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_15;
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001bde:	2305      	movs	r3, #5
 8001be0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001be2:	463b      	mov	r3, r7
 8001be4:	4619      	mov	r1, r3
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <ADC_Select_CH8+0x3c>)
 8001be8:	f000 fbdc 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <ADC_Select_CH8+0x32>
	{
	Error_Handler();
 8001bf2:	f000 f829 	bl	8001c48 <Error_Handler>
	}
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000034 	.word	0x20000034

08001c04 <ADC_Select_CH9>:

void ADC_Select_CH9 (void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	*/
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <ADC_Select_CH9+0x3c>)
 8001c18:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001c1e:	2305      	movs	r3, #5
 8001c20:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c22:	463b      	mov	r3, r7
 8001c24:	4619      	mov	r1, r3
 8001c26:	4807      	ldr	r0, [pc, #28]	; (8001c44 <ADC_Select_CH9+0x40>)
 8001c28:	f000 fbbc 	bl	80023a4 <HAL_ADC_ConfigChannel>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <ADC_Select_CH9+0x32>
	{
	Error_Handler();
 8001c32:	f000 f809 	bl	8001c48 <Error_Handler>
	}
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	10000012 	.word	0x10000012
 8001c44:	20000034 	.word	0x20000034

08001c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c4c:	b672      	cpsid	i
}
 8001c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <Error_Handler+0x8>
	...

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_MspInit+0x44>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_MspInit+0x44>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_MspInit+0x44>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_MspInit+0x44>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_MspInit+0x44>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_MspInit+0x44>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler+0x4>

08001cae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce8:	f000 f8f2 	bl	8001ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <SystemInit+0x28>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <SystemInit+0x28>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d04:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SystemInit+0x28>)
 8001d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <MX_USART2_UART_Init+0x5c>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_USART2_UART_Init+0x58>)
 8001d60:	f002 fa20 	bl	80041a4 <HAL_UART_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d6a:	f7ff ff6d 	bl	8001c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200000ac 	.word	0x200000ac
 8001d78:	40004400 	.word	0x40004400

08001d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <HAL_UART_MspInit+0x7c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d127      	bne.n	8001dee <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_UART_MspInit+0x80>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a16      	ldr	r2, [pc, #88]	; (8001dfc <HAL_UART_MspInit+0x80>)
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_UART_MspInit+0x80>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_UART_MspInit+0x80>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_UART_MspInit+0x80>)
 8001dbc:	f043 0308 	orr.w	r3, r3, #8
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <HAL_UART_MspInit+0x80>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8001dce:	2360      	movs	r3, #96	; 0x60
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dde:	2307      	movs	r3, #7
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HAL_UART_MspInit+0x84>)
 8001dea:	f000 ff01 	bl	8002bf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40004400 	.word	0x40004400
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020c00 	.word	0x40020c00

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e0a:	e003      	b.n	8001e14 <LoopCopyDataInit>

08001e0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e12:	3104      	adds	r1, #4

08001e14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e14:	480b      	ldr	r0, [pc, #44]	; (8001e44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e1c:	d3f6      	bcc.n	8001e0c <CopyDataInit>
  ldr  r2, =_sbss
 8001e1e:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e20:	e002      	b.n	8001e28 <LoopFillZerobss>

08001e22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e24:	f842 3b04 	str.w	r3, [r2], #4

08001e28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e2c:	d3f9      	bcc.n	8001e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e2e:	f7ff ff5f 	bl	8001cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f002 fe63 	bl	8004afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7ff fb43 	bl	80014c0 <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001e40:	08004f50 	.word	0x08004f50
  ldr  r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e48:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001e4c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001e50:	20000134 	.word	0x20000134

08001e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>

08001e56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	f000 fe94 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f000 f805 	bl	8001e70 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001e66:	f7ff fef5 	bl	8001c54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <HAL_InitTick+0x54>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <HAL_InitTick+0x58>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	4619      	mov	r1, r3
 8001e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fea1 	bl	8002bd6 <HAL_SYSTICK_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e00e      	b.n	8001ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b0f      	cmp	r3, #15
 8001ea2:	d80a      	bhi.n	8001eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	f000 fe77 	bl	8002b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <HAL_InitTick+0x5c>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	20000004 	.word	0x20000004

08001ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x20>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_IncTick+0x24>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_IncTick+0x24>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	20000130 	.word	0x20000130

08001ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTick;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_GetTick+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000130 	.word	0x20000130

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff ffee 	bl	8001ef8 <HAL_GetTick>
 8001f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f36:	bf00      	nop
 8001f38:	f7ff ffde 	bl	8001ef8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008

08001f58 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8001f5c:	4b02      	ldr	r3, [pc, #8]	; (8001f68 <HAL_GetHalVersion+0x10>)
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	01020900 	.word	0x01020900

08001f6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_GetREVID+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0c1b      	lsrs	r3, r3, #16
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e0042000 	.word	0xe0042000

08001f84 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_GetDEVID+0x18>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e0042000 	.word	0xe0042000

08001fa0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_GetUIDw0+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	1ff0f420 	.word	0x1ff0f420

08001fb8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001fbc:	4b03      	ldr	r3, [pc, #12]	; (8001fcc <HAL_GetUIDw1+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	1ff0f424 	.word	0x1ff0f424

08001fd0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_GetUIDw2+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	1ff0f428 	.word	0x1ff0f428

08001fe8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e031      	b.n	8002062 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	2b00      	cmp	r3, #0
 8002004:	d109      	bne.n	800201a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7fe ffa0 	bl	8000f4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	2b00      	cmp	r3, #0
 8002024:	d116      	bne.n	8002054 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_ADC_Init+0x84>)
 800202c:	4013      	ands	r3, r2
 800202e:	f043 0202 	orr.w	r2, r3, #2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fafe 	bl	8002638 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
 8002052:	e001      	b.n	8002058 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	ffffeefd 	.word	0xffffeefd

08002070 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002082:	2b01      	cmp	r3, #1
 8002084:	d101      	bne.n	800208a <HAL_ADC_Start+0x1a>
 8002086:	2302      	movs	r3, #2
 8002088:	e0ad      	b.n	80021e6 <HAL_ADC_Start+0x176>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d018      	beq.n	80020d2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0201 	orr.w	r2, r2, #1
 80020ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80020b0:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <HAL_ADC_Start+0x184>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_ADC_Start+0x188>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9a      	lsrs	r2, r3, #18
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80020c4:	e002      	b.n	80020cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f9      	bne.n	80020c6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d175      	bne.n	80021cc <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020e4:	4b45      	ldr	r3, [pc, #276]	; (80021fc <HAL_ADC_Start+0x18c>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002106:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211a:	d106      	bne.n	800212a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	f023 0206 	bic.w	r2, r3, #6
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	645a      	str	r2, [r3, #68]	; 0x44
 8002128:	e002      	b.n	8002130 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002140:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <HAL_ADC_Start+0x190>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10f      	bne.n	800216e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d143      	bne.n	80021e4 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e03a      	b.n	80021e4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a24      	ldr	r2, [pc, #144]	; (8002204 <HAL_ADC_Start+0x194>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d10e      	bne.n	8002196 <HAL_ADC_Start+0x126>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d107      	bne.n	8002196 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002194:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002196:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <HAL_ADC_Start+0x190>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d120      	bne.n	80021e4 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a18      	ldr	r2, [pc, #96]	; (8002208 <HAL_ADC_Start+0x198>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d11b      	bne.n	80021e4 <HAL_ADC_Start+0x174>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d114      	bne.n	80021e4 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	e00b      	b.n	80021e4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000000 	.word	0x20000000
 80021f8:	431bde83 	.word	0x431bde83
 80021fc:	fffff8fe 	.word	0xfffff8fe
 8002200:	40012300 	.word	0x40012300
 8002204:	40012000 	.word	0x40012000
 8002208:	40012200 	.word	0x40012200

0800220c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADC_Stop+0x16>
 800221e:	2302      	movs	r3, #2
 8002220:	e01f      	b.n	8002262 <HAL_ADC_Stop+0x56>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0201 	bic.w	r2, r2, #1
 8002238:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_ADC_Stop+0x64>)
 800224e:	4013      	ands	r3, r2
 8002250:	f043 0201 	orr.w	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	ffffeefe 	.word	0xffffeefe

08002274 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002290:	d113      	bne.n	80022ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800229c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a0:	d10b      	bne.n	80022ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e063      	b.n	8002382 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80022ba:	f7ff fe1d 	bl	8001ef8 <HAL_GetTick>
 80022be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022c0:	e021      	b.n	8002306 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c8:	d01d      	beq.n	8002306 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_ADC_PollForConversion+0x6c>
 80022d0:	f7ff fe12 	bl	8001ef8 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d212      	bcs.n	8002306 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d00b      	beq.n	8002306 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e03d      	b.n	8002382 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b02      	cmp	r3, #2
 8002312:	d1d6      	bne.n	80022c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0212 	mvn.w	r2, #18
 800231c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d123      	bne.n	8002380 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11f      	bne.n	8002380 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002346:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800234a:	2b00      	cmp	r3, #0
 800234c:	d006      	beq.n	800235c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x1c>
 80023bc:	2302      	movs	r3, #2
 80023be:	e12a      	b.n	8002616 <HAL_ADC_ConfigChannel+0x272>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b09      	cmp	r3, #9
 80023ce:	d93a      	bls.n	8002446 <HAL_ADC_ConfigChannel+0xa2>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023d8:	d035      	beq.n	8002446 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68d9      	ldr	r1, [r3, #12]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	4613      	mov	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	3b1e      	subs	r3, #30
 80023f0:	2207      	movs	r2, #7
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	400a      	ands	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a87      	ldr	r2, [pc, #540]	; (8002624 <HAL_ADC_ConfigChannel+0x280>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d10a      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68d9      	ldr	r1, [r3, #12]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	061a      	lsls	r2, r3, #24
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241e:	e035      	b.n	800248c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68d9      	ldr	r1, [r3, #12]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	4603      	mov	r3, r0
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4403      	add	r3, r0
 8002438:	3b1e      	subs	r3, #30
 800243a:	409a      	lsls	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002444:	e022      	b.n	800248c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6919      	ldr	r1, [r3, #16]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	2207      	movs	r2, #7
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43da      	mvns	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	400a      	ands	r2, r1
 8002468:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6919      	ldr	r1, [r3, #16]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	b29b      	uxth	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	4603      	mov	r3, r0
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4403      	add	r3, r0
 8002482:	409a      	lsls	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b06      	cmp	r3, #6
 8002492:	d824      	bhi.n	80024de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	3b05      	subs	r3, #5
 80024a6:	221f      	movs	r2, #31
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43da      	mvns	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	400a      	ands	r2, r1
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3b05      	subs	r3, #5
 80024d0:	fa00 f203 	lsl.w	r2, r0, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
 80024dc:	e04c      	b.n	8002578 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d824      	bhi.n	8002530 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	3b23      	subs	r3, #35	; 0x23
 80024f8:	221f      	movs	r2, #31
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	400a      	ands	r2, r1
 8002506:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	3b23      	subs	r3, #35	; 0x23
 8002522:	fa00 f203 	lsl.w	r2, r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	631a      	str	r2, [r3, #48]	; 0x30
 800252e:	e023      	b.n	8002578 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	3b41      	subs	r3, #65	; 0x41
 8002542:	221f      	movs	r2, #31
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43da      	mvns	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	400a      	ands	r2, r1
 8002550:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	b29b      	uxth	r3, r3
 800255e:	4618      	mov	r0, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	3b41      	subs	r3, #65	; 0x41
 800256c:	fa00 f203 	lsl.w	r2, r0, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <HAL_ADC_ConfigChannel+0x284>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10a      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1f4>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800258a:	d105      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_ADC_ConfigChannel+0x288>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a26      	ldr	r2, [pc, #152]	; (800262c <HAL_ADC_ConfigChannel+0x288>)
 8002592:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002596:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a22      	ldr	r2, [pc, #136]	; (8002628 <HAL_ADC_ConfigChannel+0x284>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d109      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x212>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b12      	cmp	r3, #18
 80025a8:	d105      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_ADC_ConfigChannel+0x288>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_ADC_ConfigChannel+0x288>)
 80025b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_ADC_ConfigChannel+0x284>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d125      	bne.n	800260c <HAL_ADC_ConfigChannel+0x268>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a17      	ldr	r2, [pc, #92]	; (8002624 <HAL_ADC_ConfigChannel+0x280>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <HAL_ADC_ConfigChannel+0x22e>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b11      	cmp	r3, #17
 80025d0:	d11c      	bne.n	800260c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80025d2:	4b16      	ldr	r3, [pc, #88]	; (800262c <HAL_ADC_ConfigChannel+0x288>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a15      	ldr	r2, [pc, #84]	; (800262c <HAL_ADC_ConfigChannel+0x288>)
 80025d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a10      	ldr	r2, [pc, #64]	; (8002624 <HAL_ADC_ConfigChannel+0x280>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d111      	bne.n	800260c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_ADC_ConfigChannel+0x28c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a11      	ldr	r2, [pc, #68]	; (8002634 <HAL_ADC_ConfigChannel+0x290>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0c9a      	lsrs	r2, r3, #18
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80025fe:	e002      	b.n	8002606 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3b01      	subs	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f9      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	10000012 	.word	0x10000012
 8002628:	40012000 	.word	0x40012000
 800262c:	40012300 	.word	0x40012300
 8002630:	20000000 	.word	0x20000000
 8002634:	431bde83 	.word	0x431bde83

08002638 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002640:	4b78      	ldr	r3, [pc, #480]	; (8002824 <ADC_Init+0x1ec>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a77      	ldr	r2, [pc, #476]	; (8002824 <ADC_Init+0x1ec>)
 8002646:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800264a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800264c:	4b75      	ldr	r3, [pc, #468]	; (8002824 <ADC_Init+0x1ec>)
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4973      	ldr	r1, [pc, #460]	; (8002824 <ADC_Init+0x1ec>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002668:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	021a      	lsls	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800268c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6859      	ldr	r1, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6899      	ldr	r1, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	4a58      	ldr	r2, [pc, #352]	; (8002828 <ADC_Init+0x1f0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d022      	beq.n	8002712 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6899      	ldr	r1, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6899      	ldr	r1, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	e00f      	b.n	8002732 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002720:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002730:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0202 	bic.w	r2, r2, #2
 8002740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6899      	ldr	r1, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	005a      	lsls	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01b      	beq.n	8002798 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800276e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800277e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	3b01      	subs	r3, #1
 800278c:	035a      	lsls	r2, r3, #13
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	e007      	b.n	80027a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	051a      	lsls	r2, r3, #20
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027ea:	025a      	lsls	r2, r3, #9
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6899      	ldr	r1, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	029a      	lsls	r2, r3, #10
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40012300 	.word	0x40012300
 8002828:	0f000001 	.word	0x0f000001

0800282c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0ed      	b.n	8002a1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d102      	bne.n	8002850 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fc28 	bl	80010a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0202 	bic.w	r2, r2, #2
 800285e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002860:	f7ff fb4a 	bl	8001ef8 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002866:	e012      	b.n	800288e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002868:	f7ff fb46 	bl	8001ef8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b0a      	cmp	r3, #10
 8002874:	d90b      	bls.n	800288e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2205      	movs	r2, #5
 8002886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0c5      	b.n	8002a1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e5      	bne.n	8002868 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ac:	f7ff fb24 	bl	8001ef8 <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028b2:	e012      	b.n	80028da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028b4:	f7ff fb20 	bl	8001ef8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b0a      	cmp	r3, #10
 80028c0:	d90b      	bls.n	80028da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2205      	movs	r2, #5
 80028d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e09f      	b.n	8002a1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0e5      	beq.n	80028b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7e1b      	ldrb	r3, [r3, #24]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d108      	bne.n	8002902 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	e007      	b.n	8002912 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	7e5b      	ldrb	r3, [r3, #25]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d108      	bne.n	800292c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e007      	b.n	800293c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800293a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e9b      	ldrb	r3, [r3, #26]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d108      	bne.n	8002956 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0220 	orr.w	r2, r2, #32
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e007      	b.n	8002966 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0220 	bic.w	r2, r2, #32
 8002964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7edb      	ldrb	r3, [r3, #27]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d108      	bne.n	8002980 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0210 	bic.w	r2, r2, #16
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	e007      	b.n	8002990 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0210 	orr.w	r2, r2, #16
 800298e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7f1b      	ldrb	r3, [r3, #28]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d108      	bne.n	80029aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0208 	orr.w	r2, r2, #8
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e007      	b.n	80029ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0208 	bic.w	r2, r2, #8
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	7f5b      	ldrb	r3, [r3, #29]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d108      	bne.n	80029d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 0204 	orr.w	r2, r2, #4
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e007      	b.n	80029e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0204 	bic.w	r2, r2, #4
 80029e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	ea42 0103 	orr.w	r1, r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <__NVIC_SetPriorityGrouping+0x40>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__NVIC_SetPriorityGrouping+0x40>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00
 8002a68:	05fa0000 	.word	0x05fa0000

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff47 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff5c 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ffb0 	bl	8002b44 <SysTick_Config>
 8002be4:	4603      	mov	r3, r0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e175      	b.n	8002efc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c10:	2201      	movs	r2, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	f040 8164 	bne.w	8002ef6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d00b      	beq.n	8002c4e <HAL_GPIO_Init+0x5e>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d007      	beq.n	8002c4e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c42:	2b11      	cmp	r3, #17
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b12      	cmp	r3, #18
 8002c4c:	d130      	bne.n	8002cb0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 0201 	and.w	r2, r3, #1
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x100>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b12      	cmp	r3, #18
 8002cee:	d123      	bne.n	8002d38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80be 	beq.w	8002ef6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <HAL_GPIO_Init+0x324>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4a65      	ldr	r2, [pc, #404]	; (8002f14 <HAL_GPIO_Init+0x324>)
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d84:	6453      	str	r3, [r2, #68]	; 0x44
 8002d86:	4b63      	ldr	r3, [pc, #396]	; (8002f14 <HAL_GPIO_Init+0x324>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d92:	4a61      	ldr	r2, [pc, #388]	; (8002f18 <HAL_GPIO_Init+0x328>)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a58      	ldr	r2, [pc, #352]	; (8002f1c <HAL_GPIO_Init+0x32c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d037      	beq.n	8002e2e <HAL_GPIO_Init+0x23e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a57      	ldr	r2, [pc, #348]	; (8002f20 <HAL_GPIO_Init+0x330>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d031      	beq.n	8002e2a <HAL_GPIO_Init+0x23a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a56      	ldr	r2, [pc, #344]	; (8002f24 <HAL_GPIO_Init+0x334>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02b      	beq.n	8002e26 <HAL_GPIO_Init+0x236>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a55      	ldr	r2, [pc, #340]	; (8002f28 <HAL_GPIO_Init+0x338>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d025      	beq.n	8002e22 <HAL_GPIO_Init+0x232>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a54      	ldr	r2, [pc, #336]	; (8002f2c <HAL_GPIO_Init+0x33c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d01f      	beq.n	8002e1e <HAL_GPIO_Init+0x22e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a53      	ldr	r2, [pc, #332]	; (8002f30 <HAL_GPIO_Init+0x340>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d019      	beq.n	8002e1a <HAL_GPIO_Init+0x22a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_GPIO_Init+0x344>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_GPIO_Init+0x226>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a51      	ldr	r2, [pc, #324]	; (8002f38 <HAL_GPIO_Init+0x348>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00d      	beq.n	8002e12 <HAL_GPIO_Init+0x222>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_GPIO_Init+0x34c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <HAL_GPIO_Init+0x21e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <HAL_GPIO_Init+0x350>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d101      	bne.n	8002e0a <HAL_GPIO_Init+0x21a>
 8002e06:	2309      	movs	r3, #9
 8002e08:	e012      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e0a:	230a      	movs	r3, #10
 8002e0c:	e010      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e0e:	2308      	movs	r3, #8
 8002e10:	e00e      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e12:	2307      	movs	r3, #7
 8002e14:	e00c      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e16:	2306      	movs	r3, #6
 8002e18:	e00a      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e1a:	2305      	movs	r3, #5
 8002e1c:	e008      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e22:	2303      	movs	r3, #3
 8002e24:	e004      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e002      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x240>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	f002 0203 	and.w	r2, r2, #3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4093      	lsls	r3, r2
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e40:	4935      	ldr	r1, [pc, #212]	; (8002f18 <HAL_GPIO_Init+0x328>)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	089b      	lsrs	r3, r3, #2
 8002e46:	3302      	adds	r3, #2
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <HAL_GPIO_Init+0x354>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e72:	4a34      	ldr	r2, [pc, #208]	; (8002f44 <HAL_GPIO_Init+0x354>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <HAL_GPIO_Init+0x354>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9c:	4a29      	ldr	r2, [pc, #164]	; (8002f44 <HAL_GPIO_Init+0x354>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ea2:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_GPIO_Init+0x354>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ec6:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <HAL_GPIO_Init+0x354>)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_GPIO_Init+0x354>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <HAL_GPIO_Init+0x354>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b0f      	cmp	r3, #15
 8002f00:	f67f ae86 	bls.w	8002c10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	3724      	adds	r7, #36	; 0x24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40020000 	.word	0x40020000
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40020c00 	.word	0x40020c00
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40021400 	.word	0x40021400
 8002f34:	40021800 	.word	0x40021800
 8002f38:	40021c00 	.word	0x40021c00
 8002f3c:	40022000 	.word	0x40022000
 8002f40:	40022400 	.word	0x40022400
 8002f44:	40013c00 	.word	0x40013c00

08002f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e001      	b.n	8002f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f94:	e003      	b.n	8002f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b23      	ldr	r3, [pc, #140]	; (8003044 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	4a22      	ldr	r2, [pc, #136]	; (8003044 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a1d      	ldr	r2, [pc, #116]	; (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fda:	f7fe ff8d 	bl	8001ef8 <HAL_GetTick>
 8002fde:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fe0:	e009      	b.n	8002ff6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fe2:	f7fe ff89 	bl	8001ef8 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ff0:	d901      	bls.n	8002ff6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e022      	b.n	800303c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003002:	d1ee      	bne.n	8002fe2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003004:	4b10      	ldr	r3, [pc, #64]	; (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 800300a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003010:	f7fe ff72 	bl	8001ef8 <HAL_GetTick>
 8003014:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003016:	e009      	b.n	800302c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003018:	f7fe ff6e 	bl	8001ef8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003026:	d901      	bls.n	800302c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e007      	b.n	800303c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_PWREx_EnableOverDrive+0x9c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003038:	d1ee      	bne.n	8003018 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000

0800304c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003054:	2300      	movs	r3, #0
 8003056:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e29b      	b.n	800359a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8087 	beq.w	800317e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003070:	4b96      	ldr	r3, [pc, #600]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b04      	cmp	r3, #4
 800307a:	d00c      	beq.n	8003096 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307c:	4b93      	ldr	r3, [pc, #588]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d112      	bne.n	80030ae <HAL_RCC_OscConfig+0x62>
 8003088:	4b90      	ldr	r3, [pc, #576]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003094:	d10b      	bne.n	80030ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003096:	4b8d      	ldr	r3, [pc, #564]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d06c      	beq.n	800317c <HAL_RCC_OscConfig+0x130>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d168      	bne.n	800317c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e275      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b6:	d106      	bne.n	80030c6 <HAL_RCC_OscConfig+0x7a>
 80030b8:	4b84      	ldr	r3, [pc, #528]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a83      	ldr	r2, [pc, #524]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e02e      	b.n	8003124 <HAL_RCC_OscConfig+0xd8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x9c>
 80030ce:	4b7f      	ldr	r3, [pc, #508]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a7e      	ldr	r2, [pc, #504]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80030d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b7c      	ldr	r3, [pc, #496]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7b      	ldr	r2, [pc, #492]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80030e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e01d      	b.n	8003124 <HAL_RCC_OscConfig+0xd8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f0:	d10c      	bne.n	800310c <HAL_RCC_OscConfig+0xc0>
 80030f2:	4b76      	ldr	r3, [pc, #472]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a75      	ldr	r2, [pc, #468]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80030f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b73      	ldr	r3, [pc, #460]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a72      	ldr	r2, [pc, #456]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e00b      	b.n	8003124 <HAL_RCC_OscConfig+0xd8>
 800310c:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003116:	6013      	str	r3, [r2, #0]
 8003118:	4b6c      	ldr	r3, [pc, #432]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6b      	ldr	r2, [pc, #428]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 800311e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d013      	beq.n	8003154 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe fee4 	bl	8001ef8 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003134:	f7fe fee0 	bl	8001ef8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	; 0x64
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e229      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	4b61      	ldr	r3, [pc, #388]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0xe8>
 8003152:	e014      	b.n	800317e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe fed0 	bl	8001ef8 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800315c:	f7fe fecc 	bl	8001ef8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	; 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e215      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	4b57      	ldr	r3, [pc, #348]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1f0      	bne.n	800315c <HAL_RCC_OscConfig+0x110>
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d069      	beq.n	800325e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800318a:	4b50      	ldr	r3, [pc, #320]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003196:	4b4d      	ldr	r3, [pc, #308]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d11c      	bne.n	80031dc <HAL_RCC_OscConfig+0x190>
 80031a2:	4b4a      	ldr	r3, [pc, #296]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d116      	bne.n	80031dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d001      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e1e9      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c6:	4b41      	ldr	r3, [pc, #260]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	493d      	ldr	r1, [pc, #244]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	e040      	b.n	800325e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d023      	beq.n	800322c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e4:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a38      	ldr	r2, [pc, #224]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f0:	f7fe fe82 	bl	8001ef8 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe fe7e 	bl	8001ef8 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e1c7      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320a:	4b30      	ldr	r3, [pc, #192]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003216:	4b2d      	ldr	r3, [pc, #180]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	4929      	ldr	r1, [pc, #164]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]
 800322a:	e018      	b.n	800325e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322c:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a26      	ldr	r2, [pc, #152]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fe5e 	bl	8001ef8 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003240:	f7fe fe5a 	bl	8001ef8 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1a3      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d038      	beq.n	80032dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d019      	beq.n	80032a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003272:	4b16      	ldr	r3, [pc, #88]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003276:	4a15      	ldr	r2, [pc, #84]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327e:	f7fe fe3b 	bl	8001ef8 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003286:	f7fe fe37 	bl	8001ef8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e180      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x23a>
 80032a4:	e01a      	b.n	80032dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	4a08      	ldr	r2, [pc, #32]	; (80032cc <HAL_RCC_OscConfig+0x280>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe fe21 	bl	8001ef8 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ba:	f7fe fe1d 	bl	8001ef8 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d903      	bls.n	80032d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e166      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
 80032cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	4b92      	ldr	r3, [pc, #584]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80a4 	beq.w	8003432 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ea:	4b8c      	ldr	r3, [pc, #560]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	4b89      	ldr	r3, [pc, #548]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a88      	ldr	r2, [pc, #544]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b86      	ldr	r3, [pc, #536]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800330e:	2301      	movs	r3, #1
 8003310:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003312:	4b83      	ldr	r3, [pc, #524]	; (8003520 <HAL_RCC_OscConfig+0x4d4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	2b00      	cmp	r3, #0
 800331c:	d118      	bne.n	8003350 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800331e:	4b80      	ldr	r3, [pc, #512]	; (8003520 <HAL_RCC_OscConfig+0x4d4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a7f      	ldr	r2, [pc, #508]	; (8003520 <HAL_RCC_OscConfig+0x4d4>)
 8003324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332a:	f7fe fde5 	bl	8001ef8 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003332:	f7fe fde1 	bl	8001ef8 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b64      	cmp	r3, #100	; 0x64
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e12a      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003344:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x4d4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x31a>
 8003358:	4b70      	ldr	r3, [pc, #448]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a6f      	ldr	r2, [pc, #444]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
 8003364:	e02d      	b.n	80033c2 <HAL_RCC_OscConfig+0x376>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x33c>
 800336e:	4b6b      	ldr	r3, [pc, #428]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003372:	4a6a      	ldr	r2, [pc, #424]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003374:	f023 0301 	bic.w	r3, r3, #1
 8003378:	6713      	str	r3, [r2, #112]	; 0x70
 800337a:	4b68      	ldr	r3, [pc, #416]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 800337c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337e:	4a67      	ldr	r2, [pc, #412]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	6713      	str	r3, [r2, #112]	; 0x70
 8003386:	e01c      	b.n	80033c2 <HAL_RCC_OscConfig+0x376>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d10c      	bne.n	80033aa <HAL_RCC_OscConfig+0x35e>
 8003390:	4b62      	ldr	r3, [pc, #392]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	4a61      	ldr	r2, [pc, #388]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003396:	f043 0304 	orr.w	r3, r3, #4
 800339a:	6713      	str	r3, [r2, #112]	; 0x70
 800339c:	4b5f      	ldr	r3, [pc, #380]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a5e      	ldr	r2, [pc, #376]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
 80033a8:	e00b      	b.n	80033c2 <HAL_RCC_OscConfig+0x376>
 80033aa:	4b5c      	ldr	r3, [pc, #368]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a5b      	ldr	r2, [pc, #364]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
 80033b6:	4b59      	ldr	r3, [pc, #356]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a58      	ldr	r2, [pc, #352]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	f023 0304 	bic.w	r3, r3, #4
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d015      	beq.n	80033f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ca:	f7fe fd95 	bl	8001ef8 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d0:	e00a      	b.n	80033e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fe fd91 	bl	8001ef8 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0d8      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e8:	4b4c      	ldr	r3, [pc, #304]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ee      	beq.n	80033d2 <HAL_RCC_OscConfig+0x386>
 80033f4:	e014      	b.n	8003420 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fe fd7f 	bl	8001ef8 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe fd7b 	bl	8001ef8 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0c2      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003414:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1ee      	bne.n	80033fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a3c      	ldr	r2, [pc, #240]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80ae 	beq.w	8003598 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800343c:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 030c 	and.w	r3, r3, #12
 8003444:	2b08      	cmp	r3, #8
 8003446:	d06d      	beq.n	8003524 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d14b      	bne.n	80034e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003450:	4b32      	ldr	r3, [pc, #200]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a31      	ldr	r2, [pc, #196]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fe fd4c 	bl	8001ef8 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fd48 	bl	8001ef8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e091      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b29      	ldr	r3, [pc, #164]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	071b      	lsls	r3, r3, #28
 80034ae:	491b      	ldr	r1, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a18      	ldr	r2, [pc, #96]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fd1a 	bl	8001ef8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fd16 	bl	8001ef8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e05f      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x47c>
 80034e6:	e057      	b.n	8003598 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0b      	ldr	r2, [pc, #44]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 80034ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe fd00 	bl	8001ef8 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7fe fcfc 	bl	8001ef8 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e045      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	4b03      	ldr	r3, [pc, #12]	; (800351c <HAL_RCC_OscConfig+0x4d0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x4b0>
 800351a:	e03d      	b.n	8003598 <HAL_RCC_OscConfig+0x54c>
 800351c:	40023800 	.word	0x40023800
 8003520:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003524:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <HAL_RCC_OscConfig+0x558>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d030      	beq.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d129      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d122      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003554:	4013      	ands	r3, r2
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800355a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800355c:	4293      	cmp	r3, r2
 800355e:	d119      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	3b01      	subs	r3, #1
 800356e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d10f      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d107      	bne.n	8003594 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d001      	beq.n	8003598 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40023800 	.word	0x40023800

080035a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0d0      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035c0:	4b6a      	ldr	r3, [pc, #424]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 030f 	and.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d910      	bls.n	80035f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b67      	ldr	r3, [pc, #412]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 020f 	bic.w	r2, r3, #15
 80035d6:	4965      	ldr	r1, [pc, #404]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b63      	ldr	r3, [pc, #396]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0b8      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003608:	4b59      	ldr	r3, [pc, #356]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	4a58      	ldr	r2, [pc, #352]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800360e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0308 	and.w	r3, r3, #8
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a52      	ldr	r2, [pc, #328]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800362a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	494d      	ldr	r1, [pc, #308]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d040      	beq.n	80036cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003652:	4b47      	ldr	r3, [pc, #284]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d115      	bne.n	800368a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e07f      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d109      	bne.n	800368a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e073      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367a:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06b      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800368a:	4b39      	ldr	r3, [pc, #228]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 0203 	bic.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4936      	ldr	r1, [pc, #216]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	4313      	orrs	r3, r2
 800369a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fe fc2c 	bl	8001ef8 <HAL_GetTick>
 80036a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036a4:	f7fe fc28 	bl	8001ef8 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e053      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ba:	4b2d      	ldr	r3, [pc, #180]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 020c 	and.w	r2, r3, #12
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d1eb      	bne.n	80036a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036cc:	4b27      	ldr	r3, [pc, #156]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d210      	bcs.n	80036fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 020f 	bic.w	r2, r3, #15
 80036e2:	4922      	ldr	r1, [pc, #136]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ea:	4b20      	ldr	r3, [pc, #128]	; (800376c <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 030f 	and.w	r3, r3, #15
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d001      	beq.n	80036fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e032      	b.n	8003762 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003708:	4b19      	ldr	r3, [pc, #100]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	4916      	ldr	r1, [pc, #88]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	490e      	ldr	r1, [pc, #56]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003736:	4313      	orrs	r3, r2
 8003738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800373a:	f000 f821 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 800373e:	4602      	mov	r2, r0
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_ClockConfig+0x1c8>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	091b      	lsrs	r3, r3, #4
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	490a      	ldr	r1, [pc, #40]	; (8003774 <HAL_RCC_ClockConfig+0x1cc>)
 800374c:	5ccb      	ldrb	r3, [r1, r3]
 800374e:	fa22 f303 	lsr.w	r3, r2, r3
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <HAL_RCC_ClockConfig+0x1d0>)
 8003754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_ClockConfig+0x1d4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7fe fb88 	bl	8001e70 <HAL_InitTick>

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40023c00 	.word	0x40023c00
 8003770:	40023800 	.word	0x40023800
 8003774:	08004f00 	.word	0x08004f00
 8003778:	20000000 	.word	0x20000000
 800377c:	20000004 	.word	0x20000004

08003780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003780:	b5b0      	push	{r4, r5, r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003786:	2100      	movs	r1, #0
 8003788:	6079      	str	r1, [r7, #4]
 800378a:	2100      	movs	r1, #0
 800378c:	60f9      	str	r1, [r7, #12]
 800378e:	2100      	movs	r1, #0
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003792:	2100      	movs	r1, #0
 8003794:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003796:	4952      	ldr	r1, [pc, #328]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003798:	6889      	ldr	r1, [r1, #8]
 800379a:	f001 010c 	and.w	r1, r1, #12
 800379e:	2908      	cmp	r1, #8
 80037a0:	d00d      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0x3e>
 80037a2:	2908      	cmp	r1, #8
 80037a4:	f200 8094 	bhi.w	80038d0 <HAL_RCC_GetSysClockFreq+0x150>
 80037a8:	2900      	cmp	r1, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x32>
 80037ac:	2904      	cmp	r1, #4
 80037ae:	d003      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x38>
 80037b0:	e08e      	b.n	80038d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037b2:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80037b4:	60bb      	str	r3, [r7, #8]
      break;
 80037b6:	e08e      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80037ba:	60bb      	str	r3, [r7, #8]
      break;
 80037bc:	e08b      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037be:	4948      	ldr	r1, [pc, #288]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80037c0:	6849      	ldr	r1, [r1, #4]
 80037c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80037c6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037c8:	4945      	ldr	r1, [pc, #276]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80037ca:	6849      	ldr	r1, [r1, #4]
 80037cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80037d0:	2900      	cmp	r1, #0
 80037d2:	d024      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d4:	4942      	ldr	r1, [pc, #264]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80037d6:	6849      	ldr	r1, [r1, #4]
 80037d8:	0989      	lsrs	r1, r1, #6
 80037da:	4608      	mov	r0, r1
 80037dc:	f04f 0100 	mov.w	r1, #0
 80037e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80037e4:	f04f 0500 	mov.w	r5, #0
 80037e8:	ea00 0204 	and.w	r2, r0, r4
 80037ec:	ea01 0305 	and.w	r3, r1, r5
 80037f0:	493d      	ldr	r1, [pc, #244]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80037f2:	fb01 f003 	mul.w	r0, r1, r3
 80037f6:	2100      	movs	r1, #0
 80037f8:	fb01 f102 	mul.w	r1, r1, r2
 80037fc:	1844      	adds	r4, r0, r1
 80037fe:	493a      	ldr	r1, [pc, #232]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003800:	fba2 0101 	umull	r0, r1, r2, r1
 8003804:	1863      	adds	r3, r4, r1
 8003806:	4619      	mov	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	461a      	mov	r2, r3
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	f7fc fd1a 	bl	8000248 <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4613      	mov	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e04a      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381e:	4b30      	ldr	r3, [pc, #192]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	099b      	lsrs	r3, r3, #6
 8003824:	461a      	mov	r2, r3
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	ea02 0400 	and.w	r4, r2, r0
 8003836:	ea03 0501 	and.w	r5, r3, r1
 800383a:	4620      	mov	r0, r4
 800383c:	4629      	mov	r1, r5
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	014b      	lsls	r3, r1, #5
 8003848:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800384c:	0142      	lsls	r2, r0, #5
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	1b00      	subs	r0, r0, r4
 8003854:	eb61 0105 	sbc.w	r1, r1, r5
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	018b      	lsls	r3, r1, #6
 8003862:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003866:	0182      	lsls	r2, r0, #6
 8003868:	1a12      	subs	r2, r2, r0
 800386a:	eb63 0301 	sbc.w	r3, r3, r1
 800386e:	f04f 0000 	mov.w	r0, #0
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	00d9      	lsls	r1, r3, #3
 8003878:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800387c:	00d0      	lsls	r0, r2, #3
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	1912      	adds	r2, r2, r4
 8003884:	eb45 0303 	adc.w	r3, r5, r3
 8003888:	f04f 0000 	mov.w	r0, #0
 800388c:	f04f 0100 	mov.w	r1, #0
 8003890:	0299      	lsls	r1, r3, #10
 8003892:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003896:	0290      	lsls	r0, r2, #10
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f04f 0300 	mov.w	r3, #0
 80038a8:	f7fc fcce 	bl	8000248 <__aeabi_uldivmod>
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4613      	mov	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	3301      	adds	r3, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	60bb      	str	r3, [r7, #8]
      break;
 80038ce:	e002      	b.n	80038d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80038d2:	60bb      	str	r3, [r7, #8]
      break;
 80038d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d6:	68bb      	ldr	r3, [r7, #8]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bdb0      	pop	{r4, r5, r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	017d7840 	.word	0x017d7840

080038ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a9b      	lsrs	r3, r3, #10
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	08004f10 	.word	0x08004f10

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003930:	f7ff ffdc 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0b5b      	lsrs	r3, r3, #13
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	08004f10 	.word	0x08004f10

08003954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800397c:	4b69      	ldr	r3, [pc, #420]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a68      	ldr	r2, [pc, #416]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003986:	6093      	str	r3, [r2, #8]
 8003988:	4b66      	ldr	r3, [pc, #408]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	4964      	ldr	r1, [pc, #400]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800399e:	2301      	movs	r3, #1
 80039a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d017      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039ae:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039bc:	4959      	ldr	r1, [pc, #356]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039cc:	d101      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039da:	2301      	movs	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ea:	4b4e      	ldr	r3, [pc, #312]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	494a      	ldr	r1, [pc, #296]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a08:	d101      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a26:	2301      	movs	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 808b 	beq.w	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a38:	4b3a      	ldr	r3, [pc, #232]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	4a39      	ldr	r2, [pc, #228]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a42:	6413      	str	r3, [r2, #64]	; 0x40
 8003a44:	4b37      	ldr	r3, [pc, #220]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a34      	ldr	r2, [pc, #208]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a5c:	f7fe fa4c 	bl	8001ef8 <HAL_GetTick>
 8003a60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a64:	f7fe fa48 	bl	8001ef8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e38f      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a76:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a82:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d035      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d02e      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aa0:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aaa:	4b1e      	ldr	r3, [pc, #120]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	4a1a      	ldr	r2, [pc, #104]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ac2:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ac8:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d114      	bne.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe fa10 	bl	8001ef8 <HAL_GetTick>
 8003ad8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fe fa0c 	bl	8001ef8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e351      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ee      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0a:	d111      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b1a:	400b      	ands	r3, r1
 8003b1c:	4901      	ldr	r1, [pc, #4]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
 8003b22:	e00b      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	0ffffcff 	.word	0x0ffffcff
 8003b30:	4bb3      	ldr	r3, [pc, #716]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4ab2      	ldr	r2, [pc, #712]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b3a:	6093      	str	r3, [r2, #8]
 8003b3c:	4bb0      	ldr	r3, [pc, #704]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b48:	49ad      	ldr	r1, [pc, #692]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d010      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b5a:	4ba9      	ldr	r3, [pc, #676]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b60:	4aa7      	ldr	r2, [pc, #668]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b6a:	4ba5      	ldr	r3, [pc, #660]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	49a2      	ldr	r1, [pc, #648]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b88:	4b9d      	ldr	r3, [pc, #628]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b96:	499a      	ldr	r1, [pc, #616]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003baa:	4b95      	ldr	r3, [pc, #596]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bb8:	4991      	ldr	r1, [pc, #580]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bcc:	4b8c      	ldr	r3, [pc, #560]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bda:	4989      	ldr	r1, [pc, #548]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bee:	4b84      	ldr	r3, [pc, #528]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4980      	ldr	r1, [pc, #512]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c10:	4b7b      	ldr	r3, [pc, #492]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	4978      	ldr	r1, [pc, #480]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c32:	4b73      	ldr	r3, [pc, #460]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f023 020c 	bic.w	r2, r3, #12
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c40:	496f      	ldr	r1, [pc, #444]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c54:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	4967      	ldr	r1, [pc, #412]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c76:	4b62      	ldr	r3, [pc, #392]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	495e      	ldr	r1, [pc, #376]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c98:	4b59      	ldr	r3, [pc, #356]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	4956      	ldr	r1, [pc, #344]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003cba:	4b51      	ldr	r3, [pc, #324]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	494d      	ldr	r1, [pc, #308]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cdc:	4b48      	ldr	r3, [pc, #288]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cea:	4945      	ldr	r1, [pc, #276]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cfe:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0c:	493c      	ldr	r1, [pc, #240]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d20:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2e:	4934      	ldr	r1, [pc, #208]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d011      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d42:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d48:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d50:	492b      	ldr	r1, [pc, #172]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d60:	d101      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d72:	2301      	movs	r3, #1
 8003d74:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d90:	491b      	ldr	r1, [pc, #108]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00b      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003da4:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003daa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003db4:	4912      	ldr	r1, [pc, #72]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd8:	4909      	ldr	r1, [pc, #36]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00f      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	e002      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	4986      	ldr	r1, [pc, #536]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00b      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e18:	4b81      	ldr	r3, [pc, #516]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e28:	497d      	ldr	r1, [pc, #500]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d006      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80d6 	beq.w	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e44:	4b76      	ldr	r3, [pc, #472]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a75      	ldr	r2, [pc, #468]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e50:	f7fe f852 	bl	8001ef8 <HAL_GetTick>
 8003e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e58:	f7fe f84e 	bl	8001ef8 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	; 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e195      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e6a:	4b6d      	ldr	r3, [pc, #436]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d021      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d11d      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e98:	4b61      	ldr	r3, [pc, #388]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9e:	0e1b      	lsrs	r3, r3, #24
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	019a      	lsls	r2, r3, #6
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	071b      	lsls	r3, r3, #28
 8003ebe:	4958      	ldr	r1, [pc, #352]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eda:	d00a      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d02e      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef0:	d129      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ef2:	4b4b      	ldr	r3, [pc, #300]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef8:	0c1b      	lsrs	r3, r3, #16
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f00:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f06:	0f1b      	lsrs	r3, r3, #28
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	019a      	lsls	r2, r3, #6
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	041b      	lsls	r3, r3, #16
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	071b      	lsls	r3, r3, #28
 8003f26:	493e      	ldr	r1, [pc, #248]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f2e:	4b3c      	ldr	r3, [pc, #240]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f34:	f023 021f 	bic.w	r2, r3, #31
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	4938      	ldr	r1, [pc, #224]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01d      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f52:	4b33      	ldr	r3, [pc, #204]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f58:	0e1b      	lsrs	r3, r3, #24
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f60:	4b2f      	ldr	r3, [pc, #188]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f66:	0f1b      	lsrs	r3, r3, #28
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	019a      	lsls	r2, r3, #6
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	041b      	lsls	r3, r3, #16
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	061b      	lsls	r3, r3, #24
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	071b      	lsls	r3, r3, #28
 8003f86:	4926      	ldr	r1, [pc, #152]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	019a      	lsls	r2, r3, #6
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	071b      	lsls	r3, r3, #28
 8003fb6:	491a      	ldr	r1, [pc, #104]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fbe:	4b18      	ldr	r3, [pc, #96]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fca:	f7fd ff95 	bl	8001ef8 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fd2:	f7fd ff91 	bl	8001ef8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b64      	cmp	r3, #100	; 0x64
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e0d8      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	f040 80ce 	bne.w	8004194 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a08      	ldr	r2, [pc, #32]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004004:	f7fd ff78 	bl	8001ef8 <HAL_GetTick>
 8004008:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800400a:	e00b      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800400c:	f7fd ff74 	bl	8001ef8 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b64      	cmp	r3, #100	; 0x64
 8004018:	d904      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0bb      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800401e:	bf00      	nop
 8004020:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004024:	4b5e      	ldr	r3, [pc, #376]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800402c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004030:	d0ec      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800404e:	2b00      	cmp	r3, #0
 8004050:	d02e      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d12a      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800405a:	4b51      	ldr	r3, [pc, #324]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004068:	4b4d      	ldr	r3, [pc, #308]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	0f1b      	lsrs	r3, r3, #28
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	019a      	lsls	r2, r3, #6
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	041b      	lsls	r3, r3, #16
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	061b      	lsls	r3, r3, #24
 8004088:	431a      	orrs	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	071b      	lsls	r3, r3, #28
 800408e:	4944      	ldr	r1, [pc, #272]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004096:	4b42      	ldr	r3, [pc, #264]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	493d      	ldr	r1, [pc, #244]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d022      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c4:	d11d      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040c6:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	0e1b      	lsrs	r3, r3, #24
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040d4:	4b32      	ldr	r3, [pc, #200]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040da:	0f1b      	lsrs	r3, r3, #28
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	019a      	lsls	r2, r3, #6
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	431a      	orrs	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	061b      	lsls	r3, r3, #24
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	071b      	lsls	r3, r3, #28
 80040fa:	4929      	ldr	r1, [pc, #164]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0308 	and.w	r3, r3, #8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d028      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	0e1b      	lsrs	r3, r3, #24
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	019a      	lsls	r2, r3, #6
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	041b      	lsls	r3, r3, #16
 8004134:	431a      	orrs	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	061b      	lsls	r3, r3, #24
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	071b      	lsls	r3, r3, #28
 8004142:	4917      	ldr	r1, [pc, #92]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004158:	4911      	ldr	r1, [pc, #68]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800415a:	4313      	orrs	r3, r2
 800415c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416c:	f7fd fec4 	bl	8001ef8 <HAL_GetTick>
 8004170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004174:	f7fd fec0 	bl	8001ef8 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e007      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800418e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004192:	d1ef      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800

080041a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e040      	b.n	8004238 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd fdd8 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2224      	movs	r2, #36	; 0x24
 80041d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0201 	bic.w	r2, r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f8c0 	bl	8004368 <UART_SetConfig>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e022      	b.n	8004238 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fb16 	bl	800482c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800420e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800421e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fb9d 	bl	8004970 <UART_CheckIdleState>
 8004236:	4603      	mov	r3, r0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	; 0x28
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	603b      	str	r3, [r7, #0]
 800424c:	4613      	mov	r3, r2
 800424e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004254:	2b20      	cmp	r3, #32
 8004256:	f040 8081 	bne.w	800435c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_UART_Transmit+0x26>
 8004260:	88fb      	ldrh	r3, [r7, #6]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e079      	b.n	800435e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004270:	2b01      	cmp	r3, #1
 8004272:	d101      	bne.n	8004278 <HAL_UART_Transmit+0x38>
 8004274:	2302      	movs	r3, #2
 8004276:	e072      	b.n	800435e <HAL_UART_Transmit+0x11e>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2221      	movs	r2, #33	; 0x21
 800428c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800428e:	f7fd fe33 	bl	8001ef8 <HAL_GetTick>
 8004292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ac:	d108      	bne.n	80042c0 <HAL_UART_Transmit+0x80>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	e003      	b.n	80042c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80042d0:	e02c      	b.n	800432c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2200      	movs	r2, #0
 80042da:	2180      	movs	r1, #128	; 0x80
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 fb90 	bl	8004a02 <UART_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e038      	b.n	800435e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10b      	bne.n	800430a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	3302      	adds	r3, #2
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	e007      	b.n	800431a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	3301      	adds	r3, #1
 8004318:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004332:	b29b      	uxth	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1cc      	bne.n	80042d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2200      	movs	r2, #0
 8004340:	2140      	movs	r1, #64	; 0x40
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f000 fb5d 	bl	8004a02 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e005      	b.n	800435e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4ba7      	ldr	r3, [pc, #668]	; (8004630 <UART_SetConfig+0x2c8>)
 8004394:	4013      	ands	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	430b      	orrs	r3, r1
 800439e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a95      	ldr	r2, [pc, #596]	; (8004634 <UART_SetConfig+0x2cc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d120      	bne.n	8004426 <UART_SetConfig+0xbe>
 80043e4:	4b94      	ldr	r3, [pc, #592]	; (8004638 <UART_SetConfig+0x2d0>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d816      	bhi.n	8004420 <UART_SetConfig+0xb8>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <UART_SetConfig+0x90>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	08004409 	.word	0x08004409
 80043fc:	08004415 	.word	0x08004415
 8004400:	0800440f 	.word	0x0800440f
 8004404:	0800441b 	.word	0x0800441b
 8004408:	2301      	movs	r3, #1
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e14f      	b.n	80046ae <UART_SetConfig+0x346>
 800440e:	2302      	movs	r3, #2
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	e14c      	b.n	80046ae <UART_SetConfig+0x346>
 8004414:	2304      	movs	r3, #4
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e149      	b.n	80046ae <UART_SetConfig+0x346>
 800441a:	2308      	movs	r3, #8
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e146      	b.n	80046ae <UART_SetConfig+0x346>
 8004420:	2310      	movs	r3, #16
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e143      	b.n	80046ae <UART_SetConfig+0x346>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a84      	ldr	r2, [pc, #528]	; (800463c <UART_SetConfig+0x2d4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d132      	bne.n	8004496 <UART_SetConfig+0x12e>
 8004430:	4b81      	ldr	r3, [pc, #516]	; (8004638 <UART_SetConfig+0x2d0>)
 8004432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d828      	bhi.n	8004490 <UART_SetConfig+0x128>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0xdc>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004479 	.word	0x08004479
 8004448:	08004491 	.word	0x08004491
 800444c:	08004491 	.word	0x08004491
 8004450:	08004491 	.word	0x08004491
 8004454:	08004485 	.word	0x08004485
 8004458:	08004491 	.word	0x08004491
 800445c:	08004491 	.word	0x08004491
 8004460:	08004491 	.word	0x08004491
 8004464:	0800447f 	.word	0x0800447f
 8004468:	08004491 	.word	0x08004491
 800446c:	08004491 	.word	0x08004491
 8004470:	08004491 	.word	0x08004491
 8004474:	0800448b 	.word	0x0800448b
 8004478:	2300      	movs	r3, #0
 800447a:	77fb      	strb	r3, [r7, #31]
 800447c:	e117      	b.n	80046ae <UART_SetConfig+0x346>
 800447e:	2302      	movs	r3, #2
 8004480:	77fb      	strb	r3, [r7, #31]
 8004482:	e114      	b.n	80046ae <UART_SetConfig+0x346>
 8004484:	2304      	movs	r3, #4
 8004486:	77fb      	strb	r3, [r7, #31]
 8004488:	e111      	b.n	80046ae <UART_SetConfig+0x346>
 800448a:	2308      	movs	r3, #8
 800448c:	77fb      	strb	r3, [r7, #31]
 800448e:	e10e      	b.n	80046ae <UART_SetConfig+0x346>
 8004490:	2310      	movs	r3, #16
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	e10b      	b.n	80046ae <UART_SetConfig+0x346>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a69      	ldr	r2, [pc, #420]	; (8004640 <UART_SetConfig+0x2d8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d120      	bne.n	80044e2 <UART_SetConfig+0x17a>
 80044a0:	4b65      	ldr	r3, [pc, #404]	; (8004638 <UART_SetConfig+0x2d0>)
 80044a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044aa:	2b30      	cmp	r3, #48	; 0x30
 80044ac:	d013      	beq.n	80044d6 <UART_SetConfig+0x16e>
 80044ae:	2b30      	cmp	r3, #48	; 0x30
 80044b0:	d814      	bhi.n	80044dc <UART_SetConfig+0x174>
 80044b2:	2b20      	cmp	r3, #32
 80044b4:	d009      	beq.n	80044ca <UART_SetConfig+0x162>
 80044b6:	2b20      	cmp	r3, #32
 80044b8:	d810      	bhi.n	80044dc <UART_SetConfig+0x174>
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <UART_SetConfig+0x15c>
 80044be:	2b10      	cmp	r3, #16
 80044c0:	d006      	beq.n	80044d0 <UART_SetConfig+0x168>
 80044c2:	e00b      	b.n	80044dc <UART_SetConfig+0x174>
 80044c4:	2300      	movs	r3, #0
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	e0f1      	b.n	80046ae <UART_SetConfig+0x346>
 80044ca:	2302      	movs	r3, #2
 80044cc:	77fb      	strb	r3, [r7, #31]
 80044ce:	e0ee      	b.n	80046ae <UART_SetConfig+0x346>
 80044d0:	2304      	movs	r3, #4
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e0eb      	b.n	80046ae <UART_SetConfig+0x346>
 80044d6:	2308      	movs	r3, #8
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e0e8      	b.n	80046ae <UART_SetConfig+0x346>
 80044dc:	2310      	movs	r3, #16
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e0e5      	b.n	80046ae <UART_SetConfig+0x346>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a57      	ldr	r2, [pc, #348]	; (8004644 <UART_SetConfig+0x2dc>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d120      	bne.n	800452e <UART_SetConfig+0x1c6>
 80044ec:	4b52      	ldr	r3, [pc, #328]	; (8004638 <UART_SetConfig+0x2d0>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044f6:	2bc0      	cmp	r3, #192	; 0xc0
 80044f8:	d013      	beq.n	8004522 <UART_SetConfig+0x1ba>
 80044fa:	2bc0      	cmp	r3, #192	; 0xc0
 80044fc:	d814      	bhi.n	8004528 <UART_SetConfig+0x1c0>
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d009      	beq.n	8004516 <UART_SetConfig+0x1ae>
 8004502:	2b80      	cmp	r3, #128	; 0x80
 8004504:	d810      	bhi.n	8004528 <UART_SetConfig+0x1c0>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d002      	beq.n	8004510 <UART_SetConfig+0x1a8>
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d006      	beq.n	800451c <UART_SetConfig+0x1b4>
 800450e:	e00b      	b.n	8004528 <UART_SetConfig+0x1c0>
 8004510:	2300      	movs	r3, #0
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e0cb      	b.n	80046ae <UART_SetConfig+0x346>
 8004516:	2302      	movs	r3, #2
 8004518:	77fb      	strb	r3, [r7, #31]
 800451a:	e0c8      	b.n	80046ae <UART_SetConfig+0x346>
 800451c:	2304      	movs	r3, #4
 800451e:	77fb      	strb	r3, [r7, #31]
 8004520:	e0c5      	b.n	80046ae <UART_SetConfig+0x346>
 8004522:	2308      	movs	r3, #8
 8004524:	77fb      	strb	r3, [r7, #31]
 8004526:	e0c2      	b.n	80046ae <UART_SetConfig+0x346>
 8004528:	2310      	movs	r3, #16
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e0bf      	b.n	80046ae <UART_SetConfig+0x346>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a45      	ldr	r2, [pc, #276]	; (8004648 <UART_SetConfig+0x2e0>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d125      	bne.n	8004584 <UART_SetConfig+0x21c>
 8004538:	4b3f      	ldr	r3, [pc, #252]	; (8004638 <UART_SetConfig+0x2d0>)
 800453a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004546:	d017      	beq.n	8004578 <UART_SetConfig+0x210>
 8004548:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800454c:	d817      	bhi.n	800457e <UART_SetConfig+0x216>
 800454e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004552:	d00b      	beq.n	800456c <UART_SetConfig+0x204>
 8004554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004558:	d811      	bhi.n	800457e <UART_SetConfig+0x216>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <UART_SetConfig+0x1fe>
 800455e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004562:	d006      	beq.n	8004572 <UART_SetConfig+0x20a>
 8004564:	e00b      	b.n	800457e <UART_SetConfig+0x216>
 8004566:	2300      	movs	r3, #0
 8004568:	77fb      	strb	r3, [r7, #31]
 800456a:	e0a0      	b.n	80046ae <UART_SetConfig+0x346>
 800456c:	2302      	movs	r3, #2
 800456e:	77fb      	strb	r3, [r7, #31]
 8004570:	e09d      	b.n	80046ae <UART_SetConfig+0x346>
 8004572:	2304      	movs	r3, #4
 8004574:	77fb      	strb	r3, [r7, #31]
 8004576:	e09a      	b.n	80046ae <UART_SetConfig+0x346>
 8004578:	2308      	movs	r3, #8
 800457a:	77fb      	strb	r3, [r7, #31]
 800457c:	e097      	b.n	80046ae <UART_SetConfig+0x346>
 800457e:	2310      	movs	r3, #16
 8004580:	77fb      	strb	r3, [r7, #31]
 8004582:	e094      	b.n	80046ae <UART_SetConfig+0x346>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a30      	ldr	r2, [pc, #192]	; (800464c <UART_SetConfig+0x2e4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d125      	bne.n	80045da <UART_SetConfig+0x272>
 800458e:	4b2a      	ldr	r3, [pc, #168]	; (8004638 <UART_SetConfig+0x2d0>)
 8004590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800459c:	d017      	beq.n	80045ce <UART_SetConfig+0x266>
 800459e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045a2:	d817      	bhi.n	80045d4 <UART_SetConfig+0x26c>
 80045a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a8:	d00b      	beq.n	80045c2 <UART_SetConfig+0x25a>
 80045aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ae:	d811      	bhi.n	80045d4 <UART_SetConfig+0x26c>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <UART_SetConfig+0x254>
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b8:	d006      	beq.n	80045c8 <UART_SetConfig+0x260>
 80045ba:	e00b      	b.n	80045d4 <UART_SetConfig+0x26c>
 80045bc:	2301      	movs	r3, #1
 80045be:	77fb      	strb	r3, [r7, #31]
 80045c0:	e075      	b.n	80046ae <UART_SetConfig+0x346>
 80045c2:	2302      	movs	r3, #2
 80045c4:	77fb      	strb	r3, [r7, #31]
 80045c6:	e072      	b.n	80046ae <UART_SetConfig+0x346>
 80045c8:	2304      	movs	r3, #4
 80045ca:	77fb      	strb	r3, [r7, #31]
 80045cc:	e06f      	b.n	80046ae <UART_SetConfig+0x346>
 80045ce:	2308      	movs	r3, #8
 80045d0:	77fb      	strb	r3, [r7, #31]
 80045d2:	e06c      	b.n	80046ae <UART_SetConfig+0x346>
 80045d4:	2310      	movs	r3, #16
 80045d6:	77fb      	strb	r3, [r7, #31]
 80045d8:	e069      	b.n	80046ae <UART_SetConfig+0x346>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <UART_SetConfig+0x2e8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d137      	bne.n	8004654 <UART_SetConfig+0x2ec>
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <UART_SetConfig+0x2d0>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80045ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045f2:	d017      	beq.n	8004624 <UART_SetConfig+0x2bc>
 80045f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045f8:	d817      	bhi.n	800462a <UART_SetConfig+0x2c2>
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fe:	d00b      	beq.n	8004618 <UART_SetConfig+0x2b0>
 8004600:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004604:	d811      	bhi.n	800462a <UART_SetConfig+0x2c2>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <UART_SetConfig+0x2aa>
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460e:	d006      	beq.n	800461e <UART_SetConfig+0x2b6>
 8004610:	e00b      	b.n	800462a <UART_SetConfig+0x2c2>
 8004612:	2300      	movs	r3, #0
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e04a      	b.n	80046ae <UART_SetConfig+0x346>
 8004618:	2302      	movs	r3, #2
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e047      	b.n	80046ae <UART_SetConfig+0x346>
 800461e:	2304      	movs	r3, #4
 8004620:	77fb      	strb	r3, [r7, #31]
 8004622:	e044      	b.n	80046ae <UART_SetConfig+0x346>
 8004624:	2308      	movs	r3, #8
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e041      	b.n	80046ae <UART_SetConfig+0x346>
 800462a:	2310      	movs	r3, #16
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e03e      	b.n	80046ae <UART_SetConfig+0x346>
 8004630:	efff69f3 	.word	0xefff69f3
 8004634:	40011000 	.word	0x40011000
 8004638:	40023800 	.word	0x40023800
 800463c:	40004400 	.word	0x40004400
 8004640:	40004800 	.word	0x40004800
 8004644:	40004c00 	.word	0x40004c00
 8004648:	40005000 	.word	0x40005000
 800464c:	40011400 	.word	0x40011400
 8004650:	40007800 	.word	0x40007800
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a71      	ldr	r2, [pc, #452]	; (8004820 <UART_SetConfig+0x4b8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d125      	bne.n	80046aa <UART_SetConfig+0x342>
 800465e:	4b71      	ldr	r3, [pc, #452]	; (8004824 <UART_SetConfig+0x4bc>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004668:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800466c:	d017      	beq.n	800469e <UART_SetConfig+0x336>
 800466e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004672:	d817      	bhi.n	80046a4 <UART_SetConfig+0x33c>
 8004674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004678:	d00b      	beq.n	8004692 <UART_SetConfig+0x32a>
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	d811      	bhi.n	80046a4 <UART_SetConfig+0x33c>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <UART_SetConfig+0x324>
 8004684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004688:	d006      	beq.n	8004698 <UART_SetConfig+0x330>
 800468a:	e00b      	b.n	80046a4 <UART_SetConfig+0x33c>
 800468c:	2300      	movs	r3, #0
 800468e:	77fb      	strb	r3, [r7, #31]
 8004690:	e00d      	b.n	80046ae <UART_SetConfig+0x346>
 8004692:	2302      	movs	r3, #2
 8004694:	77fb      	strb	r3, [r7, #31]
 8004696:	e00a      	b.n	80046ae <UART_SetConfig+0x346>
 8004698:	2304      	movs	r3, #4
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e007      	b.n	80046ae <UART_SetConfig+0x346>
 800469e:	2308      	movs	r3, #8
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e004      	b.n	80046ae <UART_SetConfig+0x346>
 80046a4:	2310      	movs	r3, #16
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e001      	b.n	80046ae <UART_SetConfig+0x346>
 80046aa:	2310      	movs	r3, #16
 80046ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b6:	d15b      	bne.n	8004770 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80046b8:	7ffb      	ldrb	r3, [r7, #31]
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d827      	bhi.n	800470e <UART_SetConfig+0x3a6>
 80046be:	a201      	add	r2, pc, #4	; (adr r2, 80046c4 <UART_SetConfig+0x35c>)
 80046c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c4:	080046e9 	.word	0x080046e9
 80046c8:	080046f1 	.word	0x080046f1
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	0800470f 	.word	0x0800470f
 80046d4:	080046ff 	.word	0x080046ff
 80046d8:	0800470f 	.word	0x0800470f
 80046dc:	0800470f 	.word	0x0800470f
 80046e0:	0800470f 	.word	0x0800470f
 80046e4:	08004707 	.word	0x08004707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e8:	f7ff f90c 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 80046ec:	61b8      	str	r0, [r7, #24]
        break;
 80046ee:	e013      	b.n	8004718 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f0:	f7ff f91c 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80046f4:	61b8      	str	r0, [r7, #24]
        break;
 80046f6:	e00f      	b.n	8004718 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f8:	4b4b      	ldr	r3, [pc, #300]	; (8004828 <UART_SetConfig+0x4c0>)
 80046fa:	61bb      	str	r3, [r7, #24]
        break;
 80046fc:	e00c      	b.n	8004718 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fe:	f7ff f83f 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 8004702:	61b8      	str	r0, [r7, #24]
        break;
 8004704:	e008      	b.n	8004718 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470a:	61bb      	str	r3, [r7, #24]
        break;
 800470c:	e004      	b.n	8004718 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	77bb      	strb	r3, [r7, #30]
        break;
 8004716:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d074      	beq.n	8004808 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	005a      	lsls	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	441a      	add	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	b29b      	uxth	r3, r3
 8004734:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b0f      	cmp	r3, #15
 800473a:	d916      	bls.n	800476a <UART_SetConfig+0x402>
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004742:	d212      	bcs.n	800476a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	b29b      	uxth	r3, r3
 8004748:	f023 030f 	bic.w	r3, r3, #15
 800474c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	085b      	lsrs	r3, r3, #1
 8004752:	b29b      	uxth	r3, r3
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	b29a      	uxth	r2, r3
 800475a:	89fb      	ldrh	r3, [r7, #14]
 800475c:	4313      	orrs	r3, r2
 800475e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	89fa      	ldrh	r2, [r7, #14]
 8004766:	60da      	str	r2, [r3, #12]
 8004768:	e04e      	b.n	8004808 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	77bb      	strb	r3, [r7, #30]
 800476e:	e04b      	b.n	8004808 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004770:	7ffb      	ldrb	r3, [r7, #31]
 8004772:	2b08      	cmp	r3, #8
 8004774:	d827      	bhi.n	80047c6 <UART_SetConfig+0x45e>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <UART_SetConfig+0x414>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047a9 	.word	0x080047a9
 8004784:	080047b1 	.word	0x080047b1
 8004788:	080047c7 	.word	0x080047c7
 800478c:	080047b7 	.word	0x080047b7
 8004790:	080047c7 	.word	0x080047c7
 8004794:	080047c7 	.word	0x080047c7
 8004798:	080047c7 	.word	0x080047c7
 800479c:	080047bf 	.word	0x080047bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a0:	f7ff f8b0 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 80047a4:	61b8      	str	r0, [r7, #24]
        break;
 80047a6:	e013      	b.n	80047d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047a8:	f7ff f8c0 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 80047ac:	61b8      	str	r0, [r7, #24]
        break;
 80047ae:	e00f      	b.n	80047d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <UART_SetConfig+0x4c0>)
 80047b2:	61bb      	str	r3, [r7, #24]
        break;
 80047b4:	e00c      	b.n	80047d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b6:	f7fe ffe3 	bl	8003780 <HAL_RCC_GetSysClockFreq>
 80047ba:	61b8      	str	r0, [r7, #24]
        break;
 80047bc:	e008      	b.n	80047d0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047c2:	61bb      	str	r3, [r7, #24]
        break;
 80047c4:	e004      	b.n	80047d0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	77bb      	strb	r3, [r7, #30]
        break;
 80047ce:	bf00      	nop
    }

    if (pclk != 0U)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d018      	beq.n	8004808 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	085a      	lsrs	r2, r3, #1
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	441a      	add	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	d908      	bls.n	8004804 <UART_SetConfig+0x49c>
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f8:	d204      	bcs.n	8004804 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	e001      	b.n	8004808 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004814:	7fbb      	ldrb	r3, [r7, #30]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40007c00 	.word	0x40007c00
 8004824:	40023800 	.word	0x40023800
 8004828:	00f42400 	.word	0x00f42400

0800482c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01a      	beq.n	8004942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800492a:	d10a      	bne.n	8004942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	605a      	str	r2, [r3, #4]
  }
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af02      	add	r7, sp, #8
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004980:	f7fd faba 	bl	8001ef8 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b08      	cmp	r3, #8
 8004992:	d10e      	bne.n	80049b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f82d 	bl	8004a02 <UART_WaitOnFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e023      	b.n	80049fa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d10e      	bne.n	80049de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f817 	bl	8004a02 <UART_WaitOnFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e00d      	b.n	80049fa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2220      	movs	r2, #32
 80049e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a12:	e05e      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d05a      	beq.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1c:	f7fd fa6c 	bl	8001ef8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d11b      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0201 	bic.w	r2, r2, #1
 8004a50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2220      	movs	r2, #32
 8004a56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e043      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02c      	beq.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a86:	d124      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aa0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e00f      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4013      	ands	r3, r2
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	bf0c      	ite	eq
 8004ae2:	2301      	moveq	r3, #1
 8004ae4:	2300      	movne	r3, #0
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d091      	beq.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <__libc_init_array>:
 8004afc:	b570      	push	{r4, r5, r6, lr}
 8004afe:	4d0d      	ldr	r5, [pc, #52]	; (8004b34 <__libc_init_array+0x38>)
 8004b00:	4c0d      	ldr	r4, [pc, #52]	; (8004b38 <__libc_init_array+0x3c>)
 8004b02:	1b64      	subs	r4, r4, r5
 8004b04:	10a4      	asrs	r4, r4, #2
 8004b06:	2600      	movs	r6, #0
 8004b08:	42a6      	cmp	r6, r4
 8004b0a:	d109      	bne.n	8004b20 <__libc_init_array+0x24>
 8004b0c:	4d0b      	ldr	r5, [pc, #44]	; (8004b3c <__libc_init_array+0x40>)
 8004b0e:	4c0c      	ldr	r4, [pc, #48]	; (8004b40 <__libc_init_array+0x44>)
 8004b10:	f000 f87c 	bl	8004c0c <_init>
 8004b14:	1b64      	subs	r4, r4, r5
 8004b16:	10a4      	asrs	r4, r4, #2
 8004b18:	2600      	movs	r6, #0
 8004b1a:	42a6      	cmp	r6, r4
 8004b1c:	d105      	bne.n	8004b2a <__libc_init_array+0x2e>
 8004b1e:	bd70      	pop	{r4, r5, r6, pc}
 8004b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b24:	4798      	blx	r3
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7ee      	b.n	8004b08 <__libc_init_array+0xc>
 8004b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2e:	4798      	blx	r3
 8004b30:	3601      	adds	r6, #1
 8004b32:	e7f2      	b.n	8004b1a <__libc_init_array+0x1e>
 8004b34:	08004f48 	.word	0x08004f48
 8004b38:	08004f48 	.word	0x08004f48
 8004b3c:	08004f48 	.word	0x08004f48
 8004b40:	08004f4c 	.word	0x08004f4c

08004b44 <__itoa>:
 8004b44:	1e93      	subs	r3, r2, #2
 8004b46:	2b22      	cmp	r3, #34	; 0x22
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	d904      	bls.n	8004b58 <__itoa+0x14>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	700b      	strb	r3, [r1, #0]
 8004b52:	461c      	mov	r4, r3
 8004b54:	4620      	mov	r0, r4
 8004b56:	bd10      	pop	{r4, pc}
 8004b58:	2a0a      	cmp	r2, #10
 8004b5a:	d109      	bne.n	8004b70 <__itoa+0x2c>
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	da07      	bge.n	8004b70 <__itoa+0x2c>
 8004b60:	232d      	movs	r3, #45	; 0x2d
 8004b62:	700b      	strb	r3, [r1, #0]
 8004b64:	4240      	negs	r0, r0
 8004b66:	2101      	movs	r1, #1
 8004b68:	4421      	add	r1, r4
 8004b6a:	f000 f80d 	bl	8004b88 <__utoa>
 8004b6e:	e7f1      	b.n	8004b54 <__itoa+0x10>
 8004b70:	2100      	movs	r1, #0
 8004b72:	e7f9      	b.n	8004b68 <__itoa+0x24>

08004b74 <itoa>:
 8004b74:	f7ff bfe6 	b.w	8004b44 <__itoa>

08004b78 <memset>:
 8004b78:	4402      	add	r2, r0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d100      	bne.n	8004b82 <memset+0xa>
 8004b80:	4770      	bx	lr
 8004b82:	f803 1b01 	strb.w	r1, [r3], #1
 8004b86:	e7f9      	b.n	8004b7c <memset+0x4>

08004b88 <__utoa>:
 8004b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b8a:	4c1f      	ldr	r4, [pc, #124]	; (8004c08 <__utoa+0x80>)
 8004b8c:	b08b      	sub	sp, #44	; 0x2c
 8004b8e:	4605      	mov	r5, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	466e      	mov	r6, sp
 8004b94:	f104 0c20 	add.w	ip, r4, #32
 8004b98:	6820      	ldr	r0, [r4, #0]
 8004b9a:	6861      	ldr	r1, [r4, #4]
 8004b9c:	4637      	mov	r7, r6
 8004b9e:	c703      	stmia	r7!, {r0, r1}
 8004ba0:	3408      	adds	r4, #8
 8004ba2:	4564      	cmp	r4, ip
 8004ba4:	463e      	mov	r6, r7
 8004ba6:	d1f7      	bne.n	8004b98 <__utoa+0x10>
 8004ba8:	7921      	ldrb	r1, [r4, #4]
 8004baa:	7139      	strb	r1, [r7, #4]
 8004bac:	1e91      	subs	r1, r2, #2
 8004bae:	6820      	ldr	r0, [r4, #0]
 8004bb0:	6038      	str	r0, [r7, #0]
 8004bb2:	2922      	cmp	r1, #34	; 0x22
 8004bb4:	f04f 0100 	mov.w	r1, #0
 8004bb8:	d904      	bls.n	8004bc4 <__utoa+0x3c>
 8004bba:	7019      	strb	r1, [r3, #0]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	b00b      	add	sp, #44	; 0x2c
 8004bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc4:	1e58      	subs	r0, r3, #1
 8004bc6:	4684      	mov	ip, r0
 8004bc8:	fbb5 f7f2 	udiv	r7, r5, r2
 8004bcc:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8004bd0:	fb02 5617 	mls	r6, r2, r7, r5
 8004bd4:	4476      	add	r6, lr
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004bdc:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004be0:	462e      	mov	r6, r5
 8004be2:	42b2      	cmp	r2, r6
 8004be4:	f101 0101 	add.w	r1, r1, #1
 8004be8:	463d      	mov	r5, r7
 8004bea:	d9ed      	bls.n	8004bc8 <__utoa+0x40>
 8004bec:	2200      	movs	r2, #0
 8004bee:	545a      	strb	r2, [r3, r1]
 8004bf0:	1919      	adds	r1, r3, r4
 8004bf2:	1aa5      	subs	r5, r4, r2
 8004bf4:	42aa      	cmp	r2, r5
 8004bf6:	dae2      	bge.n	8004bbe <__utoa+0x36>
 8004bf8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004bfc:	780e      	ldrb	r6, [r1, #0]
 8004bfe:	7006      	strb	r6, [r0, #0]
 8004c00:	3201      	adds	r2, #1
 8004c02:	f801 5901 	strb.w	r5, [r1], #-1
 8004c06:	e7f4      	b.n	8004bf2 <__utoa+0x6a>
 8004c08:	08004f18 	.word	0x08004f18

08004c0c <_init>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr

08004c18 <_fini>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr
