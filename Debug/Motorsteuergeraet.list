
Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  080049b0  080049b0  000149b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c8  080050c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050d0  080050d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d0  080050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080050d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  080050e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080050e4  00020128  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eed0  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002672  00000000  00000000  0002ef0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  00031580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  00031fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029974  00000000  00000000  000328e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e740  00000000  00000000  0005c25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb933  00000000  00000000  0006a99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001662cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002818  00000000  00000000  00166324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004998 	.word	0x08004998

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004998 	.word	0x08004998

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <uartTransmit>:
//----------------------------------------------------------------------

// Uart2 Transmit Funktion
//----------------------------------------------------------------------
void uartTransmit(const char *str, const size_t size)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)str, size, 1000);
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	b29a      	uxth	r2, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <uartTransmit+0x24>)
 8000556:	f003 fcf7 	bl	8003f48 <HAL_UART_Transmit>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	200000a4 	.word	0x200000a4

08000568 <uartTransmitNumber>:
//----------------------------------------------------------------------

// Uart2 Transmit Nummer Funktion
//----------------------------------------------------------------------
void uartTransmitNumber(const uint32_t number, const uint32_t base)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	6039      	str	r1, [r7, #0]
	char str[11];

	itoa(number, str, base);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	f107 010c 	add.w	r1, r7, #12
 800057a:	4618      	mov	r0, r3
 800057c:	f004 f9c0 	bl	8004900 <itoa>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe57 	bl	8000238 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29a      	uxth	r2, r3
 800058e:	f107 010c 	add.w	r1, r7, #12
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	4803      	ldr	r0, [pc, #12]	; (80005a4 <uartTransmitNumber+0x3c>)
 8000598:	f003 fcd6 	bl	8003f48 <HAL_UART_Transmit>
}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000a4 	.word	0x200000a4

080005a8 <collectMiddlewareInfo>:


// Collects Version information from Middleware and prints it
//----------------------------------------------------------------------
void collectMiddlewareInfo(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	#define STRING_CMSIS_VERSION		"\nCMSIS Version:\t\t"
	#define STRING_HAL_VERSION			"\nHAL Version:\t\t"
	#define STRING_RTOS_CMSIS_VERSION	"\nRTOS CMSIS Version:\t"
	#define STRING_RTOS_VERSION			"\nRTOS Version:\t\t"

	uartTransmit(STRING_CMSIS_VERSION, sizeof(STRING_CMSIS_VERSION));
 80005ac:	2112      	movs	r1, #18
 80005ae:	4822      	ldr	r0, [pc, #136]	; (8000638 <collectMiddlewareInfo+0x90>)
 80005b0:	f7ff ffc6 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_MAIN, 10);					// CMSIS Version anzeigen
 80005b4:	210a      	movs	r1, #10
 80005b6:	2005      	movs	r0, #5
 80005b8:	f7ff ffd6 	bl	8000568 <uartTransmitNumber>
	uartTransmit(".", 1);
 80005bc:	2101      	movs	r1, #1
 80005be:	481f      	ldr	r0, [pc, #124]	; (800063c <collectMiddlewareInfo+0x94>)
 80005c0:	f7ff ffbe 	bl	8000540 <uartTransmit>
	uartTransmitNumber(__CM7_CMSIS_VERSION_SUB, 10);					// CMSIS Version anzeigen
 80005c4:	210a      	movs	r1, #10
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff ffce 	bl	8000568 <uartTransmitNumber>


	uartTransmit(STRING_HAL_VERSION, sizeof(STRING_HAL_VERSION));		// Hal Version anzeigen
 80005cc:	2110      	movs	r1, #16
 80005ce:	481c      	ldr	r0, [pc, #112]	; (8000640 <collectMiddlewareInfo+0x98>)
 80005d0:	f7ff ffb6 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 24) & 0xFF), 10);
 80005d4:	f001 fce0 	bl	8001f98 <HAL_GetHalVersion>
 80005d8:	4603      	mov	r3, r0
 80005da:	0e1b      	lsrs	r3, r3, #24
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	210a      	movs	r1, #10
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ffc1 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 80005e6:	2101      	movs	r1, #1
 80005e8:	4814      	ldr	r0, [pc, #80]	; (800063c <collectMiddlewareInfo+0x94>)
 80005ea:	f7ff ffa9 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 16) & 0xFF), 10);
 80005ee:	f001 fcd3 	bl	8001f98 <HAL_GetHalVersion>
 80005f2:	4603      	mov	r3, r0
 80005f4:	0c1b      	lsrs	r3, r3, #16
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	210a      	movs	r1, #10
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffb4 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 8000600:	2101      	movs	r1, #1
 8000602:	480e      	ldr	r0, [pc, #56]	; (800063c <collectMiddlewareInfo+0x94>)
 8000604:	f7ff ff9c 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)((HAL_GetHalVersion() >> 8) & 0xFF), 10);
 8000608:	f001 fcc6 	bl	8001f98 <HAL_GetHalVersion>
 800060c:	4603      	mov	r3, r0
 800060e:	0a1b      	lsrs	r3, r3, #8
 8000610:	b2db      	uxtb	r3, r3
 8000612:	210a      	movs	r1, #10
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff ffa7 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);												// Hal Version anzeigen
 800061a:	2101      	movs	r1, #1
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <collectMiddlewareInfo+0x94>)
 800061e:	f7ff ff8f 	bl	8000540 <uartTransmit>
	uartTransmitNumber((uint32_t)(HAL_GetHalVersion() & 0xFF), 10);
 8000622:	f001 fcb9 	bl	8001f98 <HAL_GetHalVersion>
 8000626:	4603      	mov	r3, r0
 8000628:	b2db      	uxtb	r3, r3
 800062a:	210a      	movs	r1, #10
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff9b 	bl	8000568 <uartTransmitNumber>

	uartTransmit(".", 1);
	uartTransmitNumber(tskKERNEL_VERSION_BUILD, 10);					// FreeRTOS Kernel Version anzeigen

	uartTransmit("\n", 1);*/
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	080049b0 	.word	0x080049b0
 800063c:	080049c4 	.word	0x080049c4
 8000640:	080049c8 	.word	0x080049c8

08000644 <collectSoftwareInfo>:
//----------------------------------------------------------------------

// Collects Software information and prints it
//----------------------------------------------------------------------
void collectSoftwareInfo(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	#define STRING_GIT_BRANCH			"\nGit Branch:\t\t"
	#define STRING_GIT_HASH				"\nGit Hash:\t\t"
	#define STRING_BUILD_DATE			"\nBuild Date:\t\t"
	#define STRING_BUILD_TIME			"\nBuild Time:\t\t"

	uartTransmit(STRING_GIT_VERSION, sizeof(STRING_GIT_VERSION));
 8000648:	2110      	movs	r1, #16
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <collectSoftwareInfo+0x60>)
 800064c:	f7ff ff78 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_COMMIT, sizeof(GIT_COMMIT));						// Git Commit anzeigen
 8000650:	2108      	movs	r1, #8
 8000652:	4815      	ldr	r0, [pc, #84]	; (80006a8 <collectSoftwareInfo+0x64>)
 8000654:	f7ff ff74 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_BRANCH, sizeof(STRING_GIT_BRANCH));
 8000658:	210f      	movs	r1, #15
 800065a:	4814      	ldr	r0, [pc, #80]	; (80006ac <collectSoftwareInfo+0x68>)
 800065c:	f7ff ff70 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_BRANCH, sizeof(GIT_BRANCH));						// Git Branch anzeigen
 8000660:	210c      	movs	r1, #12
 8000662:	4813      	ldr	r0, [pc, #76]	; (80006b0 <collectSoftwareInfo+0x6c>)
 8000664:	f7ff ff6c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_GIT_HASH, sizeof(STRING_GIT_HASH));
 8000668:	210d      	movs	r1, #13
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <collectSoftwareInfo+0x70>)
 800066c:	f7ff ff68 	bl	8000540 <uartTransmit>
	uartTransmit(GIT_HASH, sizeof(GIT_HASH));							// Git Hash anzeigen
 8000670:	2129      	movs	r1, #41	; 0x29
 8000672:	4811      	ldr	r0, [pc, #68]	; (80006b8 <collectSoftwareInfo+0x74>)
 8000674:	f7ff ff64 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_DATE, sizeof(STRING_BUILD_DATE));
 8000678:	210f      	movs	r1, #15
 800067a:	4810      	ldr	r0, [pc, #64]	; (80006bc <collectSoftwareInfo+0x78>)
 800067c:	f7ff ff60 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_DATE, sizeof(BUILD_DATE));						// Kompilierdatum anzeigen
 8000680:	210c      	movs	r1, #12
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <collectSoftwareInfo+0x7c>)
 8000684:	f7ff ff5c 	bl	8000540 <uartTransmit>

	uartTransmit(STRING_BUILD_TIME, sizeof(STRING_BUILD_TIME));
 8000688:	210f      	movs	r1, #15
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <collectSoftwareInfo+0x80>)
 800068c:	f7ff ff58 	bl	8000540 <uartTransmit>
	uartTransmit(BUILD_TIME, sizeof(BUILD_TIME));						// Kompilierzeit anzeigen
 8000690:	2109      	movs	r1, #9
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <collectSoftwareInfo+0x84>)
 8000694:	f7ff ff54 	bl	8000540 <uartTransmit>

	uartTransmit("\n", 1);
 8000698:	2101      	movs	r1, #1
 800069a:	480c      	ldr	r0, [pc, #48]	; (80006cc <collectSoftwareInfo+0x88>)
 800069c:	f7ff ff50 	bl	8000540 <uartTransmit>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	080049d8 	.word	0x080049d8
 80006a8:	080049e8 	.word	0x080049e8
 80006ac:	080049f0 	.word	0x080049f0
 80006b0:	08004a00 	.word	0x08004a00
 80006b4:	08004a0c 	.word	0x08004a0c
 80006b8:	08004a1c 	.word	0x08004a1c
 80006bc:	08004a48 	.word	0x08004a48
 80006c0:	08004a58 	.word	0x08004a58
 80006c4:	08004a64 	.word	0x08004a64
 80006c8:	08004a74 	.word	0x08004a74
 80006cc:	08004a80 	.word	0x08004a80

080006d0 <collectHardwareInfo>:
//----------------------------------------------------------------------

// Collects hardware information from microcontroller and prints it
//----------------------------------------------------------------------
void collectHardwareInfo(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	#define STRING_STM_DEVICE_ID		"\nSTM32 Device ID:\t"
	#define STRING_STM_REVISION			"\nSTM32 Revision ID:\t"
	#define STRING_STM_FREQ				"\nSTM32 CPU-Freq:\t\t"
	#define STRING_STM_UUID				"\nSTM32 UUID:\t\t"

	uartTransmit(STRING_STM_DEVICE_ID, sizeof(STRING_STM_DEVICE_ID));
 80006d6:	2113      	movs	r1, #19
 80006d8:	483b      	ldr	r0, [pc, #236]	; (80007c8 <collectHardwareInfo+0xf8>)
 80006da:	f7ff ff31 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetDEVID(), 10);								// Mikrocontroller Typ
 80006de:	f001 fc71 	bl	8001fc4 <HAL_GetDEVID>
 80006e2:	4603      	mov	r3, r0
 80006e4:	210a      	movs	r1, #10
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff3e 	bl	8000568 <uartTransmitNumber>

	uartTransmit(STRING_STM_REVISION, sizeof(STRING_STM_REVISION));
 80006ec:	2115      	movs	r1, #21
 80006ee:	4837      	ldr	r0, [pc, #220]	; (80007cc <collectHardwareInfo+0xfc>)
 80006f0:	f7ff ff26 	bl	8000540 <uartTransmit>
	
	switch(HAL_GetREVID())												// Mikrocontroller Revision
 80006f4:	f001 fc5a 	bl	8001fac <HAL_GetREVID>
 80006f8:	4603      	mov	r3, r0
 80006fa:	f242 0201 	movw	r2, #8193	; 0x2001
 80006fe:	4293      	cmp	r3, r2
 8000700:	d016      	beq.n	8000730 <collectHardwareInfo+0x60>
 8000702:	f242 0201 	movw	r2, #8193	; 0x2001
 8000706:	4293      	cmp	r3, r2
 8000708:	d817      	bhi.n	800073a <collectHardwareInfo+0x6a>
 800070a:	f241 0201 	movw	r2, #4097	; 0x1001
 800070e:	4293      	cmp	r3, r2
 8000710:	d004      	beq.n	800071c <collectHardwareInfo+0x4c>
 8000712:	f241 0203 	movw	r2, #4099	; 0x1003
 8000716:	4293      	cmp	r3, r2
 8000718:	d005      	beq.n	8000726 <collectHardwareInfo+0x56>
 800071a:	e00e      	b.n	800073a <collectHardwareInfo+0x6a>
	{
		case 0x1001:
			uartTransmit("Z", 1);
 800071c:	2101      	movs	r1, #1
 800071e:	482c      	ldr	r0, [pc, #176]	; (80007d0 <collectHardwareInfo+0x100>)
 8000720:	f7ff ff0e 	bl	8000540 <uartTransmit>
			break;
 8000724:	e011      	b.n	800074a <collectHardwareInfo+0x7a>
		case 0x1003:
			uartTransmit("Y", 1);
 8000726:	2101      	movs	r1, #1
 8000728:	482a      	ldr	r0, [pc, #168]	; (80007d4 <collectHardwareInfo+0x104>)
 800072a:	f7ff ff09 	bl	8000540 <uartTransmit>
			break;
 800072e:	e00c      	b.n	800074a <collectHardwareInfo+0x7a>
		case 0x2001:
			uartTransmit("X", 1);
 8000730:	2101      	movs	r1, #1
 8000732:	4829      	ldr	r0, [pc, #164]	; (80007d8 <collectHardwareInfo+0x108>)
 8000734:	f7ff ff04 	bl	8000540 <uartTransmit>
			break;
 8000738:	e007      	b.n	800074a <collectHardwareInfo+0x7a>
		default:
			uartTransmitNumber(HAL_GetREVID(), 10);
 800073a:	f001 fc37 	bl	8001fac <HAL_GetREVID>
 800073e:	4603      	mov	r3, r0
 8000740:	210a      	movs	r1, #10
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff10 	bl	8000568 <uartTransmitNumber>
			break;
 8000748:	bf00      	nop
	}


	uartTransmit(STRING_STM_FREQ, sizeof(STRING_STM_FREQ));
 800074a:	2113      	movs	r1, #19
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <collectHardwareInfo+0x10c>)
 800074e:	f7ff fef7 	bl	8000540 <uartTransmit>
	{
		uint32_t frequency = HAL_RCC_GetSysClockFreq();					// Systemfrequenz ausgeben
 8000752:	f002 fe9b 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8000756:	6078      	str	r0, [r7, #4]
		frequency = frequency/1000000;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <collectHardwareInfo+0x110>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	0c9b      	lsrs	r3, r3, #18
 8000762:	607b      	str	r3, [r7, #4]

		uartTransmitNumber(frequency, 10);
 8000764:	210a      	movs	r1, #10
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff fefe 	bl	8000568 <uartTransmitNumber>
	}

	uartTransmit(" MHz", 4);
 800076c:	2104      	movs	r1, #4
 800076e:	481d      	ldr	r0, [pc, #116]	; (80007e4 <collectHardwareInfo+0x114>)
 8000770:	f7ff fee6 	bl	8000540 <uartTransmit>


	uartTransmit(STRING_STM_UUID, sizeof(STRING_STM_UUID));
 8000774:	210f      	movs	r1, #15
 8000776:	481c      	ldr	r0, [pc, #112]	; (80007e8 <collectHardwareInfo+0x118>)
 8000778:	f7ff fee2 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw0(), 16);								// UID0 ausgeben
 800077c:	f001 fc30 	bl	8001fe0 <HAL_GetUIDw0>
 8000780:	4603      	mov	r3, r0
 8000782:	2110      	movs	r1, #16
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff feef 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 800078a:	2101      	movs	r1, #1
 800078c:	4817      	ldr	r0, [pc, #92]	; (80007ec <collectHardwareInfo+0x11c>)
 800078e:	f7ff fed7 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw1(), 16);								// UID1 ausgeben
 8000792:	f001 fc31 	bl	8001ff8 <HAL_GetUIDw1>
 8000796:	4603      	mov	r3, r0
 8000798:	2110      	movs	r1, #16
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff fee4 	bl	8000568 <uartTransmitNumber>

	uartTransmit(" ", 1);
 80007a0:	2101      	movs	r1, #1
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <collectHardwareInfo+0x11c>)
 80007a4:	f7ff fecc 	bl	8000540 <uartTransmit>
	uartTransmitNumber(HAL_GetUIDw2(), 16);								// UID2 ausgeben
 80007a8:	f001 fc32 	bl	8002010 <HAL_GetUIDw2>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2110      	movs	r1, #16
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fed9 	bl	8000568 <uartTransmitNumber>

	uartTransmit("\n", 1);
 80007b6:	2101      	movs	r1, #1
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <collectHardwareInfo+0x120>)
 80007ba:	f7ff fec1 	bl	8000540 <uartTransmit>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	08004a84 	.word	0x08004a84
 80007cc:	08004a98 	.word	0x08004a98
 80007d0:	08004ab0 	.word	0x08004ab0
 80007d4:	08004ab4 	.word	0x08004ab4
 80007d8:	08004ab8 	.word	0x08004ab8
 80007dc:	08004abc 	.word	0x08004abc
 80007e0:	431bde83 	.word	0x431bde83
 80007e4:	08004ad0 	.word	0x08004ad0
 80007e8:	08004ad8 	.word	0x08004ad8
 80007ec:	08004ae8 	.word	0x08004ae8
 80007f0:	08004a80 	.word	0x08004a80

080007f4 <collectSystemInfo>:
//----------------------------------------------------------------------

// Collects Information from microcontroller and send to UART
//----------------------------------------------------------------------
void collectSystemInfo(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	#define STRING_HARDWARE_TITEL "\n\t --Hardware--\n"
	#define STRING_MIDDLEWARE_TITEL "\n\t --Middleware--\n"
	#define STRING_SOFTWARE_TITEL "\n\t --Software--\n"

	uartTransmit(STRING_HARDWARE_TITEL, sizeof(STRING_HARDWARE_TITEL));
 80007f8:	2111      	movs	r1, #17
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <collectSystemInfo+0x34>)
 80007fc:	f7ff fea0 	bl	8000540 <uartTransmit>
	collectHardwareInfo();												// Sammelt Hardware Informationen und gibt diese über Uart aus
 8000800:	f7ff ff66 	bl	80006d0 <collectHardwareInfo>

	uartTransmit(STRING_SOFTWARE_TITEL, sizeof(STRING_SOFTWARE_TITEL));
 8000804:	2111      	movs	r1, #17
 8000806:	4809      	ldr	r0, [pc, #36]	; (800082c <collectSystemInfo+0x38>)
 8000808:	f7ff fe9a 	bl	8000540 <uartTransmit>
	collectSoftwareInfo();												// Sammelt Software Informationen und gibt diese über Uart aus
 800080c:	f7ff ff1a 	bl	8000644 <collectSoftwareInfo>

	uartTransmit(STRING_MIDDLEWARE_TITEL, sizeof(STRING_MIDDLEWARE_TITEL));
 8000810:	2113      	movs	r1, #19
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <collectSystemInfo+0x3c>)
 8000814:	f7ff fe94 	bl	8000540 <uartTransmit>
	collectMiddlewareInfo();											// Sammelt Middleware Informationen und gibt diese über Uart aus
 8000818:	f7ff fec6 	bl	80005a8 <collectMiddlewareInfo>

	uartTransmit("\n\n\n", 3);
 800081c:	2103      	movs	r1, #3
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <collectSystemInfo+0x40>)
 8000820:	f7ff fe8e 	bl	8000540 <uartTransmit>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08004aec 	.word	0x08004aec
 800082c:	08004b00 	.word	0x08004b00
 8000830:	08004b14 	.word	0x08004b14
 8000834:	08004b28 	.word	0x08004b28

08000838 <readResetSource>:
//----------------------------------------------------------------------

// Collects Reset source Flag microcontroller
//----------------------------------------------------------------------
reset_reason readResetSource(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
	reset_reason reset_flags = STARTUP;
 800083e:	2300      	movs	r3, #0
 8000840:	71fb      	strb	r3, [r7, #7]

	// Prüfe Reset Flag Internen Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) == true)
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <readResetSource+0xa0>)
 8000844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d002      	beq.n	8000854 <readResetSource+0x1c>
	{
		reset_flags += IWDG1;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Window Watchdog
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST) == true)
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <readResetSource+0xa0>)
 8000856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000858:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <readResetSource+0x2e>
	{
		reset_flags += WWDG1;
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	3302      	adds	r3, #2
 8000864:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Low Power Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST) == true)
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <readResetSource+0xa0>)
 8000868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800086a:	2b00      	cmp	r3, #0
 800086c:	da02      	bge.n	8000874 <readResetSource+0x3c>
	{
		reset_flags += CPURST1;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	3304      	adds	r3, #4
 8000872:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Brown Out Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) == true)
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <readResetSource+0xa0>)
 8000876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <readResetSource+0x4e>
	{
		reset_flags += BORST1;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3308      	adds	r3, #8
 8000884:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Power On Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) == true)
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <readResetSource+0xa0>)
 8000888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800088a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <readResetSource+0x60>
	{
		reset_flags += PORST1;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	3310      	adds	r3, #16
 8000896:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Software Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST) == true)
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <readResetSource+0xa0>)
 800089a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d002      	beq.n	80008aa <readResetSource+0x72>
	{
		reset_flags += SFTRST1;
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	3320      	adds	r3, #32
 80008a8:	71fb      	strb	r3, [r7, #7]
	}

	// Prüfe Reset Flag Pin-Reset
	if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) == true)
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <readResetSource+0xa0>)
 80008ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <readResetSource+0x84>
	{
		reset_flags += PINRST1;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	3340      	adds	r3, #64	; 0x40
 80008ba:	71fb      	strb	r3, [r7, #7]
	}

	// Lösche alle Reset Flags
	__HAL_RCC_CLEAR_RESET_FLAGS();
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <readResetSource+0xa0>)
 80008be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008c0:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <readResetSource+0xa0>)
 80008c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008c6:	6753      	str	r3, [r2, #116]	; 0x74

	return reset_flags;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <printResetSource>:
//----------------------------------------------------------------------

// Print reset source from microcontroller
//----------------------------------------------------------------------
void printResetSource(reset_reason reset_flags)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	if (reset_flags == STARTUP)											// Regulärer Start
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <printResetSource+0x1a>
	{
		uartTransmit("Regular Start\r\n", 15);
 80008ec:	210f      	movs	r1, #15
 80008ee:	4827      	ldr	r0, [pc, #156]	; (800098c <printResetSource+0xb0>)
 80008f0:	f7ff fe26 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
		{
			uartTransmit("RMVF\n", 5);
		}
	}
}
 80008f4:	e046      	b.n	8000984 <printResetSource+0xa8>
		if (reset_flags & IWDG1)										// Interner watchdog Reset
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d003      	beq.n	8000908 <printResetSource+0x2c>
			uartTransmit("Interner Watchdog Reset\n", 24);
 8000900:	2118      	movs	r1, #24
 8000902:	4823      	ldr	r0, [pc, #140]	; (8000990 <printResetSource+0xb4>)
 8000904:	f7ff fe1c 	bl	8000540 <uartTransmit>
		if (reset_flags & WWDG1)										// Window watchdog Reset
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d003      	beq.n	800091a <printResetSource+0x3e>
			uartTransmit("Window Watchdog Reset\n", 22);
 8000912:	2116      	movs	r1, #22
 8000914:	481f      	ldr	r0, [pc, #124]	; (8000994 <printResetSource+0xb8>)
 8000916:	f7ff fe13 	bl	8000540 <uartTransmit>
		if (reset_flags & CPURST1)										// CPU Reset
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	2b00      	cmp	r3, #0
 8000922:	d003      	beq.n	800092c <printResetSource+0x50>
			uartTransmit("CPU Reset\n", 10);
 8000924:	210a      	movs	r1, #10
 8000926:	481c      	ldr	r0, [pc, #112]	; (8000998 <printResetSource+0xbc>)
 8000928:	f7ff fe0a 	bl	8000540 <uartTransmit>
		if (reset_flags & BORST1)										// Brown out Reset
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	2b00      	cmp	r3, #0
 8000934:	d003      	beq.n	800093e <printResetSource+0x62>
			uartTransmit("Brown Out Reset\n", 16);
 8000936:	2110      	movs	r1, #16
 8000938:	4818      	ldr	r0, [pc, #96]	; (800099c <printResetSource+0xc0>)
 800093a:	f7ff fe01 	bl	8000540 <uartTransmit>
		if (reset_flags & PORST1)										//Power on Reset / Power down Reser
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <printResetSource+0x74>
			uartTransmit("Power On Reset\n", 15);
 8000948:	210f      	movs	r1, #15
 800094a:	4815      	ldr	r0, [pc, #84]	; (80009a0 <printResetSource+0xc4>)
 800094c:	f7ff fdf8 	bl	8000540 <uartTransmit>
		if (reset_flags & SFTRST1)										// Software Reset
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	f003 0320 	and.w	r3, r3, #32
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <printResetSource+0x86>
			uartTransmit("Software Reset\n", 15);
 800095a:	210f      	movs	r1, #15
 800095c:	4811      	ldr	r0, [pc, #68]	; (80009a4 <printResetSource+0xc8>)
 800095e:	f7ff fdef 	bl	8000540 <uartTransmit>
		if (reset_flags & PINRST1)										//NRST pin
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000968:	2b00      	cmp	r3, #0
 800096a:	d003      	beq.n	8000974 <printResetSource+0x98>
			uartTransmit("PIN Reset\n", 10);
 800096c:	210a      	movs	r1, #10
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <printResetSource+0xcc>)
 8000970:	f7ff fde6 	bl	8000540 <uartTransmit>
		if (reset_flags & RMVF1)										//NRST pin
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	da03      	bge.n	8000984 <printResetSource+0xa8>
			uartTransmit("RMVF\n", 5);
 800097c:	2105      	movs	r1, #5
 800097e:	480b      	ldr	r0, [pc, #44]	; (80009ac <printResetSource+0xd0>)
 8000980:	f7ff fdde 	bl	8000540 <uartTransmit>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	08004b2c 	.word	0x08004b2c
 8000990:	08004b3c 	.word	0x08004b3c
 8000994:	08004b58 	.word	0x08004b58
 8000998:	08004b70 	.word	0x08004b70
 800099c:	08004b7c 	.word	0x08004b7c
 80009a0:	08004b90 	.word	0x08004b90
 80009a4:	08004ba0 	.word	0x08004ba0
 80009a8:	08004bb0 	.word	0x08004bb0
 80009ac:	08004bbc 	.word	0x08004bbc

080009b0 <readall_inputs>:
//----------------------------------------------------------------------

// Lese alle Eingaenge
//----------------------------------------------------------------------
void readall_inputs(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	// Systemeingaenge einlesen
	system_in.Kickdown = HAL_GPIO_ReadPin(KICKDOWN_GPIO_Port, KICKDOWN_Pin);
 80009b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b8:	48ce      	ldr	r0, [pc, #824]	; (8000cf4 <readall_inputs+0x344>)
 80009ba:	f002 f94b 	bl	8002c54 <HAL_GPIO_ReadPin>
 80009be:	4603      	mov	r3, r0
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	b2d9      	uxtb	r1, r3
 80009c6:	4acc      	ldr	r2, [pc, #816]	; (8000cf8 <readall_inputs+0x348>)
 80009c8:	7813      	ldrb	r3, [r2, #0]
 80009ca:	f361 0300 	bfi	r3, r1, #0, #1
 80009ce:	7013      	strb	r3, [r2, #0]
	system_in.Leerlauf = HAL_GPIO_ReadPin(LEERLAUF_GPIO_Port, LEERLAUF_Pin);
 80009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d4:	48c7      	ldr	r0, [pc, #796]	; (8000cf4 <readall_inputs+0x344>)
 80009d6:	f002 f93d 	bl	8002c54 <HAL_GPIO_ReadPin>
 80009da:	4603      	mov	r3, r0
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	b2d9      	uxtb	r1, r3
 80009e2:	4ac5      	ldr	r2, [pc, #788]	; (8000cf8 <readall_inputs+0x348>)
 80009e4:	7813      	ldrb	r3, [r2, #0]
 80009e6:	f361 0341 	bfi	r3, r1, #1, #1
 80009ea:	7013      	strb	r3, [r2, #0]
	system_in.BremseNO = HAL_GPIO_ReadPin(BREMSE_NO_GPIO_Port, BREMSE_NO_Pin);
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	48c0      	ldr	r0, [pc, #768]	; (8000cf4 <readall_inputs+0x344>)
 80009f2:	f002 f92f 	bl	8002c54 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	b2d9      	uxtb	r1, r3
 80009fe:	4abe      	ldr	r2, [pc, #760]	; (8000cf8 <readall_inputs+0x348>)
 8000a00:	7813      	ldrb	r3, [r2, #0]
 8000a02:	f361 0382 	bfi	r3, r1, #2, #1
 8000a06:	7013      	strb	r3, [r2, #0]
	system_in.BremseNC = HAL_GPIO_ReadPin(BREMSE_NC_GPIO_Port, BREMSE_NC_Pin);
 8000a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a0c:	48b9      	ldr	r0, [pc, #740]	; (8000cf4 <readall_inputs+0x344>)
 8000a0e:	f002 f921 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	b2d9      	uxtb	r1, r3
 8000a1a:	4ab7      	ldr	r2, [pc, #732]	; (8000cf8 <readall_inputs+0x348>)
 8000a1c:	7813      	ldrb	r3, [r2, #0]
 8000a1e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a22:	7013      	strb	r3, [r2, #0]
	system_in.Kupplung = HAL_GPIO_ReadPin(KUPPLUNG_NO_GPIO_Port, KUPPLUNG_NO_Pin);
 8000a24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a28:	48b2      	ldr	r0, [pc, #712]	; (8000cf4 <readall_inputs+0x344>)
 8000a2a:	f002 f913 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	b2d9      	uxtb	r1, r3
 8000a36:	4ab0      	ldr	r2, [pc, #704]	; (8000cf8 <readall_inputs+0x348>)
 8000a38:	7813      	ldrb	r3, [r2, #0]
 8000a3a:	f361 1304 	bfi	r3, r1, #4, #1
 8000a3e:	7013      	strb	r3, [r2, #0]
	system_in.Recuperation = HAL_GPIO_ReadPin(RECUPERATION_GPIO_Port, RECUPERATION_Pin);
 8000a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a44:	48ad      	ldr	r0, [pc, #692]	; (8000cfc <readall_inputs+0x34c>)
 8000a46:	f002 f905 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	b2d9      	uxtb	r1, r3
 8000a52:	4aa9      	ldr	r2, [pc, #676]	; (8000cf8 <readall_inputs+0x348>)
 8000a54:	7813      	ldrb	r3, [r2, #0]
 8000a56:	f361 1345 	bfi	r3, r1, #5, #1
 8000a5a:	7013      	strb	r3, [r2, #0]
	system_in.ECON = HAL_GPIO_ReadPin(ECON_GPIO_Port, ECON_Pin);
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	48a7      	ldr	r0, [pc, #668]	; (8000cfc <readall_inputs+0x34c>)
 8000a60:	f002 f8f8 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	b2d9      	uxtb	r1, r3
 8000a6c:	4aa2      	ldr	r2, [pc, #648]	; (8000cf8 <readall_inputs+0x348>)
 8000a6e:	7813      	ldrb	r3, [r2, #0]
 8000a70:	f361 1386 	bfi	r3, r1, #6, #1
 8000a74:	7013      	strb	r3, [r2, #0]
	system_in.Anlasser = HAL_GPIO_ReadPin(ANLASSER_GPIO_Port, ANLASSER_Pin);
 8000a76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7a:	48a1      	ldr	r0, [pc, #644]	; (8000d00 <readall_inputs+0x350>)
 8000a7c:	f002 f8ea 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	b2d9      	uxtb	r1, r3
 8000a88:	4a9b      	ldr	r2, [pc, #620]	; (8000cf8 <readall_inputs+0x348>)
 8000a8a:	7813      	ldrb	r3, [r2, #0]
 8000a8c:	f361 13c7 	bfi	r3, r1, #7, #1
 8000a90:	7013      	strb	r3, [r2, #0]
	system_in.KL15 = HAL_GPIO_ReadPin(KL15_GPIO_Port, KL15_Pin);
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	489b      	ldr	r0, [pc, #620]	; (8000d04 <readall_inputs+0x354>)
 8000a98:	f002 f8dc 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	b2d9      	uxtb	r1, r3
 8000aa4:	4a94      	ldr	r2, [pc, #592]	; (8000cf8 <readall_inputs+0x348>)
 8000aa6:	7853      	ldrb	r3, [r2, #1]
 8000aa8:	f361 0300 	bfi	r3, r1, #0, #1
 8000aac:	7053      	strb	r3, [r2, #1]
	system_in.DCDC_Inst = HAL_GPIO_ReadPin(DCDC_INSTRUCTION_GPIO_Port, DCDC_INSTRUCTION_Pin);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4895      	ldr	r0, [pc, #596]	; (8000d08 <readall_inputs+0x358>)
 8000ab2:	f002 f8cf 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	b2d9      	uxtb	r1, r3
 8000abe:	4a8e      	ldr	r2, [pc, #568]	; (8000cf8 <readall_inputs+0x348>)
 8000ac0:	7853      	ldrb	r3, [r2, #1]
 8000ac2:	f361 0341 	bfi	r3, r1, #1, #1
 8000ac6:	7053      	strb	r3, [r2, #1]
	system_in.Button1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000ac8:	2101      	movs	r1, #1
 8000aca:	488c      	ldr	r0, [pc, #560]	; (8000cfc <readall_inputs+0x34c>)
 8000acc:	f002 f8c2 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	b2d9      	uxtb	r1, r3
 8000ad8:	4a87      	ldr	r2, [pc, #540]	; (8000cf8 <readall_inputs+0x348>)
 8000ada:	7853      	ldrb	r3, [r2, #1]
 8000adc:	f361 0382 	bfi	r3, r1, #2, #1
 8000ae0:	7053      	strb	r3, [r2, #1]
	system_in.Button2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000ae2:	2140      	movs	r1, #64	; 0x40
 8000ae4:	4883      	ldr	r0, [pc, #524]	; (8000cf4 <readall_inputs+0x344>)
 8000ae6:	f002 f8b5 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	b2d9      	uxtb	r1, r3
 8000af2:	4a81      	ldr	r2, [pc, #516]	; (8000cf8 <readall_inputs+0x348>)
 8000af4:	7853      	ldrb	r3, [r2, #1]
 8000af6:	f361 03c3 	bfi	r3, r1, #3, #1
 8000afa:	7053      	strb	r3, [r2, #1]
	system_in.Crash = HAL_GPIO_ReadPin(CRASH_GPIO_Port, CRASH_Pin);
 8000afc:	2101      	movs	r1, #1
 8000afe:	4883      	ldr	r0, [pc, #524]	; (8000d0c <readall_inputs+0x35c>)
 8000b00:	f002 f8a8 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	b2d9      	uxtb	r1, r3
 8000b0c:	4a7a      	ldr	r2, [pc, #488]	; (8000cf8 <readall_inputs+0x348>)
 8000b0e:	7853      	ldrb	r3, [r2, #1]
 8000b10:	f361 1304 	bfi	r3, r1, #4, #1
 8000b14:	7053      	strb	r3, [r2, #1]
	system_in.Wakeup = HAL_GPIO_ReadPin(HW_WAKE_GPIO_Port, HW_WAKE_Pin);
 8000b16:	2104      	movs	r1, #4
 8000b18:	487c      	ldr	r0, [pc, #496]	; (8000d0c <readall_inputs+0x35c>)
 8000b1a:	f002 f89b 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	b2d9      	uxtb	r1, r3
 8000b26:	4a74      	ldr	r2, [pc, #464]	; (8000cf8 <readall_inputs+0x348>)
 8000b28:	7853      	ldrb	r3, [r2, #1]
 8000b2a:	f361 1345 	bfi	r3, r1, #5, #1
 8000b2e:	7053      	strb	r3, [r2, #1]
	//system_in.Bremsdruck_NO = HAL_GPIO_ReadPin(Bremsdruck_NO_GPIO_Port, Bremsdruck_NO_Pin);
	//system_in.Bremsdruck_NC = HAL_GPIO_ReadPin(Bremsdruck_NC_GPIO_Port, Bremsdruck_NC_Pin);

	// SDC-Eingaenge einlesen
	sdc_in.EmergencyRun = HAL_GPIO_ReadPin(EMERGENCY_RUN_GPIO_Port, EMERGENCY_RUN_Pin);
 8000b30:	2102      	movs	r1, #2
 8000b32:	4876      	ldr	r0, [pc, #472]	; (8000d0c <readall_inputs+0x35c>)
 8000b34:	f002 f88e 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2d9      	uxtb	r1, r3
 8000b40:	4a73      	ldr	r2, [pc, #460]	; (8000d10 <readall_inputs+0x360>)
 8000b42:	7813      	ldrb	r3, [r2, #0]
 8000b44:	f361 0300 	bfi	r3, r1, #0, #1
 8000b48:	7013      	strb	r3, [r2, #0]
	sdc_in.SDC0 = HAL_GPIO_ReadPin(SENSE_SDC_0_GPIO_Port, SENSE_SDC_0_Pin);
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	4869      	ldr	r0, [pc, #420]	; (8000cf4 <readall_inputs+0x344>)
 8000b50:	f002 f880 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000b54:	4603      	mov	r3, r0
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	b2d9      	uxtb	r1, r3
 8000b5c:	4a6c      	ldr	r2, [pc, #432]	; (8000d10 <readall_inputs+0x360>)
 8000b5e:	7813      	ldrb	r3, [r2, #0]
 8000b60:	f361 0341 	bfi	r3, r1, #1, #1
 8000b64:	7013      	strb	r3, [r2, #0]
	sdc_in.AkkuSDC = HAL_GPIO_ReadPin(SENSE_SDC_AKKU_GPIO_Port, SENSE_SDC_AKKU_Pin);
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4862      	ldr	r0, [pc, #392]	; (8000cf4 <readall_inputs+0x344>)
 8000b6c:	f002 f872 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000b70:	4603      	mov	r3, r0
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	b2d9      	uxtb	r1, r3
 8000b78:	4a65      	ldr	r2, [pc, #404]	; (8000d10 <readall_inputs+0x360>)
 8000b7a:	7813      	ldrb	r3, [r2, #0]
 8000b7c:	f361 0382 	bfi	r3, r1, #2, #1
 8000b80:	7013      	strb	r3, [r2, #0]
	sdc_in.BTB_SDC = HAL_GPIO_ReadPin(SENSE_SDC_BTB_GPIO_Port, SENSE_SDC_BTB_Pin);
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	485e      	ldr	r0, [pc, #376]	; (8000d00 <readall_inputs+0x350>)
 8000b88:	f002 f864 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	b2d9      	uxtb	r1, r3
 8000b94:	4a5e      	ldr	r2, [pc, #376]	; (8000d10 <readall_inputs+0x360>)
 8000b96:	7813      	ldrb	r3, [r2, #0]
 8000b98:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b9c:	7013      	strb	r3, [r2, #0]
	sdc_in.DCDC_Fault = HAL_GPIO_ReadPin(DCCDC_FAULT_GPIO_Port, DCCDC_FAULT_Pin);
 8000b9e:	2102      	movs	r1, #2
 8000ba0:	4859      	ldr	r0, [pc, #356]	; (8000d08 <readall_inputs+0x358>)
 8000ba2:	f002 f857 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	b2d9      	uxtb	r1, r3
 8000bae:	4a58      	ldr	r2, [pc, #352]	; (8000d10 <readall_inputs+0x360>)
 8000bb0:	7813      	ldrb	r3, [r2, #0]
 8000bb2:	f361 1304 	bfi	r3, r1, #4, #1
 8000bb6:	7013      	strb	r3, [r2, #0]

	// Komforteingaenge einlesen
	komfort_in.ASR1 = HAL_GPIO_ReadPin(ASR_IN1_GPIO_Port, ASR_IN1_Pin);
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4853      	ldr	r0, [pc, #332]	; (8000d08 <readall_inputs+0x358>)
 8000bbc:	f002 f84a 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	b2d9      	uxtb	r1, r3
 8000bc8:	4a52      	ldr	r2, [pc, #328]	; (8000d14 <readall_inputs+0x364>)
 8000bca:	7813      	ldrb	r3, [r2, #0]
 8000bcc:	f361 0300 	bfi	r3, r1, #0, #1
 8000bd0:	7013      	strb	r3, [r2, #0]
	komfort_in.ASR2 = HAL_GPIO_ReadPin(ASR_IN2_GPIO_Port, ASR_IN2_Pin);
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	484b      	ldr	r0, [pc, #300]	; (8000d04 <readall_inputs+0x354>)
 8000bd6:	f002 f83d 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	b2d9      	uxtb	r1, r3
 8000be2:	4a4c      	ldr	r2, [pc, #304]	; (8000d14 <readall_inputs+0x364>)
 8000be4:	7813      	ldrb	r3, [r2, #0]
 8000be6:	f361 0341 	bfi	r3, r1, #1, #1
 8000bea:	7013      	strb	r3, [r2, #0]
	komfort_in.ECO = HAL_GPIO_ReadPin(ECO_GPIO_Port, ECO_Pin);
 8000bec:	2108      	movs	r1, #8
 8000bee:	4841      	ldr	r0, [pc, #260]	; (8000cf4 <readall_inputs+0x344>)
 8000bf0:	f002 f830 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	b2d9      	uxtb	r1, r3
 8000bfc:	4a45      	ldr	r2, [pc, #276]	; (8000d14 <readall_inputs+0x364>)
 8000bfe:	7813      	ldrb	r3, [r2, #0]
 8000c00:	f361 0382 	bfi	r3, r1, #2, #1
 8000c04:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Rst_In = HAL_GPIO_ReadPin(BC_RESET_IN_GPIO_Port, BC_RESET_IN_Pin);
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	483f      	ldr	r0, [pc, #252]	; (8000d08 <readall_inputs+0x358>)
 8000c0c:	f002 f822 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	b2d9      	uxtb	r1, r3
 8000c18:	4a3e      	ldr	r2, [pc, #248]	; (8000d14 <readall_inputs+0x364>)
 8000c1a:	7813      	ldrb	r3, [r2, #0]
 8000c1c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000c20:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Up_In = HAL_GPIO_ReadPin(BC_UP_IN_GPIO_Port, BC_UP_IN_Pin);
 8000c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c26:	4839      	ldr	r0, [pc, #228]	; (8000d0c <readall_inputs+0x35c>)
 8000c28:	f002 f814 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	b2d9      	uxtb	r1, r3
 8000c34:	4a37      	ldr	r2, [pc, #220]	; (8000d14 <readall_inputs+0x364>)
 8000c36:	7813      	ldrb	r3, [r2, #0]
 8000c38:	f361 1304 	bfi	r3, r1, #4, #1
 8000c3c:	7013      	strb	r3, [r2, #0]
	komfort_in.BC_Down_In = HAL_GPIO_ReadPin(BC_DOWN_IN_GPIO_Port, BC_DOWN_IN_Pin);
 8000c3e:	2110      	movs	r1, #16
 8000c40:	482c      	ldr	r0, [pc, #176]	; (8000cf4 <readall_inputs+0x344>)
 8000c42:	f002 f807 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	b2d9      	uxtb	r1, r3
 8000c4e:	4a31      	ldr	r2, [pc, #196]	; (8000d14 <readall_inputs+0x364>)
 8000c50:	7813      	ldrb	r3, [r2, #0]
 8000c52:	f361 1345 	bfi	r3, r1, #5, #1
 8000c56:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn1 = HAL_GPIO_ReadPin(BAMOCAR_IN1_GPIO_Port, BAMOCAR_IN1_Pin);
 8000c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c5c:	4829      	ldr	r0, [pc, #164]	; (8000d04 <readall_inputs+0x354>)
 8000c5e:	f001 fff9 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	b2d9      	uxtb	r1, r3
 8000c6a:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <readall_inputs+0x364>)
 8000c6c:	7813      	ldrb	r3, [r2, #0]
 8000c6e:	f361 1386 	bfi	r3, r1, #6, #1
 8000c72:	7013      	strb	r3, [r2, #0]
	komfort_in.BamoIn2 = HAL_GPIO_ReadPin(BAMOCAR_IN2_GPIO_Port, BAMOCAR_IN2_Pin);
 8000c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c78:	4822      	ldr	r0, [pc, #136]	; (8000d04 <readall_inputs+0x354>)
 8000c7a:	f001 ffeb 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	b2d9      	uxtb	r1, r3
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <readall_inputs+0x364>)
 8000c88:	7813      	ldrb	r3, [r2, #0]
 8000c8a:	f361 13c7 	bfi	r3, r1, #7, #1
 8000c8e:	7013      	strb	r3, [r2, #0]
	komfort_in.Enter = HAL_GPIO_ReadPin(ENTER_GPIO_Port, ENTER_Pin);
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4821      	ldr	r0, [pc, #132]	; (8000d18 <readall_inputs+0x368>)
 8000c94:	f001 ffde 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	b2d9      	uxtb	r1, r3
 8000ca0:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <readall_inputs+0x364>)
 8000ca2:	7853      	ldrb	r3, [r2, #1]
 8000ca4:	f361 0300 	bfi	r3, r1, #0, #1
 8000ca8:	7053      	strb	r3, [r2, #1]
	komfort_in.OutA = HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin);
 8000caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cae:	4817      	ldr	r0, [pc, #92]	; (8000d0c <readall_inputs+0x35c>)
 8000cb0:	f001 ffd0 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	b2d9      	uxtb	r1, r3
 8000cbc:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <readall_inputs+0x364>)
 8000cbe:	7853      	ldrb	r3, [r2, #1]
 8000cc0:	f361 0341 	bfi	r3, r1, #1, #1
 8000cc4:	7053      	strb	r3, [r2, #1]
	komfort_in.OutB = HAL_GPIO_ReadPin(OUTB_GPIO_Port, OUTB_Pin);
 8000cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cca:	4810      	ldr	r0, [pc, #64]	; (8000d0c <readall_inputs+0x35c>)
 8000ccc:	f001 ffc2 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	b2d9      	uxtb	r1, r3
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <readall_inputs+0x364>)
 8000cda:	7853      	ldrb	r3, [r2, #1]
 8000cdc:	f361 0382 	bfi	r3, r1, #2, #1
 8000ce0:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA1 = HAL_GPIO_ReadPin(GRA1_GPIO_Port, GRA1_Pin);
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <readall_inputs+0x358>)
 8000ce6:	f001 ffb5 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2d9      	uxtb	r1, r3
 8000cf2:	e013      	b.n	8000d1c <readall_inputs+0x36c>
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	20000028 	.word	0x20000028
 8000cfc:	40021400 	.word	0x40021400
 8000d00:	40020400 	.word	0x40020400
 8000d04:	40020c00 	.word	0x40020c00
 8000d08:	40021800 	.word	0x40021800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	20000030 	.word	0x20000030
 8000d14:	2000002c 	.word	0x2000002c
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <readall_inputs+0x3e4>)
 8000d1e:	7853      	ldrb	r3, [r2, #1]
 8000d20:	f361 03c3 	bfi	r3, r1, #3, #1
 8000d24:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA2 = HAL_GPIO_ReadPin(GRA2_GPIO_Port, GRA2_Pin);
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	481b      	ldr	r0, [pc, #108]	; (8000d98 <readall_inputs+0x3e8>)
 8000d2a:	f001 ff93 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <readall_inputs+0x3e4>)
 8000d38:	7853      	ldrb	r3, [r2, #1]
 8000d3a:	f361 1304 	bfi	r3, r1, #4, #1
 8000d3e:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA3 = HAL_GPIO_ReadPin(GRA3_GPIO_Port, GRA3_Pin);
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	4815      	ldr	r0, [pc, #84]	; (8000d98 <readall_inputs+0x3e8>)
 8000d44:	f001 ff86 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	b2d9      	uxtb	r1, r3
 8000d50:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <readall_inputs+0x3e4>)
 8000d52:	7853      	ldrb	r3, [r2, #1]
 8000d54:	f361 1345 	bfi	r3, r1, #5, #1
 8000d58:	7053      	strb	r3, [r2, #1]
	komfort_in.GRA4 = HAL_GPIO_ReadPin(GRA4_GPIO_Port, GRA4_Pin);
 8000d5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d5e:	480e      	ldr	r0, [pc, #56]	; (8000d98 <readall_inputs+0x3e8>)
 8000d60:	f001 ff78 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	b2d9      	uxtb	r1, r3
 8000d6c:	4a09      	ldr	r2, [pc, #36]	; (8000d94 <readall_inputs+0x3e4>)
 8000d6e:	7853      	ldrb	r3, [r2, #1]
 8000d70:	f361 1386 	bfi	r3, r1, #6, #1
 8000d74:	7053      	strb	r3, [r2, #1]
	komfort_in.Durchfluss = HAL_GPIO_ReadPin(DURCHFLUSS_GPIO_Port, DURCHFLUSS_Pin);
 8000d76:	2120      	movs	r1, #32
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <readall_inputs+0x3ec>)
 8000d7a:	f001 ff6b 	bl	8002c54 <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	b2d9      	uxtb	r1, r3
 8000d86:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <readall_inputs+0x3e4>)
 8000d88:	7853      	ldrb	r3, [r2, #1]
 8000d8a:	f361 13c7 	bfi	r3, r1, #7, #1
 8000d8e:	7053      	strb	r3, [r2, #1]
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000002c 	.word	0x2000002c
 8000d98:	40021800 	.word	0x40021800
 8000d9c:	40021000 	.word	0x40021000

08000da0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000db2:	4b64      	ldr	r3, [pc, #400]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000db4:	4a64      	ldr	r2, [pc, #400]	; (8000f48 <MX_ADC1_Init+0x1a8>)
 8000db6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db8:	4b62      	ldr	r3, [pc, #392]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000dba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc0:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000dc6:	4b5f      	ldr	r3, [pc, #380]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dcc:	4b5d      	ldr	r3, [pc, #372]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dd2:	4b5c      	ldr	r3, [pc, #368]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dda:	4b5a      	ldr	r3, [pc, #360]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de0:	4b58      	ldr	r3, [pc, #352]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000de2:	4a5a      	ldr	r2, [pc, #360]	; (8000f4c <MX_ADC1_Init+0x1ac>)
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000de6:	4b57      	ldr	r3, [pc, #348]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8000dec:	4b55      	ldr	r3, [pc, #340]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000dee:	220a      	movs	r2, #10
 8000df0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000df2:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dfa:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e00:	4850      	ldr	r0, [pc, #320]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000e02:	f001 f911 	bl	8002028 <HAL_ADC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e0c:	f000 ff60 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e10:	230e      	movs	r3, #14
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4848      	ldr	r0, [pc, #288]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000e22:	f001 f945 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e2c:	f000 ff50 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e30:	2306      	movs	r3, #6
 8000e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4841      	ldr	r0, [pc, #260]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000e3e:	f001 f937 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e48:	f000 ff42 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e50:	2303      	movs	r3, #3
 8000e52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000e54:	2302      	movs	r3, #2
 8000e56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4839      	ldr	r0, [pc, #228]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000e5e:	f001 f927 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000e68:	f000 ff32 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e70:	2304      	movs	r3, #4
 8000e72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e74:	463b      	mov	r3, r7
 8000e76:	4619      	mov	r1, r3
 8000e78:	4832      	ldr	r0, [pc, #200]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000e7a:	f001 f919 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000e84:	f000 ff24 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e88:	230f      	movs	r3, #15
 8000e8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000e90:	2301      	movs	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	482a      	ldr	r0, [pc, #168]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000e9a:	f001 f909 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000ea4:	f000 ff14 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000eac:	2306      	movs	r3, #6
 8000eae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4822      	ldr	r0, [pc, #136]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000eba:	f001 f8f9 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8000ec4:	f000 ff04 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000ecc:	2307      	movs	r3, #7
 8000ece:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481b      	ldr	r0, [pc, #108]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000ed6:	f001 f8eb 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000ee0:	f000 fef6 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_ADC1_Init+0x1b0>)
 8000ee6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4814      	ldr	r0, [pc, #80]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000ef2:	f001 f8dd 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8000efc:	f000 fee8 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f00:	2308      	movs	r3, #8
 8000f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000f04:	2309      	movs	r3, #9
 8000f06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000f12:	f001 f8cd 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8000f1c:	f000 fed8 	bl	8001cd0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f20:	2309      	movs	r3, #9
 8000f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000f24:	230a      	movs	r3, #10
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_ADC1_Init+0x1a4>)
 8000f2e:	f001 f8bf 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8000f38:	f000 feca 	bl	8001cd0 <Error_Handler>
  }

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000034 	.word	0x20000034
 8000f48:	40012000 	.word	0x40012000
 8000f4c:	0f000001 	.word	0x0f000001
 8000f50:	10000012 	.word	0x10000012

08000f54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	; 0x30
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a2d      	ldr	r2, [pc, #180]	; (8001028 <HAL_ADC_MspInit+0xd4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d153      	bne.n	800101e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f76:	4b2d      	ldr	r3, [pc, #180]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a2c      	ldr	r2, [pc, #176]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a26      	ldr	r2, [pc, #152]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a20      	ldr	r2, [pc, #128]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a1a      	ldr	r2, [pc, #104]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_ADC_MspInit+0xd8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 8000fd6:	23f8      	movs	r3, #248	; 0xf8
 8000fd8:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4811      	ldr	r0, [pc, #68]	; (8001030 <HAL_ADC_MspInit+0xdc>)
 8000fea:	f001 fc87 	bl	80028fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8000fee:	2330      	movs	r3, #48	; 0x30
 8000ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	480c      	ldr	r0, [pc, #48]	; (8001034 <HAL_ADC_MspInit+0xe0>)
 8001002:	f001 fc7b 	bl	80028fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_RETURN_Pin|SENSE_INFO_Pin;
 8001006:	2303      	movs	r3, #3
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	4807      	ldr	r0, [pc, #28]	; (8001038 <HAL_ADC_MspInit+0xe4>)
 800101a:	f001 fc6f 	bl	80028fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	; 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40012000 	.word	0x40012000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020000 	.word	0x40020000
 8001034:	40020800 	.word	0x40020800
 8001038:	40020400 	.word	0x40020400

0800103c <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_CAN3_Init+0x64>)
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <MX_CAN3_Init+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_CAN3_Init+0x64>)
 8001048:	2206      	movs	r2, #6
 800104a:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_CAN3_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_CAN3_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_CAN3_Init+0x64>)
 800105a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800105e:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_CAN3_Init+0x64>)
 8001062:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001066:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <MX_CAN3_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <MX_CAN3_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <MX_CAN3_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <MX_CAN3_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <MX_CAN3_Init+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <MX_CAN3_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_CAN3_Init+0x64>)
 800108e:	f001 fa53 	bl	8002538 <HAL_CAN_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8001098:	f000 fe1a 	bl	8001cd0 <Error_Handler>
  }

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000007c 	.word	0x2000007c
 80010a4:	40003400 	.word	0x40003400

080010a8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a23      	ldr	r2, [pc, #140]	; (8001154 <HAL_CAN_MspInit+0xac>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d140      	bne.n	800114c <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a22      	ldr	r2, [pc, #136]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 80010d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 80010e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a16      	ldr	r2, [pc, #88]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 8001100:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <HAL_CAN_MspInit+0xb0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 800112a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800113c:	230b      	movs	r3, #11
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_CAN_MspInit+0xb4>)
 8001148:	f001 fbd8 	bl	80028fc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 800114c:	bf00      	nop
 800114e:	3730      	adds	r7, #48	; 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40003400 	.word	0x40003400
 8001158:	40023800 	.word	0x40023800
 800115c:	40020000 	.word	0x40020000

08001160 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08e      	sub	sp, #56	; 0x38
 8001164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001176:	4bb6      	ldr	r3, [pc, #728]	; (8001450 <MX_GPIO_Init+0x2f0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4ab5      	ldr	r2, [pc, #724]	; (8001450 <MX_GPIO_Init+0x2f0>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4bb3      	ldr	r3, [pc, #716]	; (8001450 <MX_GPIO_Init+0x2f0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	623b      	str	r3, [r7, #32]
 800118c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4bb0      	ldr	r3, [pc, #704]	; (8001450 <MX_GPIO_Init+0x2f0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4aaf      	ldr	r2, [pc, #700]	; (8001450 <MX_GPIO_Init+0x2f0>)
 8001194:	f043 0304 	orr.w	r3, r3, #4
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4bad      	ldr	r3, [pc, #692]	; (8001450 <MX_GPIO_Init+0x2f0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0304 	and.w	r3, r3, #4
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	4baa      	ldr	r3, [pc, #680]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4aa9      	ldr	r2, [pc, #676]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011ac:	f043 0320 	orr.w	r3, r3, #32
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4ba7      	ldr	r3, [pc, #668]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0320 	and.w	r3, r3, #32
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	4ba4      	ldr	r3, [pc, #656]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4aa3      	ldr	r2, [pc, #652]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b9e      	ldr	r3, [pc, #632]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a9d      	ldr	r2, [pc, #628]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b9b      	ldr	r3, [pc, #620]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b98      	ldr	r3, [pc, #608]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a97      	ldr	r2, [pc, #604]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b95      	ldr	r3, [pc, #596]	; (8001450 <MX_GPIO_Init+0x2f0>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001206:	4b92      	ldr	r3, [pc, #584]	; (8001450 <MX_GPIO_Init+0x2f0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a91      	ldr	r2, [pc, #580]	; (8001450 <MX_GPIO_Init+0x2f0>)
 800120c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b8f      	ldr	r3, [pc, #572]	; (8001450 <MX_GPIO_Init+0x2f0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121e:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <MX_GPIO_Init+0x2f0>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a8b      	ldr	r2, [pc, #556]	; (8001450 <MX_GPIO_Init+0x2f0>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b89      	ldr	r3, [pc, #548]	; (8001450 <MX_GPIO_Init+0x2f0>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8001236:	2200      	movs	r2, #0
 8001238:	f248 0187 	movw	r1, #32903	; 0x8087
 800123c:	4885      	ldr	r0, [pc, #532]	; (8001454 <MX_GPIO_Init+0x2f4>)
 800123e:	f001 fd21 	bl	8002c84 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f242 0108 	movw	r1, #8200	; 0x2008
 8001248:	4883      	ldr	r0, [pc, #524]	; (8001458 <MX_GPIO_Init+0x2f8>)
 800124a:	f001 fd1b 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 800124e:	2200      	movs	r2, #0
 8001250:	f24f 013c 	movw	r1, #61500	; 0xf03c
 8001254:	4881      	ldr	r0, [pc, #516]	; (800145c <MX_GPIO_Init+0x2fc>)
 8001256:	f001 fd15 	bl	8002c84 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 800125a:	2200      	movs	r2, #0
 800125c:	f647 0194 	movw	r1, #30868	; 0x7894
 8001260:	487f      	ldr	r0, [pc, #508]	; (8001460 <MX_GPIO_Init+0x300>)
 8001262:	f001 fd0f 	bl	8002c84 <HAL_GPIO_WritePin>
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8001266:	2200      	movs	r2, #0
 8001268:	f64e 2188 	movw	r1, #60040	; 0xea88
 800126c:	487d      	ldr	r0, [pc, #500]	; (8001464 <MX_GPIO_Init+0x304>)
 800126e:	f001 fd09 	bl	8002c84 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8001272:	2200      	movs	r2, #0
 8001274:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8001278:	487b      	ldr	r0, [pc, #492]	; (8001468 <MX_GPIO_Init+0x308>)
 800127a:	f001 fd03 	bl	8002c84 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001284:	4879      	ldr	r0, [pc, #484]	; (800146c <MX_GPIO_Init+0x30c>)
 8001286:	f001 fcfd 	bl	8002c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 800128a:	f248 0387 	movw	r3, #32903	; 0x8087
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	486c      	ldr	r0, [pc, #432]	; (8001454 <MX_GPIO_Init+0x2f4>)
 80012a4:	f001 fb2a 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 80012a8:	f647 7378 	movw	r3, #32632	; 0x7f78
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4619      	mov	r1, r3
 80012bc:	4865      	ldr	r0, [pc, #404]	; (8001454 <MX_GPIO_Init+0x2f4>)
 80012be:	f001 fb1d 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	485f      	ldr	r0, [pc, #380]	; (8001458 <MX_GPIO_Init+0x2f8>)
 80012dc:	f001 fb0e 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80012e0:	f64d 7347 	movw	r3, #57159	; 0xdf47
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e6:	2303      	movs	r3, #3
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	4858      	ldr	r0, [pc, #352]	; (8001458 <MX_GPIO_Init+0x2f8>)
 80012f6:	f001 fb01 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|ECON_Pin|RECUPERATION_Pin;
 80012fa:	f640 0303 	movw	r3, #2051	; 0x803
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4853      	ldr	r0, [pc, #332]	; (800145c <MX_GPIO_Init+0x2fc>)
 8001310:	f001 faf4 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 8001314:	f24f 033c 	movw	r3, #61500	; 0xf03c
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	484b      	ldr	r0, [pc, #300]	; (800145c <MX_GPIO_Init+0x2fc>)
 800132e:	f001 fae5 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PF10 */
  GPIO_InitStruct.Pin = SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin
 8001332:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001338:	2303      	movs	r3, #3
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4845      	ldr	r0, [pc, #276]	; (800145c <MX_GPIO_Init+0x2fc>)
 8001348:	f001 fad8 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 800134c:	2308      	movs	r3, #8
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2302      	movs	r3, #2
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	483d      	ldr	r0, [pc, #244]	; (8001458 <MX_GPIO_Init+0x2f8>)
 8001364:	f001 faca 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 8001368:	f640 6307 	movw	r3, #3591	; 0xe07
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	483b      	ldr	r0, [pc, #236]	; (800146c <MX_GPIO_Init+0x30c>)
 800137e:	f001 fabd 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = RED_LED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8001382:	f647 0394 	movw	r3, #30868	; 0x7894
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
                          |GREEN_LED_Pin|HEATER2_Pin|BLUE_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4619      	mov	r1, r3
 800139a:	4831      	ldr	r0, [pc, #196]	; (8001460 <MX_GPIO_Init+0x300>)
 800139c:	f001 faae 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 80013a0:	f241 13f3 	movw	r3, #4595	; 0x11f3
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	482c      	ldr	r0, [pc, #176]	; (8001468 <MX_GPIO_Init+0x308>)
 80013b6:	f001 faa1 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 80013ba:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	4619      	mov	r1, r3
 80013ce:	4824      	ldr	r0, [pc, #144]	; (8001460 <MX_GPIO_Init+0x300>)
 80013d0:	f001 fa94 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN2_Pin|BAMOCAR_IN1_Pin|ASR_IN2_Pin;
 80013d4:	f241 5310 	movw	r3, #5392	; 0x1510
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	4619      	mov	r1, r3
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <MX_GPIO_Init+0x304>)
 80013ea:	f001 fa87 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80013ee:	f64e 2388 	movw	r3, #60040	; 0xea88
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	4817      	ldr	r0, [pc, #92]	; (8001464 <MX_GPIO_Init+0x304>)
 8001408:	f001 fa78 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 800140c:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	4810      	ldr	r0, [pc, #64]	; (8001468 <MX_GPIO_Init+0x308>)
 8001426:	f001 fa69 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800143a:	4619      	mov	r1, r3
 800143c:	4806      	ldr	r0, [pc, #24]	; (8001458 <MX_GPIO_Init+0x2f8>)
 800143e:	f001 fa5d 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 8001442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001448:	2301      	movs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	e00f      	b.n	8001470 <MX_GPIO_Init+0x310>
 8001450:	40023800 	.word	0x40023800
 8001454:	40021000 	.word	0x40021000
 8001458:	40020800 	.word	0x40020800
 800145c:	40021400 	.word	0x40021400
 8001460:	40020400 	.word	0x40020400
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021800 	.word	0x40021800
 800146c:	40020000 	.word	0x40020000
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	480f      	ldr	r0, [pc, #60]	; (80014bc <MX_GPIO_Init+0x35c>)
 800147e:	f001 fa3d 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 8001482:	2307      	movs	r3, #7
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001486:	2303      	movs	r3, #3
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <MX_GPIO_Init+0x360>)
 8001496:	f001 fa31 	bl	80028fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin|I2C1_SDA_Pin;
 800149a:	f44f 7358 	mov.w	r3, #864	; 0x360
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a0:	2303      	movs	r3, #3
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_GPIO_Init+0x364>)
 80014b0:	f001 fa24 	bl	80028fc <HAL_GPIO_Init>

}
 80014b4:	bf00      	nop
 80014b6:	3738      	adds	r7, #56	; 0x38
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	40020400 	.word	0x40020400

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014cc:	f000 fd07 	bl	8001ede <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d0:	f000 fb6e 	bl	8001bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d4:	f7ff fe44 	bl	8001160 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d8:	f000 fc64 	bl	8001da4 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 80014dc:	f7ff fdae 	bl	800103c <MX_CAN3_Init>
  MX_ADC1_Init();
 80014e0:	f7ff fc5e 	bl	8000da0 <MX_ADC1_Init>

  /* USER CODE BEGIN 2 */

  	/* Schreibe Resetquelle auf die Konsole */
#ifdef DEBUG
	printResetSource(readResetSource());
 80014e4:	f7ff f9a8 	bl	8000838 <readResetSource>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f9f6 	bl	80008dc <printResetSource>

  	/* Teste serielle Schnittstelle*/
  	#define TEST_STRING_UART	"\nUART3 Transmitting in polling mode, Hello Diveturtle93!\n"
  	uartTransmit(TEST_STRING_UART, sizeof(TEST_STRING_UART));
 80014f0:	213a      	movs	r1, #58	; 0x3a
 80014f2:	48af      	ldr	r0, [pc, #700]	; (80017b0 <main+0x2e8>)
 80014f4:	f7ff f824 	bl	8000540 <uartTransmit>

  	/* Sammel Systeminformationen */
  	collectSystemInfo();
 80014f8:	f7ff f97c 	bl	80007f4 <collectSystemInfo>
#endif

  	/* Lese alle Eingaenge */
  	readall_inputs();
 80014fc:	f7ff fa58 	bl	80009b0 <readall_inputs>

	#define TASTERPRESSED		"Taster betaetigt, Not OK\n"
	#define TASTERNOTPRESSED	"Taster nicht betaetigt, OK\n"

  	#define SYSTEMIN			"\n\nSystem Eingaenge\n\n"
  	uartTransmit(SYSTEMIN, sizeof(SYSTEMIN));
 8001500:	2115      	movs	r1, #21
 8001502:	48ac      	ldr	r0, [pc, #688]	; (80017b4 <main+0x2ec>)
 8001504:	f7ff f81c 	bl	8000540 <uartTransmit>

	#define TESTKICKDOWN		"Test Kickdown, default = 0\n"
  	uartTransmit(TESTKICKDOWN, sizeof(TESTKICKDOWN));
 8001508:	211c      	movs	r1, #28
 800150a:	48ab      	ldr	r0, [pc, #684]	; (80017b8 <main+0x2f0>)
 800150c:	f7ff f818 	bl	8000540 <uartTransmit>
  	if(system_in.Kickdown == 1)
 8001510:	4baa      	ldr	r3, [pc, #680]	; (80017bc <main+0x2f4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <main+0x60>
  		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 800151e:	211a      	movs	r1, #26
 8001520:	48a7      	ldr	r0, [pc, #668]	; (80017c0 <main+0x2f8>)
 8001522:	f7ff f80d 	bl	8000540 <uartTransmit>
 8001526:	e003      	b.n	8001530 <main+0x68>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001528:	211c      	movs	r1, #28
 800152a:	48a6      	ldr	r0, [pc, #664]	; (80017c4 <main+0x2fc>)
 800152c:	f7ff f808 	bl	8000540 <uartTransmit>

	#define TESTLEERLAUF		"Test Leerlauf, default = 0\n"
	uartTransmit(TESTLEERLAUF, sizeof(TESTLEERLAUF));
 8001530:	211c      	movs	r1, #28
 8001532:	48a5      	ldr	r0, [pc, #660]	; (80017c8 <main+0x300>)
 8001534:	f7ff f804 	bl	8000540 <uartTransmit>
	if(system_in.Leerlauf == 1)
 8001538:	4ba0      	ldr	r3, [pc, #640]	; (80017bc <main+0x2f4>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <main+0x88>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001546:	211a      	movs	r1, #26
 8001548:	489d      	ldr	r0, [pc, #628]	; (80017c0 <main+0x2f8>)
 800154a:	f7fe fff9 	bl	8000540 <uartTransmit>
 800154e:	e003      	b.n	8001558 <main+0x90>
	else
	uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001550:	211c      	movs	r1, #28
 8001552:	489c      	ldr	r0, [pc, #624]	; (80017c4 <main+0x2fc>)
 8001554:	f7fe fff4 	bl	8000540 <uartTransmit>

	#define TESTBREMSENO		"Test Bremse normally open, default = 1\n"
	uartTransmit(TESTBREMSENO, sizeof(TESTBREMSENO));
 8001558:	2128      	movs	r1, #40	; 0x28
 800155a:	489c      	ldr	r0, [pc, #624]	; (80017cc <main+0x304>)
 800155c:	f7fe fff0 	bl	8000540 <uartTransmit>
	if(system_in.BremseNO != 1)
 8001560:	4b96      	ldr	r3, [pc, #600]	; (80017bc <main+0x2f4>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d104      	bne.n	8001578 <main+0xb0>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 800156e:	211a      	movs	r1, #26
 8001570:	4893      	ldr	r0, [pc, #588]	; (80017c0 <main+0x2f8>)
 8001572:	f7fe ffe5 	bl	8000540 <uartTransmit>
 8001576:	e003      	b.n	8001580 <main+0xb8>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001578:	211c      	movs	r1, #28
 800157a:	4892      	ldr	r0, [pc, #584]	; (80017c4 <main+0x2fc>)
 800157c:	f7fe ffe0 	bl	8000540 <uartTransmit>

	#define TESTBREMSENC		"Test Bremse normally connect, default = 0\n"
	uartTransmit(TESTBREMSENC, sizeof(TESTBREMSENC));
 8001580:	212b      	movs	r1, #43	; 0x2b
 8001582:	4893      	ldr	r0, [pc, #588]	; (80017d0 <main+0x308>)
 8001584:	f7fe ffdc 	bl	8000540 <uartTransmit>
	if(system_in.BremseNC == 1)
 8001588:	4b8c      	ldr	r3, [pc, #560]	; (80017bc <main+0x2f4>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <main+0xd8>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001596:	211a      	movs	r1, #26
 8001598:	4889      	ldr	r0, [pc, #548]	; (80017c0 <main+0x2f8>)
 800159a:	f7fe ffd1 	bl	8000540 <uartTransmit>
 800159e:	e003      	b.n	80015a8 <main+0xe0>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80015a0:	211c      	movs	r1, #28
 80015a2:	4888      	ldr	r0, [pc, #544]	; (80017c4 <main+0x2fc>)
 80015a4:	f7fe ffcc 	bl	8000540 <uartTransmit>

	#define TESTKUPPLUNG		"Test Kupplung, default = 1\n"
	uartTransmit(TESTKUPPLUNG, sizeof(TESTKUPPLUNG));
 80015a8:	211c      	movs	r1, #28
 80015aa:	488a      	ldr	r0, [pc, #552]	; (80017d4 <main+0x30c>)
 80015ac:	f7fe ffc8 	bl	8000540 <uartTransmit>
	if(system_in.Kupplung != 1)
 80015b0:	4b82      	ldr	r3, [pc, #520]	; (80017bc <main+0x2f4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d104      	bne.n	80015c8 <main+0x100>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80015be:	211a      	movs	r1, #26
 80015c0:	487f      	ldr	r0, [pc, #508]	; (80017c0 <main+0x2f8>)
 80015c2:	f7fe ffbd 	bl	8000540 <uartTransmit>
 80015c6:	e003      	b.n	80015d0 <main+0x108>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80015c8:	211c      	movs	r1, #28
 80015ca:	487e      	ldr	r0, [pc, #504]	; (80017c4 <main+0x2fc>)
 80015cc:	f7fe ffb8 	bl	8000540 <uartTransmit>

	#define TESTRECUPERATION	"Test Recuperation, default = 1\n"
	uartTransmit(TESTRECUPERATION, sizeof(TESTRECUPERATION));
 80015d0:	2120      	movs	r1, #32
 80015d2:	4881      	ldr	r0, [pc, #516]	; (80017d8 <main+0x310>)
 80015d4:	f7fe ffb4 	bl	8000540 <uartTransmit>
	if(system_in.Recuperation != 1)
 80015d8:	4b78      	ldr	r3, [pc, #480]	; (80017bc <main+0x2f4>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	f003 0320 	and.w	r3, r3, #32
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d104      	bne.n	80015f0 <main+0x128>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80015e6:	211a      	movs	r1, #26
 80015e8:	4875      	ldr	r0, [pc, #468]	; (80017c0 <main+0x2f8>)
 80015ea:	f7fe ffa9 	bl	8000540 <uartTransmit>
 80015ee:	e003      	b.n	80015f8 <main+0x130>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80015f0:	211c      	movs	r1, #28
 80015f2:	4874      	ldr	r0, [pc, #464]	; (80017c4 <main+0x2fc>)
 80015f4:	f7fe ffa4 	bl	8000540 <uartTransmit>

	#define TESTECON			"Test ECON, default = 0\n"
	uartTransmit(TESTECON, sizeof(TESTECON));
 80015f8:	2118      	movs	r1, #24
 80015fa:	4878      	ldr	r0, [pc, #480]	; (80017dc <main+0x314>)
 80015fc:	f7fe ffa0 	bl	8000540 <uartTransmit>
	if(system_in.ECON != 1)
 8001600:	4b6e      	ldr	r3, [pc, #440]	; (80017bc <main+0x2f4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d104      	bne.n	8001618 <main+0x150>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 800160e:	211a      	movs	r1, #26
 8001610:	486b      	ldr	r0, [pc, #428]	; (80017c0 <main+0x2f8>)
 8001612:	f7fe ff95 	bl	8000540 <uartTransmit>
 8001616:	e003      	b.n	8001620 <main+0x158>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001618:	211c      	movs	r1, #28
 800161a:	486a      	ldr	r0, [pc, #424]	; (80017c4 <main+0x2fc>)
 800161c:	f7fe ff90 	bl	8000540 <uartTransmit>

	#define TESTANLASSER		"Test Anlasser, default = 1\n"
	uartTransmit(TESTANLASSER, sizeof(TESTANLASSER));
 8001620:	211c      	movs	r1, #28
 8001622:	486f      	ldr	r0, [pc, #444]	; (80017e0 <main+0x318>)
 8001624:	f7fe ff8c 	bl	8000540 <uartTransmit>
	if(system_in.Anlasser != 1)
 8001628:	4b64      	ldr	r3, [pc, #400]	; (80017bc <main+0x2f4>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d104      	bne.n	8001640 <main+0x178>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001636:	211a      	movs	r1, #26
 8001638:	4861      	ldr	r0, [pc, #388]	; (80017c0 <main+0x2f8>)
 800163a:	f7fe ff81 	bl	8000540 <uartTransmit>
 800163e:	e003      	b.n	8001648 <main+0x180>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001640:	211c      	movs	r1, #28
 8001642:	4860      	ldr	r0, [pc, #384]	; (80017c4 <main+0x2fc>)
 8001644:	f7fe ff7c 	bl	8000540 <uartTransmit>

	#define TESTKL15			"Test KL15, default = 1\n"
	uartTransmit(TESTKL15, sizeof(TESTKL15));
 8001648:	2118      	movs	r1, #24
 800164a:	4866      	ldr	r0, [pc, #408]	; (80017e4 <main+0x31c>)
 800164c:	f7fe ff78 	bl	8000540 <uartTransmit>
	if(system_in.KL15 != 1)
 8001650:	4b5a      	ldr	r3, [pc, #360]	; (80017bc <main+0x2f4>)
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d104      	bne.n	8001668 <main+0x1a0>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 800165e:	211a      	movs	r1, #26
 8001660:	4857      	ldr	r0, [pc, #348]	; (80017c0 <main+0x2f8>)
 8001662:	f7fe ff6d 	bl	8000540 <uartTransmit>
 8001666:	e003      	b.n	8001670 <main+0x1a8>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001668:	211c      	movs	r1, #28
 800166a:	4856      	ldr	r0, [pc, #344]	; (80017c4 <main+0x2fc>)
 800166c:	f7fe ff68 	bl	8000540 <uartTransmit>

	#define TESTDCDCINST		"Test DCDC_Inst, default = 0\n"
	uartTransmit(TESTDCDCINST, sizeof(TESTDCDCINST));
 8001670:	211d      	movs	r1, #29
 8001672:	485d      	ldr	r0, [pc, #372]	; (80017e8 <main+0x320>)
 8001674:	f7fe ff64 	bl	8000540 <uartTransmit>
	if(system_in.DCDC_Inst == 1)
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <main+0x2f4>)
 800167a:	785b      	ldrb	r3, [r3, #1]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <main+0x1c8>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001686:	211a      	movs	r1, #26
 8001688:	484d      	ldr	r0, [pc, #308]	; (80017c0 <main+0x2f8>)
 800168a:	f7fe ff59 	bl	8000540 <uartTransmit>
 800168e:	e003      	b.n	8001698 <main+0x1d0>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001690:	211c      	movs	r1, #28
 8001692:	484c      	ldr	r0, [pc, #304]	; (80017c4 <main+0x2fc>)
 8001694:	f7fe ff54 	bl	8000540 <uartTransmit>

	#define TESTBUTTON1			"Test Button1, default = 1\n"
	uartTransmit(TESTBUTTON1, sizeof(TESTBUTTON1));
 8001698:	211b      	movs	r1, #27
 800169a:	4854      	ldr	r0, [pc, #336]	; (80017ec <main+0x324>)
 800169c:	f7fe ff50 	bl	8000540 <uartTransmit>
	if(system_in.Button1 != 1)
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <main+0x2f4>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d104      	bne.n	80016b8 <main+0x1f0>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80016ae:	211a      	movs	r1, #26
 80016b0:	4843      	ldr	r0, [pc, #268]	; (80017c0 <main+0x2f8>)
 80016b2:	f7fe ff45 	bl	8000540 <uartTransmit>
 80016b6:	e003      	b.n	80016c0 <main+0x1f8>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80016b8:	211c      	movs	r1, #28
 80016ba:	4842      	ldr	r0, [pc, #264]	; (80017c4 <main+0x2fc>)
 80016bc:	f7fe ff40 	bl	8000540 <uartTransmit>

	#define TESTBUTTON2			"Test Button2, default = 1\n"
	uartTransmit(TESTBUTTON2, sizeof(TESTBUTTON2));
 80016c0:	211b      	movs	r1, #27
 80016c2:	484b      	ldr	r0, [pc, #300]	; (80017f0 <main+0x328>)
 80016c4:	f7fe ff3c 	bl	8000540 <uartTransmit>
	if(system_in.Button2 != 1)
 80016c8:	4b3c      	ldr	r3, [pc, #240]	; (80017bc <main+0x2f4>)
 80016ca:	785b      	ldrb	r3, [r3, #1]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d104      	bne.n	80016e0 <main+0x218>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80016d6:	211a      	movs	r1, #26
 80016d8:	4839      	ldr	r0, [pc, #228]	; (80017c0 <main+0x2f8>)
 80016da:	f7fe ff31 	bl	8000540 <uartTransmit>
 80016de:	e003      	b.n	80016e8 <main+0x220>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80016e0:	211c      	movs	r1, #28
 80016e2:	4838      	ldr	r0, [pc, #224]	; (80017c4 <main+0x2fc>)
 80016e4:	f7fe ff2c 	bl	8000540 <uartTransmit>

	#define TESTCRASH			"Test Crash, default = 0\n"
	uartTransmit(TESTCRASH, sizeof(TESTCRASH));
 80016e8:	2119      	movs	r1, #25
 80016ea:	4842      	ldr	r0, [pc, #264]	; (80017f4 <main+0x32c>)
 80016ec:	f7fe ff28 	bl	8000540 <uartTransmit>
	if(system_in.Crash == 1)
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <main+0x2f4>)
 80016f2:	785b      	ldrb	r3, [r3, #1]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <main+0x240>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80016fe:	211a      	movs	r1, #26
 8001700:	482f      	ldr	r0, [pc, #188]	; (80017c0 <main+0x2f8>)
 8001702:	f7fe ff1d 	bl	8000540 <uartTransmit>
 8001706:	e003      	b.n	8001710 <main+0x248>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001708:	211c      	movs	r1, #28
 800170a:	482e      	ldr	r0, [pc, #184]	; (80017c4 <main+0x2fc>)
 800170c:	f7fe ff18 	bl	8000540 <uartTransmit>

	#define TESTWAKEUP			"Test Wakeup, default = 0\n"
	uartTransmit(TESTWAKEUP, sizeof(TESTWAKEUP));
 8001710:	211a      	movs	r1, #26
 8001712:	4839      	ldr	r0, [pc, #228]	; (80017f8 <main+0x330>)
 8001714:	f7fe ff14 	bl	8000540 <uartTransmit>
	if(system_in.Wakeup == 1)
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <main+0x2f4>)
 800171a:	785b      	ldrb	r3, [r3, #1]
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <main+0x268>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001726:	211a      	movs	r1, #26
 8001728:	4825      	ldr	r0, [pc, #148]	; (80017c0 <main+0x2f8>)
 800172a:	f7fe ff09 	bl	8000540 <uartTransmit>
 800172e:	e003      	b.n	8001738 <main+0x270>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001730:	211c      	movs	r1, #28
 8001732:	4824      	ldr	r0, [pc, #144]	; (80017c4 <main+0x2fc>)
 8001734:	f7fe ff04 	bl	8000540 <uartTransmit>

	#define TESTBREMSDRUCKNO	"Test Bremsdruck normally open, default = 0\n"
	uartTransmit(TESTBREMSDRUCKNO, sizeof(TESTBREMSDRUCKNO));
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	4830      	ldr	r0, [pc, #192]	; (80017fc <main+0x334>)
 800173c:	f7fe ff00 	bl	8000540 <uartTransmit>
	if(system_in.Bremsdruck_NO == 1)
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <main+0x2f4>)
 8001742:	785b      	ldrb	r3, [r3, #1]
 8001744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <main+0x290>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 800174e:	211a      	movs	r1, #26
 8001750:	481b      	ldr	r0, [pc, #108]	; (80017c0 <main+0x2f8>)
 8001752:	f7fe fef5 	bl	8000540 <uartTransmit>
 8001756:	e003      	b.n	8001760 <main+0x298>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001758:	211c      	movs	r1, #28
 800175a:	481a      	ldr	r0, [pc, #104]	; (80017c4 <main+0x2fc>)
 800175c:	f7fe fef0 	bl	8000540 <uartTransmit>

	#define TESTBREMSDRUCKNC	"Test Bremsdruck normally connect, default = 0\n"
	uartTransmit(TESTBREMSDRUCKNC, sizeof(TESTBREMSDRUCKNC));
 8001760:	212f      	movs	r1, #47	; 0x2f
 8001762:	4827      	ldr	r0, [pc, #156]	; (8001800 <main+0x338>)
 8001764:	f7fe feec 	bl	8000540 <uartTransmit>
	if(system_in.Bremsdruck_NC == 1)
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <main+0x2f4>)
 800176a:	785b      	ldrb	r3, [r3, #1]
 800176c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <main+0x2b8>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001776:	211a      	movs	r1, #26
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <main+0x2f8>)
 800177a:	f7fe fee1 	bl	8000540 <uartTransmit>
 800177e:	e003      	b.n	8001788 <main+0x2c0>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001780:	211c      	movs	r1, #28
 8001782:	4810      	ldr	r0, [pc, #64]	; (80017c4 <main+0x2fc>)
 8001784:	f7fe fedc 	bl	8000540 <uartTransmit>

	#define KOMFORTIN			"\n\nKomfort Eingaenge\n\n"
  	uartTransmit(KOMFORTIN, sizeof(KOMFORTIN));
 8001788:	2116      	movs	r1, #22
 800178a:	481e      	ldr	r0, [pc, #120]	; (8001804 <main+0x33c>)
 800178c:	f7fe fed8 	bl	8000540 <uartTransmit>

	#define TESTASR1			"Test ASR1, default = 0\n"
  	uartTransmit(TESTASR1, sizeof(TESTASR1));
 8001790:	2118      	movs	r1, #24
 8001792:	481d      	ldr	r0, [pc, #116]	; (8001808 <main+0x340>)
 8001794:	f7fe fed4 	bl	8000540 <uartTransmit>
  	if(komfort_in.ASR1 == 1)
 8001798:	4b1c      	ldr	r3, [pc, #112]	; (800180c <main+0x344>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d034      	beq.n	8001810 <main+0x348>
  		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80017a6:	211a      	movs	r1, #26
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <main+0x2f8>)
 80017aa:	f7fe fec9 	bl	8000540 <uartTransmit>
 80017ae:	e033      	b.n	8001818 <main+0x350>
 80017b0:	08004bc4 	.word	0x08004bc4
 80017b4:	08004c00 	.word	0x08004c00
 80017b8:	08004c18 	.word	0x08004c18
 80017bc:	20000028 	.word	0x20000028
 80017c0:	08004c34 	.word	0x08004c34
 80017c4:	08004c50 	.word	0x08004c50
 80017c8:	08004c6c 	.word	0x08004c6c
 80017cc:	08004c88 	.word	0x08004c88
 80017d0:	08004cb0 	.word	0x08004cb0
 80017d4:	08004cdc 	.word	0x08004cdc
 80017d8:	08004cf8 	.word	0x08004cf8
 80017dc:	08004d18 	.word	0x08004d18
 80017e0:	08004d30 	.word	0x08004d30
 80017e4:	08004d4c 	.word	0x08004d4c
 80017e8:	08004d64 	.word	0x08004d64
 80017ec:	08004d84 	.word	0x08004d84
 80017f0:	08004da0 	.word	0x08004da0
 80017f4:	08004dbc 	.word	0x08004dbc
 80017f8:	08004dd8 	.word	0x08004dd8
 80017fc:	08004df4 	.word	0x08004df4
 8001800:	08004e20 	.word	0x08004e20
 8001804:	08004e50 	.word	0x08004e50
 8001808:	08004e68 	.word	0x08004e68
 800180c:	2000002c 	.word	0x2000002c
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001810:	211c      	movs	r1, #28
 8001812:	48b5      	ldr	r0, [pc, #724]	; (8001ae8 <main+0x620>)
 8001814:	f7fe fe94 	bl	8000540 <uartTransmit>

	#define TESTASR2			"Test ASR2, default = 0\n"
	uartTransmit(TESTASR1, sizeof(TESTASR1));
 8001818:	2118      	movs	r1, #24
 800181a:	48b4      	ldr	r0, [pc, #720]	; (8001aec <main+0x624>)
 800181c:	f7fe fe90 	bl	8000540 <uartTransmit>
	if(komfort_in.ASR2 == 1)
 8001820:	4bb3      	ldr	r3, [pc, #716]	; (8001af0 <main+0x628>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d004      	beq.n	8001838 <main+0x370>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 800182e:	211a      	movs	r1, #26
 8001830:	48b0      	ldr	r0, [pc, #704]	; (8001af4 <main+0x62c>)
 8001832:	f7fe fe85 	bl	8000540 <uartTransmit>
 8001836:	e003      	b.n	8001840 <main+0x378>
	else
	uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001838:	211c      	movs	r1, #28
 800183a:	48ab      	ldr	r0, [pc, #684]	; (8001ae8 <main+0x620>)
 800183c:	f7fe fe80 	bl	8000540 <uartTransmit>

	#define TESTECO				"Test ECO, default = 0\n"
	uartTransmit(TESTECO, sizeof(TESTECO));
 8001840:	2117      	movs	r1, #23
 8001842:	48ad      	ldr	r0, [pc, #692]	; (8001af8 <main+0x630>)
 8001844:	f7fe fe7c 	bl	8000540 <uartTransmit>
	if(komfort_in.ECO == 1)
 8001848:	4ba9      	ldr	r3, [pc, #676]	; (8001af0 <main+0x628>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <main+0x398>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001856:	211a      	movs	r1, #26
 8001858:	48a6      	ldr	r0, [pc, #664]	; (8001af4 <main+0x62c>)
 800185a:	f7fe fe71 	bl	8000540 <uartTransmit>
 800185e:	e003      	b.n	8001868 <main+0x3a0>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001860:	211c      	movs	r1, #28
 8001862:	48a1      	ldr	r0, [pc, #644]	; (8001ae8 <main+0x620>)
 8001864:	f7fe fe6c 	bl	8000540 <uartTransmit>

	#define TESTBCRSTIN			"Test BC_Rst_In, default = 0\n"
	uartTransmit(TESTBCRSTIN, sizeof(TESTBCRSTIN));
 8001868:	211d      	movs	r1, #29
 800186a:	48a4      	ldr	r0, [pc, #656]	; (8001afc <main+0x634>)
 800186c:	f7fe fe68 	bl	8000540 <uartTransmit>
	if(komfort_in.BC_Rst_In == 1)
 8001870:	4b9f      	ldr	r3, [pc, #636]	; (8001af0 <main+0x628>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d004      	beq.n	8001888 <main+0x3c0>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 800187e:	211a      	movs	r1, #26
 8001880:	489c      	ldr	r0, [pc, #624]	; (8001af4 <main+0x62c>)
 8001882:	f7fe fe5d 	bl	8000540 <uartTransmit>
 8001886:	e003      	b.n	8001890 <main+0x3c8>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001888:	211c      	movs	r1, #28
 800188a:	4897      	ldr	r0, [pc, #604]	; (8001ae8 <main+0x620>)
 800188c:	f7fe fe58 	bl	8000540 <uartTransmit>

	#define TESTBCUPIN			"Test BC_Up_In, default = 0\n"
	uartTransmit(TESTBCUPIN, sizeof(TESTBCUPIN));
 8001890:	211c      	movs	r1, #28
 8001892:	489b      	ldr	r0, [pc, #620]	; (8001b00 <main+0x638>)
 8001894:	f7fe fe54 	bl	8000540 <uartTransmit>
	if(komfort_in.BC_Up_In == 1)
 8001898:	4b95      	ldr	r3, [pc, #596]	; (8001af0 <main+0x628>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d004      	beq.n	80018b0 <main+0x3e8>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80018a6:	211a      	movs	r1, #26
 80018a8:	4892      	ldr	r0, [pc, #584]	; (8001af4 <main+0x62c>)
 80018aa:	f7fe fe49 	bl	8000540 <uartTransmit>
 80018ae:	e003      	b.n	80018b8 <main+0x3f0>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80018b0:	211c      	movs	r1, #28
 80018b2:	488d      	ldr	r0, [pc, #564]	; (8001ae8 <main+0x620>)
 80018b4:	f7fe fe44 	bl	8000540 <uartTransmit>

	#define TESTBCDOWNIN		"Test BC_Down_In, default = 0\n"
	uartTransmit(TESTBCDOWNIN, sizeof(TESTBCDOWNIN));
 80018b8:	211e      	movs	r1, #30
 80018ba:	4892      	ldr	r0, [pc, #584]	; (8001b04 <main+0x63c>)
 80018bc:	f7fe fe40 	bl	8000540 <uartTransmit>
	if(komfort_in.BC_Down_In == 1)
 80018c0:	4b8b      	ldr	r3, [pc, #556]	; (8001af0 <main+0x628>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d004      	beq.n	80018d8 <main+0x410>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80018ce:	211a      	movs	r1, #26
 80018d0:	4888      	ldr	r0, [pc, #544]	; (8001af4 <main+0x62c>)
 80018d2:	f7fe fe35 	bl	8000540 <uartTransmit>
 80018d6:	e003      	b.n	80018e0 <main+0x418>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80018d8:	211c      	movs	r1, #28
 80018da:	4883      	ldr	r0, [pc, #524]	; (8001ae8 <main+0x620>)
 80018dc:	f7fe fe30 	bl	8000540 <uartTransmit>

	#define TESTBAMOIN1			"Test BamoIn1, default = 1\n"
	uartTransmit(TESTBAMOIN1, sizeof(TESTBAMOIN1));
 80018e0:	211b      	movs	r1, #27
 80018e2:	4889      	ldr	r0, [pc, #548]	; (8001b08 <main+0x640>)
 80018e4:	f7fe fe2c 	bl	8000540 <uartTransmit>
	if(komfort_in.BamoIn1 != 1)
 80018e8:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <main+0x628>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d104      	bne.n	8001900 <main+0x438>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80018f6:	211a      	movs	r1, #26
 80018f8:	487e      	ldr	r0, [pc, #504]	; (8001af4 <main+0x62c>)
 80018fa:	f7fe fe21 	bl	8000540 <uartTransmit>
 80018fe:	e003      	b.n	8001908 <main+0x440>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001900:	211c      	movs	r1, #28
 8001902:	4879      	ldr	r0, [pc, #484]	; (8001ae8 <main+0x620>)
 8001904:	f7fe fe1c 	bl	8000540 <uartTransmit>

	#define TESTBAMOIN2			"Test BamoIn2, default = 1\n"
	uartTransmit(TESTBAMOIN2, sizeof(TESTBAMOIN2));
 8001908:	211b      	movs	r1, #27
 800190a:	4880      	ldr	r0, [pc, #512]	; (8001b0c <main+0x644>)
 800190c:	f7fe fe18 	bl	8000540 <uartTransmit>
	if(komfort_in.BamoIn2 != 1)
 8001910:	4b77      	ldr	r3, [pc, #476]	; (8001af0 <main+0x628>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d104      	bne.n	8001928 <main+0x460>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 800191e:	211a      	movs	r1, #26
 8001920:	4874      	ldr	r0, [pc, #464]	; (8001af4 <main+0x62c>)
 8001922:	f7fe fe0d 	bl	8000540 <uartTransmit>
 8001926:	e003      	b.n	8001930 <main+0x468>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001928:	211c      	movs	r1, #28
 800192a:	486f      	ldr	r0, [pc, #444]	; (8001ae8 <main+0x620>)
 800192c:	f7fe fe08 	bl	8000540 <uartTransmit>

	#define TESTENTER			"Test Enter, default = 0\n"
	uartTransmit(TESTENTER, sizeof(TESTENTER));
 8001930:	2119      	movs	r1, #25
 8001932:	4877      	ldr	r0, [pc, #476]	; (8001b10 <main+0x648>)
 8001934:	f7fe fe04 	bl	8000540 <uartTransmit>
	if(komfort_in.Enter == 1)
 8001938:	4b6d      	ldr	r3, [pc, #436]	; (8001af0 <main+0x628>)
 800193a:	785b      	ldrb	r3, [r3, #1]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <main+0x488>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001946:	211a      	movs	r1, #26
 8001948:	486a      	ldr	r0, [pc, #424]	; (8001af4 <main+0x62c>)
 800194a:	f7fe fdf9 	bl	8000540 <uartTransmit>
 800194e:	e003      	b.n	8001958 <main+0x490>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001950:	211c      	movs	r1, #28
 8001952:	4865      	ldr	r0, [pc, #404]	; (8001ae8 <main+0x620>)
 8001954:	f7fe fdf4 	bl	8000540 <uartTransmit>

	#define TESTOUTA			"Test OutB, default = 0\n"
	uartTransmit(TESTOUTA, sizeof(TESTOUTA));
 8001958:	2118      	movs	r1, #24
 800195a:	486e      	ldr	r0, [pc, #440]	; (8001b14 <main+0x64c>)
 800195c:	f7fe fdf0 	bl	8000540 <uartTransmit>
	if(komfort_in.OutA == 1)
 8001960:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <main+0x628>)
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d004      	beq.n	8001978 <main+0x4b0>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 800196e:	211a      	movs	r1, #26
 8001970:	4860      	ldr	r0, [pc, #384]	; (8001af4 <main+0x62c>)
 8001972:	f7fe fde5 	bl	8000540 <uartTransmit>
 8001976:	e003      	b.n	8001980 <main+0x4b8>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001978:	211c      	movs	r1, #28
 800197a:	485b      	ldr	r0, [pc, #364]	; (8001ae8 <main+0x620>)
 800197c:	f7fe fde0 	bl	8000540 <uartTransmit>

	#define TESTOUTB			"Test OutB, default = 0\n"
	uartTransmit(TESTOUTB, sizeof(TESTOUTB));
 8001980:	2118      	movs	r1, #24
 8001982:	4864      	ldr	r0, [pc, #400]	; (8001b14 <main+0x64c>)
 8001984:	f7fe fddc 	bl	8000540 <uartTransmit>
	if(komfort_in.OutB == 1)
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <main+0x628>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <main+0x4d8>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001996:	211a      	movs	r1, #26
 8001998:	4856      	ldr	r0, [pc, #344]	; (8001af4 <main+0x62c>)
 800199a:	f7fe fdd1 	bl	8000540 <uartTransmit>
 800199e:	e003      	b.n	80019a8 <main+0x4e0>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80019a0:	211c      	movs	r1, #28
 80019a2:	4851      	ldr	r0, [pc, #324]	; (8001ae8 <main+0x620>)
 80019a4:	f7fe fdcc 	bl	8000540 <uartTransmit>

	#define TESTGRA1			"Test GRA1, default = 0\n"
	uartTransmit(TESTGRA1, sizeof(TESTGRA1));
 80019a8:	2118      	movs	r1, #24
 80019aa:	485b      	ldr	r0, [pc, #364]	; (8001b18 <main+0x650>)
 80019ac:	f7fe fdc8 	bl	8000540 <uartTransmit>
	if(komfort_in.GRA1 == 1)
 80019b0:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <main+0x628>)
 80019b2:	785b      	ldrb	r3, [r3, #1]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <main+0x500>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80019be:	211a      	movs	r1, #26
 80019c0:	484c      	ldr	r0, [pc, #304]	; (8001af4 <main+0x62c>)
 80019c2:	f7fe fdbd 	bl	8000540 <uartTransmit>
 80019c6:	e003      	b.n	80019d0 <main+0x508>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80019c8:	211c      	movs	r1, #28
 80019ca:	4847      	ldr	r0, [pc, #284]	; (8001ae8 <main+0x620>)
 80019cc:	f7fe fdb8 	bl	8000540 <uartTransmit>

	#define TESTGRA2			"Test GRA2, default = 0\n"
	uartTransmit(TESTGRA2, sizeof(TESTGRA2));
 80019d0:	2118      	movs	r1, #24
 80019d2:	4852      	ldr	r0, [pc, #328]	; (8001b1c <main+0x654>)
 80019d4:	f7fe fdb4 	bl	8000540 <uartTransmit>
	if(komfort_in.GRA2 == 1)
 80019d8:	4b45      	ldr	r3, [pc, #276]	; (8001af0 <main+0x628>)
 80019da:	785b      	ldrb	r3, [r3, #1]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <main+0x528>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 80019e6:	211a      	movs	r1, #26
 80019e8:	4842      	ldr	r0, [pc, #264]	; (8001af4 <main+0x62c>)
 80019ea:	f7fe fda9 	bl	8000540 <uartTransmit>
 80019ee:	e003      	b.n	80019f8 <main+0x530>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 80019f0:	211c      	movs	r1, #28
 80019f2:	483d      	ldr	r0, [pc, #244]	; (8001ae8 <main+0x620>)
 80019f4:	f7fe fda4 	bl	8000540 <uartTransmit>

	#define TESTGRA3			"Test GRA3, default = 0\n"
	uartTransmit(TESTGRA3, sizeof(TESTGRA3));
 80019f8:	2118      	movs	r1, #24
 80019fa:	4849      	ldr	r0, [pc, #292]	; (8001b20 <main+0x658>)
 80019fc:	f7fe fda0 	bl	8000540 <uartTransmit>
	if(komfort_in.GRA3 == 1)
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <main+0x628>)
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d004      	beq.n	8001a18 <main+0x550>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001a0e:	211a      	movs	r1, #26
 8001a10:	4838      	ldr	r0, [pc, #224]	; (8001af4 <main+0x62c>)
 8001a12:	f7fe fd95 	bl	8000540 <uartTransmit>
 8001a16:	e003      	b.n	8001a20 <main+0x558>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001a18:	211c      	movs	r1, #28
 8001a1a:	4833      	ldr	r0, [pc, #204]	; (8001ae8 <main+0x620>)
 8001a1c:	f7fe fd90 	bl	8000540 <uartTransmit>

	#define TESTGRA4			"Test GRA4, default = 0\n"
	uartTransmit(TESTGRA4, sizeof(TESTGRA4));
 8001a20:	2118      	movs	r1, #24
 8001a22:	4840      	ldr	r0, [pc, #256]	; (8001b24 <main+0x65c>)
 8001a24:	f7fe fd8c 	bl	8000540 <uartTransmit>
	if(komfort_in.GRA4 == 1)
 8001a28:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <main+0x628>)
 8001a2a:	785b      	ldrb	r3, [r3, #1]
 8001a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <main+0x578>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001a36:	211a      	movs	r1, #26
 8001a38:	482e      	ldr	r0, [pc, #184]	; (8001af4 <main+0x62c>)
 8001a3a:	f7fe fd81 	bl	8000540 <uartTransmit>
 8001a3e:	e003      	b.n	8001a48 <main+0x580>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001a40:	211c      	movs	r1, #28
 8001a42:	4829      	ldr	r0, [pc, #164]	; (8001ae8 <main+0x620>)
 8001a44:	f7fe fd7c 	bl	8000540 <uartTransmit>

	#define TESTDURCHFLUSS		"Test Durchfluss, default = 1\n"
	uartTransmit(TESTDURCHFLUSS, sizeof(TESTDURCHFLUSS));
 8001a48:	211e      	movs	r1, #30
 8001a4a:	4837      	ldr	r0, [pc, #220]	; (8001b28 <main+0x660>)
 8001a4c:	f7fe fd78 	bl	8000540 <uartTransmit>
	if(komfort_in.Durchfluss != 1)
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <main+0x628>)
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d104      	bne.n	8001a68 <main+0x5a0>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001a5e:	211a      	movs	r1, #26
 8001a60:	4824      	ldr	r0, [pc, #144]	; (8001af4 <main+0x62c>)
 8001a62:	f7fe fd6d 	bl	8000540 <uartTransmit>
 8001a66:	e003      	b.n	8001a70 <main+0x5a8>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001a68:	211c      	movs	r1, #28
 8001a6a:	481f      	ldr	r0, [pc, #124]	; (8001ae8 <main+0x620>)
 8001a6c:	f7fe fd68 	bl	8000540 <uartTransmit>

	#define PEDALIN				"\n\nPedal Eingaenge\n\n"
	uartTransmit(PEDALIN, sizeof(PEDALIN));
 8001a70:	2114      	movs	r1, #20
 8001a72:	482e      	ldr	r0, [pc, #184]	; (8001b2c <main+0x664>)
 8001a74:	f7fe fd64 	bl	8000540 <uartTransmit>

	#define TESTEMERGENCY		"Test Emergency Run, default = 1\n"
	uartTransmit(TESTEMERGENCY, sizeof(TESTEMERGENCY));
 8001a78:	2121      	movs	r1, #33	; 0x21
 8001a7a:	482d      	ldr	r0, [pc, #180]	; (8001b30 <main+0x668>)
 8001a7c:	f7fe fd60 	bl	8000540 <uartTransmit>
	if(sdc_in.EmergencyRun != 1)
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <main+0x66c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d104      	bne.n	8001a98 <main+0x5d0>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001a8e:	211a      	movs	r1, #26
 8001a90:	4818      	ldr	r0, [pc, #96]	; (8001af4 <main+0x62c>)
 8001a92:	f7fe fd55 	bl	8000540 <uartTransmit>
 8001a96:	e003      	b.n	8001aa0 <main+0x5d8>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001a98:	211c      	movs	r1, #28
 8001a9a:	4813      	ldr	r0, [pc, #76]	; (8001ae8 <main+0x620>)
 8001a9c:	f7fe fd50 	bl	8000540 <uartTransmit>

	#define TESTSDC0			"Test SDC0, default = 1\n"
	uartTransmit(TESTSDC0, sizeof(TESTSDC0));
 8001aa0:	2118      	movs	r1, #24
 8001aa2:	4825      	ldr	r0, [pc, #148]	; (8001b38 <main+0x670>)
 8001aa4:	f7fe fd4c 	bl	8000540 <uartTransmit>
	if(sdc_in.SDC0 != 1)
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <main+0x66c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <main+0x5f8>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001ab6:	211a      	movs	r1, #26
 8001ab8:	480e      	ldr	r0, [pc, #56]	; (8001af4 <main+0x62c>)
 8001aba:	f7fe fd41 	bl	8000540 <uartTransmit>
 8001abe:	e003      	b.n	8001ac8 <main+0x600>
	else
	uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001ac0:	211c      	movs	r1, #28
 8001ac2:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <main+0x620>)
 8001ac4:	f7fe fd3c 	bl	8000540 <uartTransmit>

	#define TESTAKKUSDC			"Test Akku SDC, default = 1\n"
	uartTransmit(TESTAKKUSDC, sizeof(TESTAKKUSDC));
 8001ac8:	211c      	movs	r1, #28
 8001aca:	481c      	ldr	r0, [pc, #112]	; (8001b3c <main+0x674>)
 8001acc:	f7fe fd38 	bl	8000540 <uartTransmit>
	if(sdc_in.AkkuSDC != 1)
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <main+0x66c>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d130      	bne.n	8001b40 <main+0x678>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001ade:	211a      	movs	r1, #26
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <main+0x62c>)
 8001ae2:	f7fe fd2d 	bl	8000540 <uartTransmit>
 8001ae6:	e02f      	b.n	8001b48 <main+0x680>
 8001ae8:	08004c50 	.word	0x08004c50
 8001aec:	08004e68 	.word	0x08004e68
 8001af0:	2000002c 	.word	0x2000002c
 8001af4:	08004c34 	.word	0x08004c34
 8001af8:	08004e80 	.word	0x08004e80
 8001afc:	08004e98 	.word	0x08004e98
 8001b00:	08004eb8 	.word	0x08004eb8
 8001b04:	08004ed4 	.word	0x08004ed4
 8001b08:	08004ef4 	.word	0x08004ef4
 8001b0c:	08004f10 	.word	0x08004f10
 8001b10:	08004f2c 	.word	0x08004f2c
 8001b14:	08004f48 	.word	0x08004f48
 8001b18:	08004f60 	.word	0x08004f60
 8001b1c:	08004f78 	.word	0x08004f78
 8001b20:	08004f90 	.word	0x08004f90
 8001b24:	08004fa8 	.word	0x08004fa8
 8001b28:	08004fc0 	.word	0x08004fc0
 8001b2c:	08004fe0 	.word	0x08004fe0
 8001b30:	08004ff4 	.word	0x08004ff4
 8001b34:	20000030 	.word	0x20000030
 8001b38:	08005018 	.word	0x08005018
 8001b3c:	08005030 	.word	0x08005030
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001b40:	211c      	movs	r1, #28
 8001b42:	4816      	ldr	r0, [pc, #88]	; (8001b9c <main+0x6d4>)
 8001b44:	f7fe fcfc 	bl	8000540 <uartTransmit>

	#define TESTBTBSDC			"Test BTB SDC, default = 1\n"
	uartTransmit(TESTBTBSDC, sizeof(TESTBTBSDC));
 8001b48:	211b      	movs	r1, #27
 8001b4a:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <main+0x6d8>)
 8001b4c:	f7fe fcf8 	bl	8000540 <uartTransmit>
	if(sdc_in.BTB_SDC != 1)
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <main+0x6dc>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f003 0308 	and.w	r3, r3, #8
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d104      	bne.n	8001b68 <main+0x6a0>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001b5e:	211a      	movs	r1, #26
 8001b60:	4811      	ldr	r0, [pc, #68]	; (8001ba8 <main+0x6e0>)
 8001b62:	f7fe fced 	bl	8000540 <uartTransmit>
 8001b66:	e003      	b.n	8001b70 <main+0x6a8>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001b68:	211c      	movs	r1, #28
 8001b6a:	480c      	ldr	r0, [pc, #48]	; (8001b9c <main+0x6d4>)
 8001b6c:	f7fe fce8 	bl	8000540 <uartTransmit>

	#define TESTDCDCFAULT		"Test DCDC Fault, default = 1\n"
	uartTransmit(TESTDCDCFAULT, sizeof(TESTDCDCFAULT));
 8001b70:	211e      	movs	r1, #30
 8001b72:	480e      	ldr	r0, [pc, #56]	; (8001bac <main+0x6e4>)
 8001b74:	f7fe fce4 	bl	8000540 <uartTransmit>
	if(sdc_in.DCDC_Fault != 1)
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <main+0x6dc>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d104      	bne.n	8001b90 <main+0x6c8>
		uartTransmit(TASTERPRESSED, sizeof(TASTERPRESSED));
 8001b86:	211a      	movs	r1, #26
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <main+0x6e0>)
 8001b8a:	f7fe fcd9 	bl	8000540 <uartTransmit>
 8001b8e:	e003      	b.n	8001b98 <main+0x6d0>
	else
		uartTransmit(TASTERNOTPRESSED, sizeof(TASTERNOTPRESSED));
 8001b90:	211c      	movs	r1, #28
 8001b92:	4802      	ldr	r0, [pc, #8]	; (8001b9c <main+0x6d4>)
 8001b94:	f7fe fcd4 	bl	8000540 <uartTransmit>
  		Error_Handler();*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <main+0x6d0>
 8001b9a:	bf00      	nop
 8001b9c:	08004c50 	.word	0x08004c50
 8001ba0:	0800504c 	.word	0x0800504c
 8001ba4:	20000030 	.word	0x20000030
 8001ba8:	08004c34 	.word	0x08004c34
 8001bac:	08005068 	.word	0x08005068

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0b8      	sub	sp, #224	; 0xe0
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bba:	2234      	movs	r2, #52	; 0x34
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 fea0 	bl	8004904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	2290      	movs	r2, #144	; 0x90
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f002 fe91 	bl	8004904 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <SystemClock_Config+0x118>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a38      	ldr	r2, [pc, #224]	; (8001cc8 <SystemClock_Config+0x118>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <SystemClock_Config+0x118>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bfa:	4b34      	ldr	r3, [pc, #208]	; (8001ccc <SystemClock_Config+0x11c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c02:	4a32      	ldr	r2, [pc, #200]	; (8001ccc <SystemClock_Config+0x11c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <SystemClock_Config+0x11c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001c32:	2319      	movs	r3, #25
 8001c34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001c38:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c40:	2302      	movs	r3, #2
 8001c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c46:	2302      	movs	r3, #2
 8001c48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c50:	4618      	mov	r0, r3
 8001c52:	f001 f881 	bl	8002d58 <HAL_RCC_OscConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001c5c:	f000 f838 	bl	8001cd0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c60:	f001 f82a 	bl	8002cb8 <HAL_PWREx_EnableOverDrive>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001c6a:	f000 f831 	bl	8001cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c6e:	230f      	movs	r3, #15
 8001c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c74:	2302      	movs	r3, #2
 8001c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c8e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c92:	2103      	movs	r1, #3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f001 fb0d 	bl	80032b4 <HAL_RCC_ClockConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001ca0:	f000 f816 	bl	8001cd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f001 fcd5 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001cbc:	f000 f808 	bl	8001cd0 <Error_Handler>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	37e0      	adds	r7, #224	; 0xe0
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd4:	b672      	cpsid	i
}
 8001cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <Error_Handler+0x8>
	...

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_MspInit+0x44>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <HAL_MspInit+0x44>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_MspInit+0x44>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_MspInit+0x44>)
 8001d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d04:	6453      	str	r3, [r2, #68]	; 0x44
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_MspInit+0x44>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <NMI_Handler+0x4>

08001d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <MemManage_Handler+0x4>

08001d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d70:	f000 f8f2 	bl	8001f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <SystemInit+0x28>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <SystemInit+0x28>)
 8001d84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SystemInit+0x28>)
 8001d8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d92:	609a      	str	r2, [r3, #8]
#endif
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001daa:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <MX_USART2_UART_Init+0x5c>)
 8001dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001db0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dca:	220c      	movs	r2, #12
 8001dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_USART2_UART_Init+0x58>)
 8001de8:	f002 f860 	bl	8003eac <HAL_UART_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001df2:	f7ff ff6d 	bl	8001cd0 <Error_Handler>
  }

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200000a4 	.word	0x200000a4
 8001e00:	40004400 	.word	0x40004400

08001e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_UART_MspInit+0x7c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d127      	bne.n	8001e76 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <HAL_UART_MspInit+0x80>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <HAL_UART_MspInit+0x80>)
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_UART_MspInit+0x80>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_UART_MspInit+0x80>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a10      	ldr	r2, [pc, #64]	; (8001e84 <HAL_UART_MspInit+0x80>)
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_UART_MspInit+0x80>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8001e56:	2360      	movs	r3, #96	; 0x60
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e66:	2307      	movs	r3, #7
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4805      	ldr	r0, [pc, #20]	; (8001e88 <HAL_UART_MspInit+0x84>)
 8001e72:	f000 fd43 	bl	80028fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40004400 	.word	0x40004400
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020c00 	.word	0x40020c00

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e92:	e003      	b.n	8001e9c <LoopCopyDataInit>

08001e94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e9a:	3104      	adds	r1, #4

08001e9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e9c:	480b      	ldr	r0, [pc, #44]	; (8001ecc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ea0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ea2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ea4:	d3f6      	bcc.n	8001e94 <CopyDataInit>
  ldr  r2, =_sbss
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ea8:	e002      	b.n	8001eb0 <LoopFillZerobss>

08001eaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001eac:	f842 3b04 	str.w	r3, [r2], #4

08001eb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001eb4:	d3f9      	bcc.n	8001eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eb6:	f7ff ff5f 	bl	8001d78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f002 fce5 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff fb03 	bl	80014c8 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001ec8:	080050d8 	.word	0x080050d8
  ldr  r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ed0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001ed4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001ed8:	20000128 	.word	0x20000128

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>

08001ede <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee2:	2003      	movs	r0, #3
 8001ee4:	f000 fcd6 	bl	8002894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f000 f805 	bl	8001ef8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001eee:	f7ff fef5 	bl	8001cdc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_InitTick+0x54>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_InitTick+0x58>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fce3 	bl	80028e2 <HAL_SYSTICK_Config>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e00e      	b.n	8001f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b0f      	cmp	r3, #15
 8001f2a:	d80a      	bhi.n	8001f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	f04f 30ff 	mov.w	r0, #4294967295
 8001f34:	f000 fcb9 	bl	80028aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f38:	4a06      	ldr	r2, [pc, #24]	; (8001f54 <HAL_InitTick+0x5c>)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e000      	b.n	8001f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000008 	.word	0x20000008
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_IncTick+0x20>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_IncTick+0x24>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <HAL_IncTick+0x24>)
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000008 	.word	0x20000008
 8001f7c:	20000124 	.word	0x20000124

08001f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <HAL_GetTick+0x14>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	20000124 	.word	0x20000124

08001f98 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
 return __STM32F7xx_HAL_VERSION;
 8001f9c:	4b02      	ldr	r3, [pc, #8]	; (8001fa8 <HAL_GetHalVersion+0x10>)
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	01020800 	.word	0x01020800

08001fac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_GetREVID+0x14>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e0042000 	.word	0xe0042000

08001fc4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_GetDEVID+0x18>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e0042000 	.word	0xe0042000

08001fe0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_GetUIDw0+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	1ff0f420 	.word	0x1ff0f420

08001ff8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_GetUIDw1+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	1ff0f424 	.word	0x1ff0f424

08002010 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetUIDw2+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	1ff0f428 	.word	0x1ff0f428

08002028 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e031      	b.n	80020a2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe ff84 	bl	8000f54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d116      	bne.n	8002094 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <HAL_ADC_Init+0x84>)
 800206c:	4013      	ands	r3, r2
 800206e:	f043 0202 	orr.w	r2, r3, #2
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f964 	bl	8002344 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
 8002092:	e001      	b.n	8002098 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	ffffeefd 	.word	0xffffeefd

080020b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1c>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e12a      	b.n	8002322 <HAL_ADC_ConfigChannel+0x272>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b09      	cmp	r3, #9
 80020da:	d93a      	bls.n	8002152 <HAL_ADC_ConfigChannel+0xa2>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020e4:	d035      	beq.n	8002152 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68d9      	ldr	r1, [r3, #12]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	3b1e      	subs	r3, #30
 80020fc:	2207      	movs	r2, #7
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	400a      	ands	r2, r1
 800210a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a87      	ldr	r2, [pc, #540]	; (8002330 <HAL_ADC_ConfigChannel+0x280>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10a      	bne.n	800212c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68d9      	ldr	r1, [r3, #12]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	061a      	lsls	r2, r3, #24
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800212a:	e035      	b.n	8002198 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68d9      	ldr	r1, [r3, #12]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	4603      	mov	r3, r0
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4403      	add	r3, r0
 8002144:	3b1e      	subs	r3, #30
 8002146:	409a      	lsls	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002150:	e022      	b.n	8002198 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6919      	ldr	r1, [r3, #16]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	2207      	movs	r2, #7
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43da      	mvns	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	400a      	ands	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6919      	ldr	r1, [r3, #16]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b29b      	uxth	r3, r3
 8002186:	4618      	mov	r0, r3
 8002188:	4603      	mov	r3, r0
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4403      	add	r3, r0
 800218e:	409a      	lsls	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b06      	cmp	r3, #6
 800219e:	d824      	bhi.n	80021ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3b05      	subs	r3, #5
 80021b2:	221f      	movs	r2, #31
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43da      	mvns	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	400a      	ands	r2, r1
 80021c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	3b05      	subs	r3, #5
 80021dc:	fa00 f203 	lsl.w	r2, r0, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	635a      	str	r2, [r3, #52]	; 0x34
 80021e8:	e04c      	b.n	8002284 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d824      	bhi.n	800223c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b23      	subs	r3, #35	; 0x23
 8002204:	221f      	movs	r2, #31
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	400a      	ands	r2, r1
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b23      	subs	r3, #35	; 0x23
 800222e:	fa00 f203 	lsl.w	r2, r0, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
 800223a:	e023      	b.n	8002284 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b41      	subs	r3, #65	; 0x41
 800224e:	221f      	movs	r2, #31
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43da      	mvns	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	400a      	ands	r2, r1
 800225c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b29b      	uxth	r3, r3
 800226a:	4618      	mov	r0, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b41      	subs	r3, #65	; 0x41
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <HAL_ADC_ConfigChannel+0x284>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10a      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1f4>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002296:	d105      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002298:	4b27      	ldr	r3, [pc, #156]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a26      	ldr	r2, [pc, #152]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 800229e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <HAL_ADC_ConfigChannel+0x284>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d109      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x212>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d105      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 80022bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_ADC_ConfigChannel+0x284>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d125      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x268>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_ADC_ConfigChannel+0x280>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d003      	beq.n	80022de <HAL_ADC_ConfigChannel+0x22e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b11      	cmp	r3, #17
 80022dc:	d11c      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022de:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a15      	ldr	r2, [pc, #84]	; (8002338 <HAL_ADC_ConfigChannel+0x288>)
 80022e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a10      	ldr	r2, [pc, #64]	; (8002330 <HAL_ADC_ConfigChannel+0x280>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d111      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_ADC_ConfigChannel+0x28c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_ADC_ConfigChannel+0x290>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9a      	lsrs	r2, r3, #18
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800230a:	e002      	b.n	8002312 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	3b01      	subs	r3, #1
 8002310:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1f9      	bne.n	800230c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	10000012 	.word	0x10000012
 8002334:	40012000 	.word	0x40012000
 8002338:	40012300 	.word	0x40012300
 800233c:	20000000 	.word	0x20000000
 8002340:	431bde83 	.word	0x431bde83

08002344 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800234c:	4b78      	ldr	r3, [pc, #480]	; (8002530 <ADC_Init+0x1ec>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	4a77      	ldr	r2, [pc, #476]	; (8002530 <ADC_Init+0x1ec>)
 8002352:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002356:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002358:	4b75      	ldr	r3, [pc, #468]	; (8002530 <ADC_Init+0x1ec>)
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4973      	ldr	r1, [pc, #460]	; (8002530 <ADC_Init+0x1ec>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	021a      	lsls	r2, r3, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002398:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	4a58      	ldr	r2, [pc, #352]	; (8002534 <ADC_Init+0x1f0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d022      	beq.n	800241e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6899      	ldr	r1, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	e00f      	b.n	800243e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800242c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800243c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0202 	bic.w	r2, r2, #2
 800244c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6899      	ldr	r1, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	005a      	lsls	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800247a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800248a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	3b01      	subs	r3, #1
 8002498:	035a      	lsls	r2, r3, #13
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	e007      	b.n	80024b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	051a      	lsls	r2, r3, #20
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6899      	ldr	r1, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024f6:	025a      	lsls	r2, r3, #9
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	029a      	lsls	r2, r3, #10
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	40012300 	.word	0x40012300
 8002534:	0f000001 	.word	0x0f000001

08002538 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0ed      	b.n	8002726 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe fda6 	bl	80010a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0202 	bic.w	r2, r2, #2
 800256a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800256c:	f7ff fd08 	bl	8001f80 <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002572:	e012      	b.n	800259a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002574:	f7ff fd04 	bl	8001f80 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d90b      	bls.n	800259a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2205      	movs	r2, #5
 8002592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0c5      	b.n	8002726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e5      	bne.n	8002574 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b8:	f7ff fce2 	bl	8001f80 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025be:	e012      	b.n	80025e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c0:	f7ff fcde 	bl	8001f80 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b0a      	cmp	r3, #10
 80025cc:	d90b      	bls.n	80025e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e09f      	b.n	8002726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0e5      	beq.n	80025c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e1b      	ldrb	r3, [r3, #24]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d108      	bne.n	800260e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e007      	b.n	800261e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7e5b      	ldrb	r3, [r3, #25]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e007      	b.n	8002648 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002646:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7e9b      	ldrb	r3, [r3, #26]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d108      	bne.n	8002662 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e007      	b.n	8002672 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0220 	bic.w	r2, r2, #32
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7edb      	ldrb	r3, [r3, #27]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d108      	bne.n	800268c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0210 	bic.w	r2, r2, #16
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e007      	b.n	800269c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0210 	orr.w	r2, r2, #16
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7f1b      	ldrb	r3, [r3, #28]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d108      	bne.n	80026b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0208 	orr.w	r2, r2, #8
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e007      	b.n	80026c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7f5b      	ldrb	r3, [r3, #29]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0204 	orr.w	r2, r2, #4
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e007      	b.n	80026f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	ea42 0103 	orr.w	r1, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <__NVIC_SetPriorityGrouping+0x40>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800274c:	4013      	ands	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	; (8002770 <__NVIC_SetPriorityGrouping+0x40>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00
 8002774:	05fa0000 	.word	0x05fa0000

08002778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <__NVIC_GetPriorityGrouping+0x18>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0a1b      	lsrs	r3, r3, #8
 8002782:	f003 0307 	and.w	r3, r3, #7
}
 8002786:	4618      	mov	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db0a      	blt.n	80027be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	490c      	ldr	r1, [pc, #48]	; (80027e0 <__NVIC_SetPriority+0x4c>)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	0112      	lsls	r2, r2, #4
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	440b      	add	r3, r1
 80027b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027bc:	e00a      	b.n	80027d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	4908      	ldr	r1, [pc, #32]	; (80027e4 <__NVIC_SetPriority+0x50>)
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	3b04      	subs	r3, #4
 80027cc:	0112      	lsls	r2, r2, #4
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	440b      	add	r3, r1
 80027d2:	761a      	strb	r2, [r3, #24]
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	e000e100 	.word	0xe000e100
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b089      	sub	sp, #36	; 0x24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f1c3 0307 	rsb	r3, r3, #7
 8002802:	2b04      	cmp	r3, #4
 8002804:	bf28      	it	cs
 8002806:	2304      	movcs	r3, #4
 8002808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3304      	adds	r3, #4
 800280e:	2b06      	cmp	r3, #6
 8002810:	d902      	bls.n	8002818 <NVIC_EncodePriority+0x30>
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	3b03      	subs	r3, #3
 8002816:	e000      	b.n	800281a <NVIC_EncodePriority+0x32>
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	401a      	ands	r2, r3
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002830:	f04f 31ff 	mov.w	r1, #4294967295
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	fa01 f303 	lsl.w	r3, r1, r3
 800283a:	43d9      	mvns	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	4313      	orrs	r3, r2
         );
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002860:	d301      	bcc.n	8002866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002862:	2301      	movs	r3, #1
 8002864:	e00f      	b.n	8002886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002866:	4a0a      	ldr	r2, [pc, #40]	; (8002890 <SysTick_Config+0x40>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286e:	210f      	movs	r1, #15
 8002870:	f04f 30ff 	mov.w	r0, #4294967295
 8002874:	f7ff ff8e 	bl	8002794 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <SysTick_Config+0x40>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <SysTick_Config+0x40>)
 8002880:	2207      	movs	r2, #7
 8002882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	e000e010 	.word	0xe000e010

08002894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff47 	bl	8002730 <__NVIC_SetPriorityGrouping>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028bc:	f7ff ff5c 	bl	8002778 <__NVIC_GetPriorityGrouping>
 80028c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7ff ff8e 	bl	80027e8 <NVIC_EncodePriority>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff5d 	bl	8002794 <__NVIC_SetPriority>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ffb0 	bl	8002850 <SysTick_Config>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b089      	sub	sp, #36	; 0x24
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e175      	b.n	8002c08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 8164 	bne.w	8002c02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d00b      	beq.n	800295a <HAL_GPIO_Init+0x5e>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d007      	beq.n	800295a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800294e:	2b11      	cmp	r3, #17
 8002950:	d003      	beq.n	800295a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b12      	cmp	r3, #18
 8002958:	d130      	bne.n	80029bc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	2203      	movs	r2, #3
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002990:	2201      	movs	r2, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f003 0201 	and.w	r2, r3, #1
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x100>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b12      	cmp	r3, #18
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80be 	beq.w	8002c02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	4a65      	ldr	r2, [pc, #404]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a90:	6453      	str	r3, [r2, #68]	; 0x44
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_GPIO_Init+0x324>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a9e:	4a61      	ldr	r2, [pc, #388]	; (8002c24 <HAL_GPIO_Init+0x328>)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a58      	ldr	r2, [pc, #352]	; (8002c28 <HAL_GPIO_Init+0x32c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d037      	beq.n	8002b3a <HAL_GPIO_Init+0x23e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a57      	ldr	r2, [pc, #348]	; (8002c2c <HAL_GPIO_Init+0x330>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d031      	beq.n	8002b36 <HAL_GPIO_Init+0x23a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a56      	ldr	r2, [pc, #344]	; (8002c30 <HAL_GPIO_Init+0x334>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02b      	beq.n	8002b32 <HAL_GPIO_Init+0x236>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_GPIO_Init+0x338>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d025      	beq.n	8002b2e <HAL_GPIO_Init+0x232>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a54      	ldr	r2, [pc, #336]	; (8002c38 <HAL_GPIO_Init+0x33c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01f      	beq.n	8002b2a <HAL_GPIO_Init+0x22e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a53      	ldr	r2, [pc, #332]	; (8002c3c <HAL_GPIO_Init+0x340>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d019      	beq.n	8002b26 <HAL_GPIO_Init+0x22a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <HAL_GPIO_Init+0x344>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_GPIO_Init+0x226>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a51      	ldr	r2, [pc, #324]	; (8002c44 <HAL_GPIO_Init+0x348>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00d      	beq.n	8002b1e <HAL_GPIO_Init+0x222>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_GPIO_Init+0x34c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d007      	beq.n	8002b1a <HAL_GPIO_Init+0x21e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a4f      	ldr	r2, [pc, #316]	; (8002c4c <HAL_GPIO_Init+0x350>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <HAL_GPIO_Init+0x21a>
 8002b12:	2309      	movs	r3, #9
 8002b14:	e012      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b16:	230a      	movs	r3, #10
 8002b18:	e010      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	e00e      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b1e:	2307      	movs	r3, #7
 8002b20:	e00c      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b22:	2306      	movs	r3, #6
 8002b24:	e00a      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b26:	2305      	movs	r3, #5
 8002b28:	e008      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e004      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e002      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_GPIO_Init+0x240>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	f002 0203 	and.w	r2, r2, #3
 8002b42:	0092      	lsls	r2, r2, #2
 8002b44:	4093      	lsls	r3, r2
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b4c:	4935      	ldr	r1, [pc, #212]	; (8002c24 <HAL_GPIO_Init+0x328>)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	3302      	adds	r3, #2
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4013      	ands	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b7e:	4a34      	ldr	r2, [pc, #208]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba8:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_GPIO_Init+0x354>)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3301      	adds	r3, #1
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	2b0f      	cmp	r3, #15
 8002c0c:	f67f ae86 	bls.w	800291c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c10:	bf00      	nop
 8002c12:	bf00      	nop
 8002c14:	3724      	adds	r7, #36	; 0x24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40013800 	.word	0x40013800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40020800 	.word	0x40020800
 8002c34:	40020c00 	.word	0x40020c00
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40021400 	.word	0x40021400
 8002c40:	40021800 	.word	0x40021800
 8002c44:	40021c00 	.word	0x40021c00
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40022400 	.word	0x40022400
 8002c50:	40013c00 	.word	0x40013c00

08002c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	887b      	ldrh	r3, [r7, #2]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e001      	b.n	8002c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
 8002c90:	4613      	mov	r3, r2
 8002c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c94:	787b      	ldrb	r3, [r7, #1]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ca0:	e003      	b.n	8002caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002ca2:	887b      	ldrh	r3, [r7, #2]
 8002ca4:	041a      	lsls	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	619a      	str	r2, [r3, #24]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc2:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cda:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce6:	f7ff f94b 	bl	8001f80 <HAL_GetTick>
 8002cea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cec:	e009      	b.n	8002d02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cee:	f7ff f947 	bl	8001f80 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfc:	d901      	bls.n	8002d02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e022      	b.n	8002d48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0e:	d1ee      	bne.n	8002cee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d1c:	f7ff f930 	bl	8001f80 <HAL_GetTick>
 8002d20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d22:	e009      	b.n	8002d38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d24:	f7ff f92c 	bl	8001f80 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d32:	d901      	bls.n	8002d38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e007      	b.n	8002d48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d44:	d1ee      	bne.n	8002d24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40007000 	.word	0x40007000

08002d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e29b      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8087 	beq.w	8002e8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d7c:	4b96      	ldr	r3, [pc, #600]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d00c      	beq.n	8002da2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d88:	4b93      	ldr	r3, [pc, #588]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d112      	bne.n	8002dba <HAL_RCC_OscConfig+0x62>
 8002d94:	4b90      	ldr	r3, [pc, #576]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002da0:	d10b      	bne.n	8002dba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da2:	4b8d      	ldr	r3, [pc, #564]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d06c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x130>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d168      	bne.n	8002e88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e275      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x7a>
 8002dc4:	4b84      	ldr	r3, [pc, #528]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a83      	ldr	r2, [pc, #524]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	e02e      	b.n	8002e30 <HAL_RCC_OscConfig+0xd8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x9c>
 8002dda:	4b7f      	ldr	r3, [pc, #508]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7e      	ldr	r2, [pc, #504]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b7c      	ldr	r3, [pc, #496]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a7b      	ldr	r2, [pc, #492]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e01d      	b.n	8002e30 <HAL_RCC_OscConfig+0xd8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0xc0>
 8002dfe:	4b76      	ldr	r3, [pc, #472]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a75      	ldr	r2, [pc, #468]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b73      	ldr	r3, [pc, #460]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a72      	ldr	r2, [pc, #456]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0xd8>
 8002e18:	4b6f      	ldr	r3, [pc, #444]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6e      	ldr	r2, [pc, #440]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b6c      	ldr	r3, [pc, #432]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a6b      	ldr	r2, [pc, #428]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e38:	f7ff f8a2 	bl	8001f80 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7ff f89e 	bl	8001f80 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e229      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0xe8>
 8002e5e:	e014      	b.n	8002e8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7ff f88e 	bl	8001f80 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e68:	f7ff f88a 	bl	8001f80 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e215      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	4b57      	ldr	r3, [pc, #348]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x110>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d069      	beq.n	8002f6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e96:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea2:	4b4d      	ldr	r3, [pc, #308]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d11c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x190>
 8002eae:	4b4a      	ldr	r3, [pc, #296]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x17a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e1e9      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	493d      	ldr	r1, [pc, #244]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	e040      	b.n	8002f6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d023      	beq.n	8002f38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef0:	4b39      	ldr	r3, [pc, #228]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a38      	ldr	r2, [pc, #224]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7ff f840 	bl	8001f80 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f04:	f7ff f83c 	bl	8001f80 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e1c7      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4929      	ldr	r1, [pc, #164]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
 8002f36:	e018      	b.n	8002f6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7ff f81c 	bl	8001f80 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4c:	f7ff f818 	bl	8001f80 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e1a3      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d038      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d019      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7fe fff9 	bl	8001f80 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fe fff5 	bl	8001f80 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e180      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x23a>
 8002fb0:	e01a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	4a08      	ldr	r2, [pc, #32]	; (8002fd8 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe ffdf 	bl	8001f80 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc6:	f7fe ffdb 	bl	8001f80 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d903      	bls.n	8002fdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e166      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
 8002fd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	4b92      	ldr	r3, [pc, #584]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8002fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ee      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80a4 	beq.w	800313e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff6:	4b8c      	ldr	r3, [pc, #560]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10d      	bne.n	800301e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4b89      	ldr	r3, [pc, #548]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a88      	ldr	r2, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b86      	ldr	r3, [pc, #536]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301e:	4b83      	ldr	r3, [pc, #524]	; (800322c <HAL_RCC_OscConfig+0x4d4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800302a:	4b80      	ldr	r3, [pc, #512]	; (800322c <HAL_RCC_OscConfig+0x4d4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7f      	ldr	r2, [pc, #508]	; (800322c <HAL_RCC_OscConfig+0x4d4>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003036:	f7fe ffa3 	bl	8001f80 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fe ff9f 	bl	8001f80 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b64      	cmp	r3, #100	; 0x64
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e12a      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003050:	4b76      	ldr	r3, [pc, #472]	; (800322c <HAL_RCC_OscConfig+0x4d4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x31a>
 8003064:	4b70      	ldr	r3, [pc, #448]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003068:	4a6f      	ldr	r2, [pc, #444]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	e02d      	b.n	80030ce <HAL_RCC_OscConfig+0x376>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x33c>
 800307a:	4b6b      	ldr	r3, [pc, #428]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	4a6a      	ldr	r2, [pc, #424]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	6713      	str	r3, [r2, #112]	; 0x70
 8003086:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308a:	4a67      	ldr	r2, [pc, #412]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	6713      	str	r3, [r2, #112]	; 0x70
 8003092:	e01c      	b.n	80030ce <HAL_RCC_OscConfig+0x376>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b05      	cmp	r3, #5
 800309a:	d10c      	bne.n	80030b6 <HAL_RCC_OscConfig+0x35e>
 800309c:	4b62      	ldr	r3, [pc, #392]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	4a61      	ldr	r2, [pc, #388]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	6713      	str	r3, [r2, #112]	; 0x70
 80030a8:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80030aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ac:	4a5e      	ldr	r2, [pc, #376]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6713      	str	r3, [r2, #112]	; 0x70
 80030b4:	e00b      	b.n	80030ce <HAL_RCC_OscConfig+0x376>
 80030b6:	4b5c      	ldr	r3, [pc, #368]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a5b      	ldr	r2, [pc, #364]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
 80030c2:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	f023 0304 	bic.w	r3, r3, #4
 80030cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d015      	beq.n	8003102 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7fe ff53 	bl	8001f80 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe ff4f 	bl	8001f80 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0d8      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f4:	4b4c      	ldr	r3, [pc, #304]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ee      	beq.n	80030de <HAL_RCC_OscConfig+0x386>
 8003100:	e014      	b.n	800312c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003102:	f7fe ff3d 	bl	8001f80 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7fe ff39 	bl	8001f80 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0c2      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003120:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ee      	bne.n	800310a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d105      	bne.n	800313e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80ae 	beq.w	80032a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003148:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d06d      	beq.n	8003230 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d14b      	bne.n	80031f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315c:	4b32      	ldr	r3, [pc, #200]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a31      	ldr	r2, [pc, #196]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fe ff0a 	bl	8001f80 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe ff06 	bl	8001f80 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e091      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b29      	ldr	r3, [pc, #164]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	019b      	lsls	r3, r3, #6
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	3b01      	subs	r3, #1
 80031a8:	041b      	lsls	r3, r3, #16
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	071b      	lsls	r3, r3, #28
 80031ba:	491b      	ldr	r1, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a18      	ldr	r2, [pc, #96]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80031c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fe fed8 	bl	8001f80 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fe fed4 	bl	8001f80 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e05f      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x47c>
 80031f2:	e057      	b.n	80032a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0b      	ldr	r2, [pc, #44]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 80031fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe febe 	bl	8001f80 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe feba 	bl	8001f80 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e045      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_RCC_OscConfig+0x4d0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x4b0>
 8003226:	e03d      	b.n	80032a4 <HAL_RCC_OscConfig+0x54c>
 8003228:	40023800 	.word	0x40023800
 800322c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003230:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <HAL_RCC_OscConfig+0x558>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d030      	beq.n	80032a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d129      	bne.n	80032a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d122      	bne.n	80032a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003260:	4013      	ands	r3, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003266:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003268:	4293      	cmp	r3, r2
 800326a:	d119      	bne.n	80032a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	3b01      	subs	r3, #1
 800327a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d10f      	bne.n	80032a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0d0      	b.n	800346e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032cc:	4b6a      	ldr	r3, [pc, #424]	; (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d910      	bls.n	80032fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b67      	ldr	r3, [pc, #412]	; (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 020f 	bic.w	r2, r3, #15
 80032e2:	4965      	ldr	r1, [pc, #404]	; (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b63      	ldr	r3, [pc, #396]	; (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0b8      	b.n	800346e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003314:	4b59      	ldr	r3, [pc, #356]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a58      	ldr	r2, [pc, #352]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 800331a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800331e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800332c:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003336:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003338:	4b50      	ldr	r3, [pc, #320]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	494d      	ldr	r1, [pc, #308]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d040      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b47      	ldr	r3, [pc, #284]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d115      	bne.n	8003396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e07f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d107      	bne.n	8003386 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003376:	4b41      	ldr	r3, [pc, #260]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d109      	bne.n	8003396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e073      	b.n	800346e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e06b      	b.n	800346e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003396:	4b39      	ldr	r3, [pc, #228]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 0203 	bic.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	4936      	ldr	r1, [pc, #216]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a8:	f7fe fdea 	bl	8001f80 <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b0:	f7fe fde6 	bl	8001f80 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e053      	b.n	800346e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c6:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 020c 	and.w	r2, r3, #12
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d1eb      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d210      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e6:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 020f 	bic.w	r2, r3, #15
 80033ee:	4922      	ldr	r1, [pc, #136]	; (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b20      	ldr	r3, [pc, #128]	; (8003478 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e032      	b.n	800346e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4916      	ldr	r1, [pc, #88]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	490e      	ldr	r1, [pc, #56]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003446:	f000 f821 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_ClockConfig+0x1c8>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	490a      	ldr	r1, [pc, #40]	; (8003480 <HAL_RCC_ClockConfig+0x1cc>)
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a09      	ldr	r2, [pc, #36]	; (8003484 <HAL_RCC_ClockConfig+0x1d0>)
 8003460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_RCC_ClockConfig+0x1d4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fd46 	bl	8001ef8 <HAL_InitTick>

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023c00 	.word	0x40023c00
 800347c:	40023800 	.word	0x40023800
 8003480:	08005088 	.word	0x08005088
 8003484:	20000000 	.word	0x20000000
 8003488:	20000004 	.word	0x20000004

0800348c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003492:	2100      	movs	r1, #0
 8003494:	6079      	str	r1, [r7, #4]
 8003496:	2100      	movs	r1, #0
 8003498:	60f9      	str	r1, [r7, #12]
 800349a:	2100      	movs	r1, #0
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800349e:	2100      	movs	r1, #0
 80034a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a2:	4952      	ldr	r1, [pc, #328]	; (80035ec <HAL_RCC_GetSysClockFreq+0x160>)
 80034a4:	6889      	ldr	r1, [r1, #8]
 80034a6:	f001 010c 	and.w	r1, r1, #12
 80034aa:	2908      	cmp	r1, #8
 80034ac:	d00d      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x3e>
 80034ae:	2908      	cmp	r1, #8
 80034b0:	f200 8094 	bhi.w	80035dc <HAL_RCC_GetSysClockFreq+0x150>
 80034b4:	2900      	cmp	r1, #0
 80034b6:	d002      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x32>
 80034b8:	2904      	cmp	r1, #4
 80034ba:	d003      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x38>
 80034bc:	e08e      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034be:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80034c0:	60bb      	str	r3, [r7, #8]
      break;
 80034c2:	e08e      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c4:	4b4b      	ldr	r3, [pc, #300]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80034c6:	60bb      	str	r3, [r7, #8]
      break;
 80034c8:	e08b      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ca:	4948      	ldr	r1, [pc, #288]	; (80035ec <HAL_RCC_GetSysClockFreq+0x160>)
 80034cc:	6849      	ldr	r1, [r1, #4]
 80034ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80034d2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034d4:	4945      	ldr	r1, [pc, #276]	; (80035ec <HAL_RCC_GetSysClockFreq+0x160>)
 80034d6:	6849      	ldr	r1, [r1, #4]
 80034d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80034dc:	2900      	cmp	r1, #0
 80034de:	d024      	beq.n	800352a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e0:	4942      	ldr	r1, [pc, #264]	; (80035ec <HAL_RCC_GetSysClockFreq+0x160>)
 80034e2:	6849      	ldr	r1, [r1, #4]
 80034e4:	0989      	lsrs	r1, r1, #6
 80034e6:	4608      	mov	r0, r1
 80034e8:	f04f 0100 	mov.w	r1, #0
 80034ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80034f0:	f04f 0500 	mov.w	r5, #0
 80034f4:	ea00 0204 	and.w	r2, r0, r4
 80034f8:	ea01 0305 	and.w	r3, r1, r5
 80034fc:	493d      	ldr	r1, [pc, #244]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80034fe:	fb01 f003 	mul.w	r0, r1, r3
 8003502:	2100      	movs	r1, #0
 8003504:	fb01 f102 	mul.w	r1, r1, r2
 8003508:	1844      	adds	r4, r0, r1
 800350a:	493a      	ldr	r1, [pc, #232]	; (80035f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800350c:	fba2 0101 	umull	r0, r1, r2, r1
 8003510:	1863      	adds	r3, r4, r1
 8003512:	4619      	mov	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	461a      	mov	r2, r3
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	f7fc fe94 	bl	8000248 <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e04a      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352a:	4b30      	ldr	r3, [pc, #192]	; (80035ec <HAL_RCC_GetSysClockFreq+0x160>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	099b      	lsrs	r3, r3, #6
 8003530:	461a      	mov	r2, r3
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	f240 10ff 	movw	r0, #511	; 0x1ff
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	ea02 0400 	and.w	r4, r2, r0
 8003542:	ea03 0501 	and.w	r5, r3, r1
 8003546:	4620      	mov	r0, r4
 8003548:	4629      	mov	r1, r5
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	014b      	lsls	r3, r1, #5
 8003554:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003558:	0142      	lsls	r2, r0, #5
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	1b00      	subs	r0, r0, r4
 8003560:	eb61 0105 	sbc.w	r1, r1, r5
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	018b      	lsls	r3, r1, #6
 800356e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003572:	0182      	lsls	r2, r0, #6
 8003574:	1a12      	subs	r2, r2, r0
 8003576:	eb63 0301 	sbc.w	r3, r3, r1
 800357a:	f04f 0000 	mov.w	r0, #0
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	00d9      	lsls	r1, r3, #3
 8003584:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003588:	00d0      	lsls	r0, r2, #3
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	1912      	adds	r2, r2, r4
 8003590:	eb45 0303 	adc.w	r3, r5, r3
 8003594:	f04f 0000 	mov.w	r0, #0
 8003598:	f04f 0100 	mov.w	r1, #0
 800359c:	0299      	lsls	r1, r3, #10
 800359e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035a2:	0290      	lsls	r0, r2, #10
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	461a      	mov	r2, r3
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	f7fc fe48 	bl	8000248 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <HAL_RCC_GetSysClockFreq+0x160>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	60bb      	str	r3, [r7, #8]
      break;
 80035da:	e002      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80035de:	60bb      	str	r3, [r7, #8]
      break;
 80035e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e2:	68bb      	ldr	r3, [r7, #8]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bdb0      	pop	{r4, r5, r7, pc}
 80035ec:	40023800 	.word	0x40023800
 80035f0:	00f42400 	.word	0x00f42400
 80035f4:	017d7840 	.word	0x017d7840

080035f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035fc:	4b03      	ldr	r3, [pc, #12]	; (800360c <HAL_RCC_GetHCLKFreq+0x14>)
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	20000000 	.word	0x20000000

08003610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003614:	f7ff fff0 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003618:	4602      	mov	r2, r0
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	0a9b      	lsrs	r3, r3, #10
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	4903      	ldr	r1, [pc, #12]	; (8003634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003626:	5ccb      	ldrb	r3, [r1, r3]
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40023800 	.word	0x40023800
 8003634:	08005098 	.word	0x08005098

08003638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800363c:	f7ff ffdc 	bl	80035f8 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	0b5b      	lsrs	r3, r3, #13
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4903      	ldr	r1, [pc, #12]	; (800365c <HAL_RCC_GetPCLK2Freq+0x24>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40023800 	.word	0x40023800
 800365c:	08005098 	.word	0x08005098

08003660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003678:	2300      	movs	r3, #0
 800367a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d012      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003688:	4b69      	ldr	r3, [pc, #420]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a68      	ldr	r2, [pc, #416]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003692:	6093      	str	r3, [r2, #8]
 8003694:	4b66      	ldr	r3, [pc, #408]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369c:	4964      	ldr	r1, [pc, #400]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d017      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036ba:	4b5d      	ldr	r3, [pc, #372]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	4959      	ldr	r1, [pc, #356]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d8:	d101      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d017      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036f6:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	494a      	ldr	r1, [pc, #296]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003714:	d101      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003716:	2301      	movs	r3, #1
 8003718:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 808b 	beq.w	800385a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003744:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	4a39      	ldr	r2, [pc, #228]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374e:	6413      	str	r3, [r2, #64]	; 0x40
 8003750:	4b37      	ldr	r3, [pc, #220]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800375c:	4b35      	ldr	r3, [pc, #212]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a34      	ldr	r2, [pc, #208]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003766:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003768:	f7fe fc0a 	bl	8001f80 <HAL_GetTick>
 800376c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003770:	f7fe fc06 	bl	8001f80 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e38d      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003782:	4b2c      	ldr	r3, [pc, #176]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800378e:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d035      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d02e      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ba:	4a1d      	ldr	r2, [pc, #116]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c2:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037d4:	4b16      	ldr	r3, [pc, #88]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d114      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fe fbce 	bl	8001f80 <HAL_GetTick>
 80037e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe fbca 	bl	8001f80 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e34f      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0ee      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003816:	d111      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003826:	400b      	ands	r3, r1
 8003828:	4901      	ldr	r1, [pc, #4]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
 800382e:	e00b      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003830:	40023800 	.word	0x40023800
 8003834:	40007000 	.word	0x40007000
 8003838:	0ffffcff 	.word	0x0ffffcff
 800383c:	4bb3      	ldr	r3, [pc, #716]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4ab2      	ldr	r2, [pc, #712]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003842:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003846:	6093      	str	r3, [r2, #8]
 8003848:	4bb0      	ldr	r3, [pc, #704]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800384a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	49ad      	ldr	r1, [pc, #692]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003856:	4313      	orrs	r3, r2
 8003858:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	d010      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003866:	4ba9      	ldr	r3, [pc, #676]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386c:	4aa7      	ldr	r2, [pc, #668]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800386e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003872:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003876:	4ba5      	ldr	r3, [pc, #660]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003878:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	49a2      	ldr	r1, [pc, #648]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003894:	4b9d      	ldr	r3, [pc, #628]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a2:	499a      	ldr	r1, [pc, #616]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038b6:	4b95      	ldr	r3, [pc, #596]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038c4:	4991      	ldr	r1, [pc, #580]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038d8:	4b8c      	ldr	r3, [pc, #560]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e6:	4989      	ldr	r1, [pc, #548]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038fa:	4b84      	ldr	r3, [pc, #528]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4980      	ldr	r1, [pc, #512]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800391c:	4b7b      	ldr	r3, [pc, #492]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	f023 0203 	bic.w	r2, r3, #3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	4978      	ldr	r1, [pc, #480]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800393e:	4b73      	ldr	r3, [pc, #460]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	f023 020c 	bic.w	r2, r3, #12
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	496f      	ldr	r1, [pc, #444]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003960:	4b6a      	ldr	r3, [pc, #424]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	4967      	ldr	r1, [pc, #412]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003982:	4b62      	ldr	r3, [pc, #392]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003990:	495e      	ldr	r1, [pc, #376]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039a4:	4b59      	ldr	r3, [pc, #356]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	4956      	ldr	r1, [pc, #344]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039c6:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	494d      	ldr	r1, [pc, #308]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80039e8:	4b48      	ldr	r3, [pc, #288]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f6:	4945      	ldr	r1, [pc, #276]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a0a:	4b40      	ldr	r3, [pc, #256]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a10:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a18:	493c      	ldr	r1, [pc, #240]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a2c:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a3a:	4934      	ldr	r1, [pc, #208]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d011      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5c:	492b      	ldr	r1, [pc, #172]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a6c:	d101      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a9c:	491b      	ldr	r1, [pc, #108]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00b      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ab0:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ac0:	4912      	ldr	r1, [pc, #72]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00b      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae4:	4909      	ldr	r1, [pc, #36]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00f      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003afe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	e002      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	4985      	ldr	r1, [pc, #532]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00b      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b24:	4b80      	ldr	r3, [pc, #512]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b34:	497c      	ldr	r1, [pc, #496]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d005      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b4a:	f040 80d6 	bne.w	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b4e:	4b76      	ldr	r3, [pc, #472]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a75      	ldr	r2, [pc, #468]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5a:	f7fe fa11 	bl	8001f80 <HAL_GetTick>
 8003b5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b60:	e008      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b62:	f7fe fa0d 	bl	8001f80 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b64      	cmp	r3, #100	; 0x64
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e194      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b74:	4b6c      	ldr	r3, [pc, #432]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f0      	bne.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d021      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11d      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003b94:	4b64      	ldr	r3, [pc, #400]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b9a:	0c1b      	lsrs	r3, r3, #16
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ba2:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba8:	0e1b      	lsrs	r3, r3, #24
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	019a      	lsls	r2, r3, #6
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	041b      	lsls	r3, r3, #16
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	061b      	lsls	r3, r3, #24
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	071b      	lsls	r3, r3, #28
 8003bc8:	4957      	ldr	r1, [pc, #348]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d02e      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bfa:	d129      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c0a:	4b47      	ldr	r3, [pc, #284]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c10:	0f1b      	lsrs	r3, r3, #28
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	019a      	lsls	r2, r3, #6
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	061b      	lsls	r3, r3, #24
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	071b      	lsls	r3, r3, #28
 8003c30:	493d      	ldr	r1, [pc, #244]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c38:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c3e:	f023 021f 	bic.w	r2, r3, #31
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	3b01      	subs	r3, #1
 8003c48:	4937      	ldr	r1, [pc, #220]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c5c:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c62:	0e1b      	lsrs	r3, r3, #24
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c70:	0f1b      	lsrs	r3, r3, #28
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	019a      	lsls	r2, r3, #6
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	431a      	orrs	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	061b      	lsls	r3, r3, #24
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	071b      	lsls	r3, r3, #28
 8003c90:	4925      	ldr	r1, [pc, #148]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d011      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	019a      	lsls	r2, r3, #6
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	061b      	lsls	r3, r3, #24
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	071b      	lsls	r3, r3, #28
 8003cc0:	4919      	ldr	r1, [pc, #100]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cc8:	4b17      	ldr	r3, [pc, #92]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a16      	ldr	r2, [pc, #88]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd4:	f7fe f954 	bl	8001f80 <HAL_GetTick>
 8003cd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cdc:	f7fe f950 	bl	8001f80 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0d7      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cee:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	f040 80cd 	bne.w	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0e:	f7fe f937 	bl	8001f80 <HAL_GetTick>
 8003d12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d16:	f7fe f933 	bl	8001f80 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b64      	cmp	r3, #100	; 0x64
 8003d22:	d903      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e0ba      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003d28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d38:	d0ed      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d02e      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d12a      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d62:	4b51      	ldr	r3, [pc, #324]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d70:	4b4d      	ldr	r3, [pc, #308]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	0f1b      	lsrs	r3, r3, #28
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	019a      	lsls	r2, r3, #6
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	041b      	lsls	r3, r3, #16
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	071b      	lsls	r3, r3, #28
 8003d96:	4944      	ldr	r1, [pc, #272]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d9e:	4b42      	ldr	r3, [pc, #264]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003da4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	493d      	ldr	r1, [pc, #244]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d022      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dcc:	d11d      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dce:	4b36      	ldr	r3, [pc, #216]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	0e1b      	lsrs	r3, r3, #24
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ddc:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	0f1b      	lsrs	r3, r3, #28
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	019a      	lsls	r2, r3, #6
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	041b      	lsls	r3, r3, #16
 8003df6:	431a      	orrs	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	061b      	lsls	r3, r3, #24
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	4929      	ldr	r1, [pc, #164]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d028      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1c:	0e1b      	lsrs	r3, r3, #24
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e2a:	0c1b      	lsrs	r3, r3, #16
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	019a      	lsls	r2, r3, #6
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	041b      	lsls	r3, r3, #16
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	071b      	lsls	r3, r3, #28
 8003e4a:	4917      	ldr	r1, [pc, #92]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	4911      	ldr	r1, [pc, #68]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e68:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e74:	f7fe f884 	bl	8001f80 <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e7c:	f7fe f880 	bl	8001f80 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e007      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9a:	d1ef      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40023800 	.word	0x40023800

08003eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e040      	b.n	8003f40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d106      	bne.n	8003ed4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd ff98 	bl	8001e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2224      	movs	r2, #36	; 0x24
 8003ed8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f8be 	bl	800406c <UART_SetConfig>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e022      	b.n	8003f40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fb5e 	bl	80045c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fbe5 	bl	8004708 <UART_CheckIdleState>
 8003f3e:	4603      	mov	r3, r0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af02      	add	r7, sp, #8
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d17f      	bne.n	8004060 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_UART_Transmit+0x24>
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e078      	b.n	8004062 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Transmit+0x36>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e071      	b.n	8004062 <HAL_UART_Transmit+0x11a>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2221      	movs	r2, #33	; 0x21
 8003f90:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003f92:	f7fd fff5 	bl	8001f80 <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	88fa      	ldrh	r2, [r7, #6]
 8003f9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb0:	d108      	bne.n	8003fc4 <HAL_UART_Transmit+0x7c>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	e003      	b.n	8003fcc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003fd4:	e02c      	b.n	8004030 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 fbd6 	bl	8004792 <UART_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e038      	b.n	8004062 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10b      	bne.n	800400e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	3302      	adds	r3, #2
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	e007      	b.n	800401e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	3301      	adds	r3, #1
 800401c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004036:	b29b      	uxth	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1cc      	bne.n	8003fd6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2200      	movs	r2, #0
 8004044:	2140      	movs	r1, #64	; 0x40
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fba3 	bl	8004792 <UART_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e005      	b.n	8004062 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2220      	movs	r2, #32
 800405a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	e000      	b.n	8004062 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004060:	2302      	movs	r3, #2
  }
}
 8004062:	4618      	mov	r0, r3
 8004064:	3720      	adds	r7, #32
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004074:	2300      	movs	r3, #0
 8004076:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	4ba7      	ldr	r3, [pc, #668]	; (8004338 <UART_SetConfig+0x2cc>)
 800409c:	4013      	ands	r3, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	6939      	ldr	r1, [r7, #16]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a95      	ldr	r2, [pc, #596]	; (800433c <UART_SetConfig+0x2d0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d120      	bne.n	800412e <UART_SetConfig+0xc2>
 80040ec:	4b94      	ldr	r3, [pc, #592]	; (8004340 <UART_SetConfig+0x2d4>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d816      	bhi.n	8004128 <UART_SetConfig+0xbc>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0x94>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004111 	.word	0x08004111
 8004104:	0800411d 	.word	0x0800411d
 8004108:	08004117 	.word	0x08004117
 800410c:	08004123 	.word	0x08004123
 8004110:	2301      	movs	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
 8004114:	e14f      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004116:	2302      	movs	r3, #2
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	e14c      	b.n	80043b6 <UART_SetConfig+0x34a>
 800411c:	2304      	movs	r3, #4
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e149      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004122:	2308      	movs	r3, #8
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e146      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004128:	2310      	movs	r3, #16
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e143      	b.n	80043b6 <UART_SetConfig+0x34a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a84      	ldr	r2, [pc, #528]	; (8004344 <UART_SetConfig+0x2d8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d132      	bne.n	800419e <UART_SetConfig+0x132>
 8004138:	4b81      	ldr	r3, [pc, #516]	; (8004340 <UART_SetConfig+0x2d4>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b0c      	cmp	r3, #12
 8004144:	d828      	bhi.n	8004198 <UART_SetConfig+0x12c>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <UART_SetConfig+0xe0>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004181 	.word	0x08004181
 8004150:	08004199 	.word	0x08004199
 8004154:	08004199 	.word	0x08004199
 8004158:	08004199 	.word	0x08004199
 800415c:	0800418d 	.word	0x0800418d
 8004160:	08004199 	.word	0x08004199
 8004164:	08004199 	.word	0x08004199
 8004168:	08004199 	.word	0x08004199
 800416c:	08004187 	.word	0x08004187
 8004170:	08004199 	.word	0x08004199
 8004174:	08004199 	.word	0x08004199
 8004178:	08004199 	.word	0x08004199
 800417c:	08004193 	.word	0x08004193
 8004180:	2300      	movs	r3, #0
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e117      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004186:	2302      	movs	r3, #2
 8004188:	77fb      	strb	r3, [r7, #31]
 800418a:	e114      	b.n	80043b6 <UART_SetConfig+0x34a>
 800418c:	2304      	movs	r3, #4
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e111      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004192:	2308      	movs	r3, #8
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	e10e      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004198:	2310      	movs	r3, #16
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e10b      	b.n	80043b6 <UART_SetConfig+0x34a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a69      	ldr	r2, [pc, #420]	; (8004348 <UART_SetConfig+0x2dc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d120      	bne.n	80041ea <UART_SetConfig+0x17e>
 80041a8:	4b65      	ldr	r3, [pc, #404]	; (8004340 <UART_SetConfig+0x2d4>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041b2:	2b30      	cmp	r3, #48	; 0x30
 80041b4:	d013      	beq.n	80041de <UART_SetConfig+0x172>
 80041b6:	2b30      	cmp	r3, #48	; 0x30
 80041b8:	d814      	bhi.n	80041e4 <UART_SetConfig+0x178>
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d009      	beq.n	80041d2 <UART_SetConfig+0x166>
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d810      	bhi.n	80041e4 <UART_SetConfig+0x178>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <UART_SetConfig+0x160>
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d006      	beq.n	80041d8 <UART_SetConfig+0x16c>
 80041ca:	e00b      	b.n	80041e4 <UART_SetConfig+0x178>
 80041cc:	2300      	movs	r3, #0
 80041ce:	77fb      	strb	r3, [r7, #31]
 80041d0:	e0f1      	b.n	80043b6 <UART_SetConfig+0x34a>
 80041d2:	2302      	movs	r3, #2
 80041d4:	77fb      	strb	r3, [r7, #31]
 80041d6:	e0ee      	b.n	80043b6 <UART_SetConfig+0x34a>
 80041d8:	2304      	movs	r3, #4
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e0eb      	b.n	80043b6 <UART_SetConfig+0x34a>
 80041de:	2308      	movs	r3, #8
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e0e8      	b.n	80043b6 <UART_SetConfig+0x34a>
 80041e4:	2310      	movs	r3, #16
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e0e5      	b.n	80043b6 <UART_SetConfig+0x34a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a57      	ldr	r2, [pc, #348]	; (800434c <UART_SetConfig+0x2e0>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d120      	bne.n	8004236 <UART_SetConfig+0x1ca>
 80041f4:	4b52      	ldr	r3, [pc, #328]	; (8004340 <UART_SetConfig+0x2d4>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041fe:	2bc0      	cmp	r3, #192	; 0xc0
 8004200:	d013      	beq.n	800422a <UART_SetConfig+0x1be>
 8004202:	2bc0      	cmp	r3, #192	; 0xc0
 8004204:	d814      	bhi.n	8004230 <UART_SetConfig+0x1c4>
 8004206:	2b80      	cmp	r3, #128	; 0x80
 8004208:	d009      	beq.n	800421e <UART_SetConfig+0x1b2>
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d810      	bhi.n	8004230 <UART_SetConfig+0x1c4>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <UART_SetConfig+0x1ac>
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d006      	beq.n	8004224 <UART_SetConfig+0x1b8>
 8004216:	e00b      	b.n	8004230 <UART_SetConfig+0x1c4>
 8004218:	2300      	movs	r3, #0
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e0cb      	b.n	80043b6 <UART_SetConfig+0x34a>
 800421e:	2302      	movs	r3, #2
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e0c8      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004224:	2304      	movs	r3, #4
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e0c5      	b.n	80043b6 <UART_SetConfig+0x34a>
 800422a:	2308      	movs	r3, #8
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e0c2      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004230:	2310      	movs	r3, #16
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e0bf      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a45      	ldr	r2, [pc, #276]	; (8004350 <UART_SetConfig+0x2e4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d125      	bne.n	800428c <UART_SetConfig+0x220>
 8004240:	4b3f      	ldr	r3, [pc, #252]	; (8004340 <UART_SetConfig+0x2d4>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800424a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800424e:	d017      	beq.n	8004280 <UART_SetConfig+0x214>
 8004250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004254:	d817      	bhi.n	8004286 <UART_SetConfig+0x21a>
 8004256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800425a:	d00b      	beq.n	8004274 <UART_SetConfig+0x208>
 800425c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004260:	d811      	bhi.n	8004286 <UART_SetConfig+0x21a>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <UART_SetConfig+0x202>
 8004266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800426a:	d006      	beq.n	800427a <UART_SetConfig+0x20e>
 800426c:	e00b      	b.n	8004286 <UART_SetConfig+0x21a>
 800426e:	2300      	movs	r3, #0
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e0a0      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004274:	2302      	movs	r3, #2
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e09d      	b.n	80043b6 <UART_SetConfig+0x34a>
 800427a:	2304      	movs	r3, #4
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e09a      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004280:	2308      	movs	r3, #8
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e097      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004286:	2310      	movs	r3, #16
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e094      	b.n	80043b6 <UART_SetConfig+0x34a>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a30      	ldr	r2, [pc, #192]	; (8004354 <UART_SetConfig+0x2e8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d125      	bne.n	80042e2 <UART_SetConfig+0x276>
 8004296:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <UART_SetConfig+0x2d4>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042a4:	d017      	beq.n	80042d6 <UART_SetConfig+0x26a>
 80042a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042aa:	d817      	bhi.n	80042dc <UART_SetConfig+0x270>
 80042ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b0:	d00b      	beq.n	80042ca <UART_SetConfig+0x25e>
 80042b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b6:	d811      	bhi.n	80042dc <UART_SetConfig+0x270>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <UART_SetConfig+0x258>
 80042bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c0:	d006      	beq.n	80042d0 <UART_SetConfig+0x264>
 80042c2:	e00b      	b.n	80042dc <UART_SetConfig+0x270>
 80042c4:	2301      	movs	r3, #1
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e075      	b.n	80043b6 <UART_SetConfig+0x34a>
 80042ca:	2302      	movs	r3, #2
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e072      	b.n	80043b6 <UART_SetConfig+0x34a>
 80042d0:	2304      	movs	r3, #4
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e06f      	b.n	80043b6 <UART_SetConfig+0x34a>
 80042d6:	2308      	movs	r3, #8
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e06c      	b.n	80043b6 <UART_SetConfig+0x34a>
 80042dc:	2310      	movs	r3, #16
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e069      	b.n	80043b6 <UART_SetConfig+0x34a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <UART_SetConfig+0x2ec>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d137      	bne.n	800435c <UART_SetConfig+0x2f0>
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <UART_SetConfig+0x2d4>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042fa:	d017      	beq.n	800432c <UART_SetConfig+0x2c0>
 80042fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004300:	d817      	bhi.n	8004332 <UART_SetConfig+0x2c6>
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004306:	d00b      	beq.n	8004320 <UART_SetConfig+0x2b4>
 8004308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430c:	d811      	bhi.n	8004332 <UART_SetConfig+0x2c6>
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <UART_SetConfig+0x2ae>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004316:	d006      	beq.n	8004326 <UART_SetConfig+0x2ba>
 8004318:	e00b      	b.n	8004332 <UART_SetConfig+0x2c6>
 800431a:	2300      	movs	r3, #0
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e04a      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004320:	2302      	movs	r3, #2
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e047      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004326:	2304      	movs	r3, #4
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e044      	b.n	80043b6 <UART_SetConfig+0x34a>
 800432c:	2308      	movs	r3, #8
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e041      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004332:	2310      	movs	r3, #16
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e03e      	b.n	80043b6 <UART_SetConfig+0x34a>
 8004338:	efff69f3 	.word	0xefff69f3
 800433c:	40011000 	.word	0x40011000
 8004340:	40023800 	.word	0x40023800
 8004344:	40004400 	.word	0x40004400
 8004348:	40004800 	.word	0x40004800
 800434c:	40004c00 	.word	0x40004c00
 8004350:	40005000 	.word	0x40005000
 8004354:	40011400 	.word	0x40011400
 8004358:	40007800 	.word	0x40007800
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a94      	ldr	r2, [pc, #592]	; (80045b4 <UART_SetConfig+0x548>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d125      	bne.n	80043b2 <UART_SetConfig+0x346>
 8004366:	4b94      	ldr	r3, [pc, #592]	; (80045b8 <UART_SetConfig+0x54c>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004370:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004374:	d017      	beq.n	80043a6 <UART_SetConfig+0x33a>
 8004376:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800437a:	d817      	bhi.n	80043ac <UART_SetConfig+0x340>
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004380:	d00b      	beq.n	800439a <UART_SetConfig+0x32e>
 8004382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004386:	d811      	bhi.n	80043ac <UART_SetConfig+0x340>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <UART_SetConfig+0x328>
 800438c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004390:	d006      	beq.n	80043a0 <UART_SetConfig+0x334>
 8004392:	e00b      	b.n	80043ac <UART_SetConfig+0x340>
 8004394:	2300      	movs	r3, #0
 8004396:	77fb      	strb	r3, [r7, #31]
 8004398:	e00d      	b.n	80043b6 <UART_SetConfig+0x34a>
 800439a:	2302      	movs	r3, #2
 800439c:	77fb      	strb	r3, [r7, #31]
 800439e:	e00a      	b.n	80043b6 <UART_SetConfig+0x34a>
 80043a0:	2304      	movs	r3, #4
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e007      	b.n	80043b6 <UART_SetConfig+0x34a>
 80043a6:	2308      	movs	r3, #8
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e004      	b.n	80043b6 <UART_SetConfig+0x34a>
 80043ac:	2310      	movs	r3, #16
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e001      	b.n	80043b6 <UART_SetConfig+0x34a>
 80043b2:	2310      	movs	r3, #16
 80043b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043be:	d17f      	bne.n	80044c0 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80043c0:	7ffb      	ldrb	r3, [r7, #31]
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d85c      	bhi.n	8004480 <UART_SetConfig+0x414>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0x360>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080043f1 	.word	0x080043f1
 80043d0:	08004411 	.word	0x08004411
 80043d4:	08004431 	.word	0x08004431
 80043d8:	08004481 	.word	0x08004481
 80043dc:	08004449 	.word	0x08004449
 80043e0:	08004481 	.word	0x08004481
 80043e4:	08004481 	.word	0x08004481
 80043e8:	08004481 	.word	0x08004481
 80043ec:	08004469 	.word	0x08004469
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7ff f90e 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80043f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	005a      	lsls	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	441a      	add	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	fbb2 f3f3 	udiv	r3, r2, r3
 800440a:	b29b      	uxth	r3, r3
 800440c:	61bb      	str	r3, [r7, #24]
        break;
 800440e:	e03a      	b.n	8004486 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004410:	f7ff f912 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8004414:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	005a      	lsls	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	441a      	add	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	b29b      	uxth	r3, r3
 800442c:	61bb      	str	r3, [r7, #24]
        break;
 800442e:	e02a      	b.n	8004486 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	085a      	lsrs	r2, r3, #1
 8004436:	4b61      	ldr	r3, [pc, #388]	; (80045bc <UART_SetConfig+0x550>)
 8004438:	4413      	add	r3, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6852      	ldr	r2, [r2, #4]
 800443e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004442:	b29b      	uxth	r3, r3
 8004444:	61bb      	str	r3, [r7, #24]
        break;
 8004446:	e01e      	b.n	8004486 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004448:	f7ff f820 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800444c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	005a      	lsls	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	441a      	add	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	b29b      	uxth	r3, r3
 8004464:	61bb      	str	r3, [r7, #24]
        break;
 8004466:	e00e      	b.n	8004486 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	085b      	lsrs	r3, r3, #1
 800446e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	fbb2 f3f3 	udiv	r3, r2, r3
 800447a:	b29b      	uxth	r3, r3
 800447c:	61bb      	str	r3, [r7, #24]
        break;
 800447e:	e002      	b.n	8004486 <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
        break;
 8004484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b0f      	cmp	r3, #15
 800448a:	d916      	bls.n	80044ba <UART_SetConfig+0x44e>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004492:	d212      	bcs.n	80044ba <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	b29b      	uxth	r3, r3
 8004498:	f023 030f 	bic.w	r3, r3, #15
 800449c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	897b      	ldrh	r3, [r7, #10]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	897a      	ldrh	r2, [r7, #10]
 80044b6:	60da      	str	r2, [r3, #12]
 80044b8:	e070      	b.n	800459c <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	75fb      	strb	r3, [r7, #23]
 80044be:	e06d      	b.n	800459c <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 80044c0:	7ffb      	ldrb	r3, [r7, #31]
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d859      	bhi.n	800457a <UART_SetConfig+0x50e>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <UART_SetConfig+0x460>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	0800450f 	.word	0x0800450f
 80044d4:	0800452d 	.word	0x0800452d
 80044d8:	0800457b 	.word	0x0800457b
 80044dc:	08004545 	.word	0x08004545
 80044e0:	0800457b 	.word	0x0800457b
 80044e4:	0800457b 	.word	0x0800457b
 80044e8:	0800457b 	.word	0x0800457b
 80044ec:	08004563 	.word	0x08004563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7ff f88e 	bl	8003610 <HAL_RCC_GetPCLK1Freq>
 80044f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	085a      	lsrs	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	441a      	add	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	b29b      	uxth	r3, r3
 800450a:	61bb      	str	r3, [r7, #24]
        break;
 800450c:	e038      	b.n	8004580 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450e:	f7ff f893 	bl	8003638 <HAL_RCC_GetPCLK2Freq>
 8004512:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	085a      	lsrs	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	441a      	add	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	fbb2 f3f3 	udiv	r3, r2, r3
 8004526:	b29b      	uxth	r3, r3
 8004528:	61bb      	str	r3, [r7, #24]
        break;
 800452a:	e029      	b.n	8004580 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	085a      	lsrs	r2, r3, #1
 8004532:	4b23      	ldr	r3, [pc, #140]	; (80045c0 <UART_SetConfig+0x554>)
 8004534:	4413      	add	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6852      	ldr	r2, [r2, #4]
 800453a:	fbb3 f3f2 	udiv	r3, r3, r2
 800453e:	b29b      	uxth	r3, r3
 8004540:	61bb      	str	r3, [r7, #24]
        break;
 8004542:	e01d      	b.n	8004580 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004544:	f7fe ffa2 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8004548:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	085a      	lsrs	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	441a      	add	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	b29b      	uxth	r3, r3
 800455e:	61bb      	str	r3, [r7, #24]
        break;
 8004560:	e00e      	b.n	8004580 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	b29b      	uxth	r3, r3
 8004576:	61bb      	str	r3, [r7, #24]
        break;
 8004578:	e002      	b.n	8004580 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
        break;
 800457e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b0f      	cmp	r3, #15
 8004584:	d908      	bls.n	8004598 <UART_SetConfig+0x52c>
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d204      	bcs.n	8004598 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	e001      	b.n	800459c <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40007c00 	.word	0x40007c00
 80045b8:	40023800 	.word	0x40023800
 80045bc:	01e84800 	.word	0x01e84800
 80045c0:	00f42400 	.word	0x00f42400

080045c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01a      	beq.n	80046da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c2:	d10a      	bne.n	80046da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	605a      	str	r2, [r3, #4]
  }
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af02      	add	r7, sp, #8
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004716:	f7fd fc33 	bl	8001f80 <HAL_GetTick>
 800471a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b08      	cmp	r3, #8
 8004728:	d10e      	bne.n	8004748 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800472a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f82a 	bl	8004792 <UART_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e020      	b.n	800478a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b04      	cmp	r3, #4
 8004754:	d10e      	bne.n	8004774 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004756:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f814 	bl	8004792 <UART_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e00a      	b.n	800478a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b084      	sub	sp, #16
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a2:	e05d      	b.n	8004860 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d059      	beq.n	8004860 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ac:	f7fd fbe8 	bl	8001f80 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d302      	bcc.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d11b      	bne.n	80047fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0201 	bic.w	r2, r2, #1
 80047e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2220      	movs	r2, #32
 80047ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e042      	b.n	8004880 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d02b      	beq.n	8004860 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004816:	d123      	bne.n	8004860 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004820:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004830:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2220      	movs	r2, #32
 8004852:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e00f      	b.n	8004880 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69da      	ldr	r2, [r3, #28]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4013      	ands	r3, r2
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	429a      	cmp	r2, r3
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	79fb      	ldrb	r3, [r7, #7]
 800487a:	429a      	cmp	r2, r3
 800487c:	d092      	beq.n	80047a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4d0d      	ldr	r5, [pc, #52]	; (80048c0 <__libc_init_array+0x38>)
 800488c:	4c0d      	ldr	r4, [pc, #52]	; (80048c4 <__libc_init_array+0x3c>)
 800488e:	1b64      	subs	r4, r4, r5
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	2600      	movs	r6, #0
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	4d0b      	ldr	r5, [pc, #44]	; (80048c8 <__libc_init_array+0x40>)
 800489a:	4c0c      	ldr	r4, [pc, #48]	; (80048cc <__libc_init_array+0x44>)
 800489c:	f000 f87c 	bl	8004998 <_init>
 80048a0:	1b64      	subs	r4, r4, r5
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	2600      	movs	r6, #0
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	080050d0 	.word	0x080050d0
 80048c4:	080050d0 	.word	0x080050d0
 80048c8:	080050d0 	.word	0x080050d0
 80048cc:	080050d4 	.word	0x080050d4

080048d0 <__itoa>:
 80048d0:	1e93      	subs	r3, r2, #2
 80048d2:	2b22      	cmp	r3, #34	; 0x22
 80048d4:	b510      	push	{r4, lr}
 80048d6:	460c      	mov	r4, r1
 80048d8:	d904      	bls.n	80048e4 <__itoa+0x14>
 80048da:	2300      	movs	r3, #0
 80048dc:	700b      	strb	r3, [r1, #0]
 80048de:	461c      	mov	r4, r3
 80048e0:	4620      	mov	r0, r4
 80048e2:	bd10      	pop	{r4, pc}
 80048e4:	2a0a      	cmp	r2, #10
 80048e6:	d109      	bne.n	80048fc <__itoa+0x2c>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	da07      	bge.n	80048fc <__itoa+0x2c>
 80048ec:	232d      	movs	r3, #45	; 0x2d
 80048ee:	700b      	strb	r3, [r1, #0]
 80048f0:	4240      	negs	r0, r0
 80048f2:	2101      	movs	r1, #1
 80048f4:	4421      	add	r1, r4
 80048f6:	f000 f80d 	bl	8004914 <__utoa>
 80048fa:	e7f1      	b.n	80048e0 <__itoa+0x10>
 80048fc:	2100      	movs	r1, #0
 80048fe:	e7f9      	b.n	80048f4 <__itoa+0x24>

08004900 <itoa>:
 8004900:	f7ff bfe6 	b.w	80048d0 <__itoa>

08004904 <memset>:
 8004904:	4402      	add	r2, r0
 8004906:	4603      	mov	r3, r0
 8004908:	4293      	cmp	r3, r2
 800490a:	d100      	bne.n	800490e <memset+0xa>
 800490c:	4770      	bx	lr
 800490e:	f803 1b01 	strb.w	r1, [r3], #1
 8004912:	e7f9      	b.n	8004908 <memset+0x4>

08004914 <__utoa>:
 8004914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004916:	4c1f      	ldr	r4, [pc, #124]	; (8004994 <__utoa+0x80>)
 8004918:	b08b      	sub	sp, #44	; 0x2c
 800491a:	4605      	mov	r5, r0
 800491c:	460b      	mov	r3, r1
 800491e:	466e      	mov	r6, sp
 8004920:	f104 0c20 	add.w	ip, r4, #32
 8004924:	6820      	ldr	r0, [r4, #0]
 8004926:	6861      	ldr	r1, [r4, #4]
 8004928:	4637      	mov	r7, r6
 800492a:	c703      	stmia	r7!, {r0, r1}
 800492c:	3408      	adds	r4, #8
 800492e:	4564      	cmp	r4, ip
 8004930:	463e      	mov	r6, r7
 8004932:	d1f7      	bne.n	8004924 <__utoa+0x10>
 8004934:	7921      	ldrb	r1, [r4, #4]
 8004936:	7139      	strb	r1, [r7, #4]
 8004938:	1e91      	subs	r1, r2, #2
 800493a:	6820      	ldr	r0, [r4, #0]
 800493c:	6038      	str	r0, [r7, #0]
 800493e:	2922      	cmp	r1, #34	; 0x22
 8004940:	f04f 0100 	mov.w	r1, #0
 8004944:	d904      	bls.n	8004950 <__utoa+0x3c>
 8004946:	7019      	strb	r1, [r3, #0]
 8004948:	460b      	mov	r3, r1
 800494a:	4618      	mov	r0, r3
 800494c:	b00b      	add	sp, #44	; 0x2c
 800494e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004950:	1e58      	subs	r0, r3, #1
 8004952:	4684      	mov	ip, r0
 8004954:	fbb5 f7f2 	udiv	r7, r5, r2
 8004958:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800495c:	fb02 5617 	mls	r6, r2, r7, r5
 8004960:	4476      	add	r6, lr
 8004962:	460c      	mov	r4, r1
 8004964:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004968:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800496c:	462e      	mov	r6, r5
 800496e:	42b2      	cmp	r2, r6
 8004970:	f101 0101 	add.w	r1, r1, #1
 8004974:	463d      	mov	r5, r7
 8004976:	d9ed      	bls.n	8004954 <__utoa+0x40>
 8004978:	2200      	movs	r2, #0
 800497a:	545a      	strb	r2, [r3, r1]
 800497c:	1919      	adds	r1, r3, r4
 800497e:	1aa5      	subs	r5, r4, r2
 8004980:	42aa      	cmp	r2, r5
 8004982:	dae2      	bge.n	800494a <__utoa+0x36>
 8004984:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004988:	780e      	ldrb	r6, [r1, #0]
 800498a:	7006      	strb	r6, [r0, #0]
 800498c:	3201      	adds	r2, #1
 800498e:	f801 5901 	strb.w	r5, [r1], #-1
 8004992:	e7f4      	b.n	800497e <__utoa+0x6a>
 8004994:	080050a0 	.word	0x080050a0

08004998 <_init>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr

080049a4 <_fini>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr
