
Audi_Motorsteuergeraet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034cc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036dc  080036dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036e4  080036e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  080036f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080036f8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b356  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001da8  00000000  00000000  0002b390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c0  00000000  00000000  0002d138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a8  00000000  00000000  0002daf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000279dd  00000000  00000000  0002e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c71  00000000  00000000  00055d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f55df  00000000  00000000  0005f9ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154fcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002628  00000000  00000000  00155048  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080036ac 	.word	0x080036ac

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080036ac 	.word	0x080036ac

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800053e:	463b      	mov	r3, r7
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <MX_ADC1_Init+0x98>)
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <MX_ADC1_Init+0x9c>)
 800054e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_ADC1_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_ADC1_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800055c:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_ADC1_Init+0x98>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <MX_ADC1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_ADC1_Init+0x98>)
 800056a:	2200      	movs	r2, #0
 800056c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_ADC1_Init+0x98>)
 8000572:	2200      	movs	r2, #0
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <MX_ADC1_Init+0x98>)
 8000578:	4a17      	ldr	r2, [pc, #92]	; (80005d8 <MX_ADC1_Init+0xa0>)
 800057a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_ADC1_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <MX_ADC1_Init+0x98>)
 8000584:	2201      	movs	r2, #1
 8000586:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <MX_ADC1_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000590:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_ADC1_Init+0x98>)
 8000592:	2201      	movs	r2, #1
 8000594:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000596:	480e      	ldr	r0, [pc, #56]	; (80005d0 <MX_ADC1_Init+0x98>)
 8000598:	f000 fcde 	bl	8000f58 <HAL_ADC_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005a2:	f000 fb77 	bl	8000c94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	4806      	ldr	r0, [pc, #24]	; (80005d0 <MX_ADC1_Init+0x98>)
 80005b8:	f000 fd12 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80005c2:	f000 fb67 	bl	8000c94 <Error_Handler>
  }

}
 80005c6:	bf00      	nop
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000028 	.word	0x20000028
 80005d4:	40012000 	.word	0x40012000
 80005d8:	0f000001 	.word	0x0f000001

080005dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a2d      	ldr	r2, [pc, #180]	; (80006b0 <HAL_ADC_MspInit+0xd4>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d153      	bne.n	80006a6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000602:	4a2c      	ldr	r2, [pc, #176]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 8000604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000608:	6453      	str	r3, [r2, #68]	; 0x44
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a26      	ldr	r2, [pc, #152]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a1a      	ldr	r2, [pc, #104]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HAL_ADC_MspInit+0xd8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SENSE_KL15_Pin|SENSE_KUEHLWASSER_Pin|SENSE_KLIMA_FLAP_Pin|SENSE_GAS_Pin
 800065e:	23f8      	movs	r3, #248	; 0xf8
 8000660:	61fb      	str	r3, [r7, #28]
                          |SENSE_PCB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	4811      	ldr	r0, [pc, #68]	; (80006b8 <HAL_ADC_MspInit+0xdc>)
 8000672:	f001 f8db 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_DRUCK_Pin|SENSE_DRUCK_TEMP_Pin;
 8000676:	2330      	movs	r3, #48	; 0x30
 8000678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067a:	2303      	movs	r3, #3
 800067c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <HAL_ADC_MspInit+0xe0>)
 800068a:	f001 f8cf 	bl	800182c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSE_INFO_Pin;
 800068e:	2302      	movs	r3, #2
 8000690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000692:	2303      	movs	r3, #3
 8000694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SENSE_INFO_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <HAL_ADC_MspInit+0xe4>)
 80006a2:	f001 f8c3 	bl	800182c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006a6:	bf00      	nop
 80006a8:	3730      	adds	r7, #48	; 0x30
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40012000 	.word	0x40012000
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020800 	.word	0x40020800
 80006c0:	40020400 	.word	0x40020400

080006c4 <MX_CAN3_Init>:

CAN_HandleTypeDef hcan3;

/* CAN3 init function */
void MX_CAN3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0

  hcan3.Instance = CAN3;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_CAN3_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	; (800072c <MX_CAN3_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 80006ce:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_CAN3_Init+0x64>)
 80006d0:	2206      	movs	r2, #6
 80006d2:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_CAN3_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_CAN3_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_CAN3_Init+0x64>)
 80006e2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006e6:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_CAN3_Init+0x64>)
 80006ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006ee:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_CAN3_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_CAN3_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_CAN3_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_CAN3_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_CAN3_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_CAN3_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_CAN3_Init+0x64>)
 8000716:	f000 fea7 	bl	8001468 <HAL_CAN_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 fab8 	bl	8000c94 <Error_Handler>
  }

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000070 	.word	0x20000070
 800072c:	40003400 	.word	0x40003400

08000730 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN3)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a23      	ldr	r2, [pc, #140]	; (80007dc <HAL_CAN_MspInit+0xac>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d140      	bne.n	80007d4 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN3_MspInit 0 */

  /* USER CODE END CAN3_MspInit 0 */
    /* CAN3 clock enable */
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	4a22      	ldr	r2, [pc, #136]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 8000758:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800075c:	6413      	str	r3, [r2, #64]	; 0x40
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000762:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 8000770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 8000788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078c:	6413      	str	r3, [r2, #64]	; 0x40
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_CAN_MspInit+0xb0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN3 GPIO Configuration
    PA8     ------> CAN3_RX
    PA15     ------> CAN3_TX
    */
    GPIO_InitStruct.Pin = ACAN_RX_Pin|ACAN_TX_Pin;
 80007b2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80007b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c0:	2303      	movs	r3, #3
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80007c4:	230b      	movs	r3, #11
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f107 031c 	add.w	r3, r7, #28
 80007cc:	4619      	mov	r1, r3
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <HAL_CAN_MspInit+0xb4>)
 80007d0:	f001 f82c 	bl	800182c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3730      	adds	r7, #48	; 0x30
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40003400 	.word	0x40003400
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020000 	.word	0x40020000

080007e8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08e      	sub	sp, #56	; 0x38
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	4bb6      	ldr	r3, [pc, #728]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4ab5      	ldr	r2, [pc, #724]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4bb3      	ldr	r3, [pc, #716]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	623b      	str	r3, [r7, #32]
 8000814:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4bb0      	ldr	r3, [pc, #704]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4aaf      	ldr	r2, [pc, #700]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4bad      	ldr	r3, [pc, #692]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	61fb      	str	r3, [r7, #28]
 800082c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082e:	4baa      	ldr	r3, [pc, #680]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4aa9      	ldr	r2, [pc, #676]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4ba7      	ldr	r3, [pc, #668]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0320 	and.w	r3, r3, #32
 8000842:	61bb      	str	r3, [r7, #24]
 8000844:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4ba4      	ldr	r3, [pc, #656]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4aa3      	ldr	r2, [pc, #652]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4ba1      	ldr	r3, [pc, #644]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b9e      	ldr	r3, [pc, #632]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a9d      	ldr	r2, [pc, #628]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b9b      	ldr	r3, [pc, #620]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b98      	ldr	r3, [pc, #608]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a97      	ldr	r2, [pc, #604]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b95      	ldr	r3, [pc, #596]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800088e:	4b92      	ldr	r3, [pc, #584]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a91      	ldr	r2, [pc, #580]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 8000894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b8f      	ldr	r3, [pc, #572]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b8c      	ldr	r3, [pc, #560]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a8b      	ldr	r2, [pc, #556]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b89      	ldr	r3, [pc, #548]	; (8000ad8 <MX_GPIO_Init+0x2f0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 80008be:	2200      	movs	r2, #0
 80008c0:	f248 0187 	movw	r1, #32903	; 0x8087
 80008c4:	4885      	ldr	r0, [pc, #532]	; (8000adc <MX_GPIO_Init+0x2f4>)
 80008c6:	f001 f95b 	bl	8001b80 <HAL_GPIO_WritePin>
                          |DIGITAL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_ON_Pin|WS2812_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f242 0108 	movw	r1, #8200	; 0x2008
 80008d0:	4883      	ldr	r0, [pc, #524]	; (8000ae0 <MX_GPIO_Init+0x2f8>)
 80008d2:	f001 f955 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80008d6:	2200      	movs	r2, #0
 80008d8:	f24f 013c 	movw	r1, #61500	; 0xf03c
 80008dc:	4881      	ldr	r0, [pc, #516]	; (8000ae4 <MX_GPIO_Init+0x2fc>)
 80008de:	f001 f94f 	bl	8001b80 <HAL_GPIO_WritePin>
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 80008e2:	2200      	movs	r2, #0
 80008e4:	f647 0191 	movw	r1, #30865	; 0x7891
 80008e8:	487f      	ldr	r0, [pc, #508]	; (8000ae8 <MX_GPIO_Init+0x300>)
 80008ea:	f001 f949 	bl	8001b80 <HAL_GPIO_WritePin>
                          |LED_ORANGE_Pin|HEATER2_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 80008ee:	2200      	movs	r2, #0
 80008f0:	f64e 2188 	movw	r1, #60040	; 0xea88
 80008f4:	487d      	ldr	r0, [pc, #500]	; (8000aec <MX_GPIO_Init+0x304>)
 80008f6:	f001 f943 	bl	8001b80 <HAL_GPIO_WritePin>
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 80008fa:	2200      	movs	r2, #0
 80008fc:	f64e 610c 	movw	r1, #60940	; 0xee0c
 8000900:	487b      	ldr	r0, [pc, #492]	; (8000af0 <MX_GPIO_Init+0x308>)
 8000902:	f001 f93d 	bl	8001b80 <HAL_GPIO_WritePin>
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RUECKWARNUNG_GPIO_Port, RUECKWARNUNG_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090c:	4879      	ldr	r0, [pc, #484]	; (8000af4 <MX_GPIO_Init+0x30c>)
 800090e:	f001 f937 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DIGITAL1_Pin|GLUEHKERZEN_Pin|MOTOR_SDC_OUT_Pin|HEATER1_Pin
 8000912:	f248 0387 	movw	r3, #32903	; 0x8087
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
                          |DIGITAL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000928:	4619      	mov	r1, r3
 800092a:	486c      	ldr	r0, [pc, #432]	; (8000adc <MX_GPIO_Init+0x2f4>)
 800092c:	f000 ff7e 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ECO_Pin|BC_DOWN_IN_Pin|DURCHFLUSS_Pin|BUTTON2_Pin
 8000930:	f647 7378 	movw	r3, #32632	; 0x7f78
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
                          |KICKDOWN_Pin|LEERLAUF_Pin|KUPPLUNG_NO_Pin|BREMSE_NC_Pin
                          |BREMSE_NO_Pin|SENSE_SDC_AKKU_Pin|SENSE_SDC_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	4865      	ldr	r0, [pc, #404]	; (8000adc <MX_GPIO_Init+0x2f4>)
 8000946:	f000 ff71 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_ON_Pin;
 800094a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(POWER_ON_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	485f      	ldr	r0, [pc, #380]	; (8000ae0 <MX_GPIO_Init+0x2f8>)
 8000964:	f000 ff62 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000968:	f64d 7347 	movw	r3, #57159	; 0xdf47
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|SD_SW_Pin|SD_D0_Pin|SD_D1_Pin
                          |SD_D2_Pin|SD_D3_Pin|SD_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096e:	2303      	movs	r3, #3
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	4858      	ldr	r0, [pc, #352]	; (8000ae0 <MX_GPIO_Init+0x2f8>)
 800097e:	f000 ff55 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PFPin PFPin PFPin
                           PFPin PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|SPI5_CS_Pin|SPI5_SCK_Pin|SPI5_MISO_Pin
 8000982:	f240 73c1 	movw	r3, #1985	; 0x7c1
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPI5_MOSI_Pin|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	4853      	ldr	r0, [pc, #332]	; (8000ae4 <MX_GPIO_Init+0x2fc>)
 8000998:	f000 ff48 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ECON_Pin|RECUPERATION_Pin;
 800099c:	f640 0302 	movw	r3, #2050	; 0x802
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	484c      	ldr	r0, [pc, #304]	; (8000ae4 <MX_GPIO_Init+0x2fc>)
 80009b2:	f000 ff3b 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = OELDRUCK_Pin|BC_DOWN_OUT_Pin|BC_UP_OUT_Pin|BC_RESET_OUT_Pin
 80009b6:	f24f 033c 	movw	r3, #61500	; 0xf03c
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |BAMOCAR_OUT1_Pin|BAMOCAR_OUT2_Pin|J317_Pin|DCDC_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	4845      	ldr	r0, [pc, #276]	; (8000ae4 <MX_GPIO_Init+0x2fc>)
 80009d0:	f000 ff2c 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WS2812_Pin;
 80009d4:	2308      	movs	r3, #8
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	2302      	movs	r3, #2
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WS2812_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	483d      	ldr	r0, [pc, #244]	; (8000ae0 <MX_GPIO_Init+0x2f8>)
 80009ec:	f000 ff1e 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = CRASH_Pin|EMERGENCY_RUN_Pin|HW_WAKE_Pin|OUTA_Pin
 80009f0:	f640 6307 	movw	r3, #3591	; 0xe07
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUTB_Pin|BC_UP_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	483b      	ldr	r0, [pc, #236]	; (8000af4 <MX_GPIO_Init+0x30c>)
 8000a06:	f000 ff11 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|F54_Pin|F18_Pin|KLIMA_OUT_Pin
 8000a0a:	f647 0391 	movw	r3, #30865	; 0x7891
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED_ORANGE_Pin|HEATER2_Pin|LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4831      	ldr	r0, [pc, #196]	; (8000ae8 <MX_GPIO_Init+0x300>)
 8000a24:	f000 ff02 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSE_RETURN_Pin|CAN2_TX_Pin|CAN2_RX_Pin|I2C1_SCL_Pin
 8000a28:	f44f 7359 	mov.w	r3, #868	; 0x364
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
                          |I2C1_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482a      	ldr	r0, [pc, #168]	; (8000ae8 <MX_GPIO_Init+0x300>)
 8000a3e:	f000 fef5 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = DCDC_INSTRUCTION_Pin|DCCDC_FAULT_Pin|ASR_IN1_Pin|GRA1_Pin
 8000a42:	f241 13f3 	movw	r3, #4595	; 0x11f3
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
                          |GRA2_Pin|GRA3_Pin|GRA4_Pin|BC_RESET_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4826      	ldr	r0, [pc, #152]	; (8000af0 <MX_GPIO_Init+0x308>)
 8000a58:	f000 fee8 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SENSE_SDC_BTB_Pin|ANLASSER_Pin;
 8000a5c:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481d      	ldr	r0, [pc, #116]	; (8000ae8 <MX_GPIO_Init+0x300>)
 8000a72:	f000 fedb 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = KL15_Pin|BAMOCAR_IN1_Pin|BAMOCAR_IN2_Pin|ASR_IN2_Pin;
 8000a76:	f241 5310 	movw	r3, #5392	; 0x1510
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4818      	ldr	r0, [pc, #96]	; (8000aec <MX_GPIO_Init+0x304>)
 8000a8c:	f000 fece 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = BREMSLICHT_Pin|RUECKFAHRLICHT_Pin|KLIMA_PWM_Pin|ANHAENGER_Pin
 8000a90:	f64e 2388 	movw	r3, #60040	; 0xea88
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
                          |RESERVE_OUT_Pin|LADELEUCHTE_Pin|OELSTAND_TEMP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4810      	ldr	r0, [pc, #64]	; (8000aec <MX_GPIO_Init+0x304>)
 8000aaa:	f000 febf 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|GENERATOR_LED_Pin|WISCHWARNUNG_Pin|BREMSWARNUNG_Pin
 8000aae:	f64e 630c 	movw	r3, #60940	; 0xee0c
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
                          |PUMPE_BREMSE_Pin|PUMPE_KUEHLUNG_Pin|FAN2_Pin|FAN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480a      	ldr	r0, [pc, #40]	; (8000af0 <MX_GPIO_Init+0x308>)
 8000ac8:	f000 feb0 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENTER_Pin;
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e00f      	b.n	8000af8 <MX_GPIO_Init+0x310>
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40021400 	.word	0x40021400
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40020c00 	.word	0x40020c00
 8000af0:	40021800 	.word	0x40021800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENTER_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4810      	ldr	r0, [pc, #64]	; (8000b44 <MX_GPIO_Init+0x35c>)
 8000b02:	f000 fe93 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RUECKWARNUNG_Pin;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RUECKWARNUNG_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <MX_GPIO_Init+0x360>)
 8000b20:	f000 fe84 	bl	800182c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_TX_Pin|CAN1_RX_Pin|SD_CMD_Pin;
 8000b24:	2307      	movs	r3, #7
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_GPIO_Init+0x364>)
 8000b38:	f000 fe78 	bl	800182c <HAL_GPIO_Init>

}
 8000b3c:	bf00      	nop
 8000b3e:	3738      	adds	r7, #56	; 0x38
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020c00 	.word	0x40020c00

08000b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b54:	f000 f9a3 	bl	8000e9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b58:	f000 f80a 	bl	8000b70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5c:	f7ff fe44 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b60:	f000 f900 	bl	8000d64 <MX_USART2_UART_Init>
  MX_CAN3_Init();
 8000b64:	f7ff fdae 	bl	80006c4 <MX_CAN3_Init>
  MX_ADC1_Init();
 8000b68:	f7ff fce6 	bl	8000538 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <main+0x1c>
	...

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0b8      	sub	sp, #224	; 0xe0
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b7a:	2234      	movs	r2, #52	; 0x34
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fd8c 	bl	800369c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2290      	movs	r2, #144	; 0x90
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 fd7d 	bl	800369c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	4b3a      	ldr	r3, [pc, #232]	; (8000c8c <SystemClock_Config+0x11c>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a39      	ldr	r2, [pc, #228]	; (8000c8c <SystemClock_Config+0x11c>)
 8000ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b37      	ldr	r3, [pc, #220]	; (8000c8c <SystemClock_Config+0x11c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <SystemClock_Config+0x120>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc2:	4a33      	ldr	r2, [pc, #204]	; (8000c90 <SystemClock_Config+0x120>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <SystemClock_Config+0x120>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be4:	2302      	movs	r3, #2
 8000be6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bf2:	2319      	movs	r3, #25
 8000bf4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000bf8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 f81f 	bl	8001c54 <HAL_RCC_OscConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c1c:	f000 f83a 	bl	8000c94 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c20:	f000 ffc8 	bl	8001bb4 <HAL_PWREx_EnableOverDrive>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c2a:	f000 f833 	bl	8000c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c50:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c54:	2103      	movs	r1, #3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 faaa 	bl	80021b0 <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000c62:	f000 f817 	bl	8000c94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 fc6e 	bl	8002554 <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000c7e:	f000 f809 	bl	8000c94 <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	37e0      	adds	r7, #224	; 0xe0
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40007000 	.word	0x40007000

08000c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <Error_Handler+0x6>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f8f2 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <SystemInit+0x28>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a07      	ldr	r2, [pc, #28]	; (8000d60 <SystemInit+0x28>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SystemInit+0x28>)
 8000d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d52:	609a      	str	r2, [r3, #8]
#endif
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <MX_USART2_UART_Init+0x5c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d70:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_USART2_UART_Init+0x58>)
 8000da8:	f001 fffa 	bl	8002da0 <HAL_UART_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000db2:	f7ff ff6f 	bl	8000c94 <Error_Handler>
  }

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000098 	.word	0x20000098
 8000dc0:	40004400 	.word	0x40004400

08000dc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0x7c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d127      	bne.n	8000e36 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART2TX_Pin|DEBUG_UART2RX_Pin;
 8000e16:	2360      	movs	r3, #96	; 0x60
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e26:	2307      	movs	r3, #7
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_UART_MspInit+0x84>)
 8000e32:	f000 fcfb 	bl	800182c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020c00 	.word	0x40020c00

08000e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e52:	e003      	b.n	8000e5c <LoopCopyDataInit>

08000e54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e5a:	3104      	adds	r1, #4

08000e5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e64:	d3f6      	bcc.n	8000e54 <CopyDataInit>
  ldr  r2, =_sbss
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e68:	e002      	b.n	8000e70 <LoopFillZerobss>

08000e6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e6c:	f842 3b04 	str.w	r3, [r2], #4

08000e70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e74:	d3f9      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e76:	f7ff ff5f 	bl	8000d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7a:	f002 fbeb 	bl	8003654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7e:	f7ff fe67 	bl	8000b50 <main>
  bx  lr    
 8000e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e84:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e88:	080036ec 	.word	0x080036ec
  ldr  r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e90:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e94:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e98:	2000011c 	.word	0x2000011c

08000e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e9c:	e7fe      	b.n	8000e9c <ADC_IRQHandler>

08000e9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	f000 fc8e 	bl	80017c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f000 f805 	bl	8000eb8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000eae:	f7ff fef5 	bl	8000c9c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 fc9b 	bl	8001812 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 fc71 	bl	80017da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000118 	.word	0x20000118

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000118 	.word	0x20000118

08000f58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e031      	b.n	8000fd2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fb30 	bl	80005dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d116      	bne.n	8000fc4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_ADC_Init+0x84>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	f043 0202 	orr.w	r2, r3, #2
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f964 	bl	8001274 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f023 0303 	bic.w	r3, r3, #3
 8000fba:	f043 0201 	orr.w	r2, r3, #1
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc2:	e001      	b.n	8000fc8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	ffffeefd 	.word	0xffffeefd

08000fe0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x1c>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e12a      	b.n	8001252 <HAL_ADC_ConfigChannel+0x272>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d93a      	bls.n	8001082 <HAL_ADC_ConfigChannel+0xa2>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001014:	d035      	beq.n	8001082 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68d9      	ldr	r1, [r3, #12]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	461a      	mov	r2, r3
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	3b1e      	subs	r3, #30
 800102c:	2207      	movs	r2, #7
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	400a      	ands	r2, r1
 800103a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a87      	ldr	r2, [pc, #540]	; (8001260 <HAL_ADC_ConfigChannel+0x280>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10a      	bne.n	800105c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68d9      	ldr	r1, [r3, #12]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	061a      	lsls	r2, r3, #24
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800105a:	e035      	b.n	80010c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68d9      	ldr	r1, [r3, #12]
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	4618      	mov	r0, r3
 800106e:	4603      	mov	r3, r0
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4403      	add	r3, r0
 8001074:	3b1e      	subs	r3, #30
 8001076:	409a      	lsls	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001080:	e022      	b.n	80010c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6919      	ldr	r1, [r3, #16]
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	2207      	movs	r2, #7
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43da      	mvns	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	400a      	ands	r2, r1
 80010a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6919      	ldr	r1, [r3, #16]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	4603      	mov	r3, r0
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4403      	add	r3, r0
 80010be:	409a      	lsls	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	d824      	bhi.n	800111a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	3b05      	subs	r3, #5
 80010e2:	221f      	movs	r2, #31
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43da      	mvns	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	400a      	ands	r2, r1
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b05      	subs	r3, #5
 800110c:	fa00 f203 	lsl.w	r2, r0, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	635a      	str	r2, [r3, #52]	; 0x34
 8001118:	e04c      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d824      	bhi.n	800116c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b23      	subs	r3, #35	; 0x23
 8001134:	221f      	movs	r2, #31
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	400a      	ands	r2, r1
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	3b23      	subs	r3, #35	; 0x23
 800115e:	fa00 f203 	lsl.w	r2, r0, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	631a      	str	r2, [r3, #48]	; 0x30
 800116a:	e023      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b41      	subs	r3, #65	; 0x41
 800117e:	221f      	movs	r2, #31
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43da      	mvns	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	400a      	ands	r2, r1
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4613      	mov	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	3b41      	subs	r3, #65	; 0x41
 80011a8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <HAL_ADC_ConfigChannel+0x284>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10a      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x1f4>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011c6:	d105      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <HAL_ADC_ConfigChannel+0x288>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <HAL_ADC_ConfigChannel+0x288>)
 80011ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80011d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a22      	ldr	r2, [pc, #136]	; (8001264 <HAL_ADC_ConfigChannel+0x284>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d109      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x212>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b12      	cmp	r3, #18
 80011e4:	d105      	bne.n	80011f2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_ADC_ConfigChannel+0x288>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <HAL_ADC_ConfigChannel+0x288>)
 80011ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a1b      	ldr	r2, [pc, #108]	; (8001264 <HAL_ADC_ConfigChannel+0x284>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d125      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x268>
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_ADC_ConfigChannel+0x280>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d003      	beq.n	800120e <HAL_ADC_ConfigChannel+0x22e>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b11      	cmp	r3, #17
 800120c:	d11c      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_ADC_ConfigChannel+0x288>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <HAL_ADC_ConfigChannel+0x288>)
 8001214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001218:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_ADC_ConfigChannel+0x280>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d111      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_ADC_ConfigChannel+0x28c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_ADC_ConfigChannel+0x290>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9a      	lsrs	r2, r3, #18
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800123a:	e002      	b.n	8001242 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	3b01      	subs	r3, #1
 8001240:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f9      	bne.n	800123c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	10000012 	.word	0x10000012
 8001264:	40012000 	.word	0x40012000
 8001268:	40012300 	.word	0x40012300
 800126c:	20000000 	.word	0x20000000
 8001270:	431bde83 	.word	0x431bde83

08001274 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800127c:	4b78      	ldr	r3, [pc, #480]	; (8001460 <ADC_Init+0x1ec>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	4a77      	ldr	r2, [pc, #476]	; (8001460 <ADC_Init+0x1ec>)
 8001282:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001286:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001288:	4b75      	ldr	r3, [pc, #468]	; (8001460 <ADC_Init+0x1ec>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4973      	ldr	r1, [pc, #460]	; (8001460 <ADC_Init+0x1ec>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6859      	ldr	r1, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	021a      	lsls	r2, r3, #8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6899      	ldr	r1, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	4a58      	ldr	r2, [pc, #352]	; (8001464 <ADC_Init+0x1f0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d022      	beq.n	800134e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001316:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6899      	ldr	r1, [r3, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6899      	ldr	r1, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	e00f      	b.n	800136e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800135c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800136c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 0202 	bic.w	r2, r2, #2
 800137c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6899      	ldr	r1, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	005a      	lsls	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d01b      	beq.n	80013d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6859      	ldr	r1, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c6:	3b01      	subs	r3, #1
 80013c8:	035a      	lsls	r2, r3, #13
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	e007      	b.n	80013e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	3b01      	subs	r3, #1
 8001400:	051a      	lsls	r2, r3, #20
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6899      	ldr	r1, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001426:	025a      	lsls	r2, r3, #9
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689a      	ldr	r2, [r3, #8]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800143e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6899      	ldr	r1, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	029a      	lsls	r2, r3, #10
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	609a      	str	r2, [r3, #8]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40012300 	.word	0x40012300
 8001464:	0f000001 	.word	0x0f000001

08001468 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0ed      	b.n	8001656 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d102      	bne.n	800148c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff f952 	bl	8000730 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f022 0202 	bic.w	r2, r2, #2
 800149a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800149c:	f7ff fd50 	bl	8000f40 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014a2:	e012      	b.n	80014ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014a4:	f7ff fd4c 	bl	8000f40 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b0a      	cmp	r3, #10
 80014b0:	d90b      	bls.n	80014ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2205      	movs	r2, #5
 80014c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0c5      	b.n	8001656 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1e5      	bne.n	80014a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014e8:	f7ff fd2a 	bl	8000f40 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ee:	e012      	b.n	8001516 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f0:	f7ff fd26 	bl	8000f40 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b0a      	cmp	r3, #10
 80014fc:	d90b      	bls.n	8001516 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e09f      	b.n	8001656 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0e5      	beq.n	80014f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	7e1b      	ldrb	r3, [r3, #24]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d108      	bne.n	800153e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e007      	b.n	800154e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7e5b      	ldrb	r3, [r3, #25]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d108      	bne.n	8001568 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e007      	b.n	8001578 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001576:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	7e9b      	ldrb	r3, [r3, #26]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d108      	bne.n	8001592 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0220 	orr.w	r2, r2, #32
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e007      	b.n	80015a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0220 	bic.w	r2, r2, #32
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7edb      	ldrb	r3, [r3, #27]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d108      	bne.n	80015bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0210 	bic.w	r2, r2, #16
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e007      	b.n	80015cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f042 0210 	orr.w	r2, r2, #16
 80015ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7f1b      	ldrb	r3, [r3, #28]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d108      	bne.n	80015e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0208 	orr.w	r2, r2, #8
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e007      	b.n	80015f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0208 	bic.w	r2, r2, #8
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7f5b      	ldrb	r3, [r3, #29]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d108      	bne.n	8001610 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 0204 	orr.w	r2, r2, #4
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	e007      	b.n	8001620 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0204 	bic.w	r2, r2, #4
 800161e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	ea42 0103 	orr.w	r1, r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	1e5a      	subs	r2, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	05fa0000 	.word	0x05fa0000

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	; (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	; (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001790:	d301      	bcc.n	8001796 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001792:	2301      	movs	r3, #1
 8001794:	e00f      	b.n	80017b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001796:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <SysTick_Config+0x40>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179e:	210f      	movs	r1, #15
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f7ff ff8e 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <SysTick_Config+0x40>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ae:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <SysTick_Config+0x40>)
 80017b0:	2207      	movs	r2, #7
 80017b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff47 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017da:	b580      	push	{r7, lr}
 80017dc:	b086      	sub	sp, #24
 80017de:	af00      	add	r7, sp, #0
 80017e0:	4603      	mov	r3, r0
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017ec:	f7ff ff5c 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 80017f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	6978      	ldr	r0, [r7, #20]
 80017f8:	f7ff ff8e 	bl	8001718 <NVIC_EncodePriority>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>
}
 800180a:	bf00      	nop
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ffb0 	bl	8001780 <SysTick_Config>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800182c:	b480      	push	{r7}
 800182e:	b089      	sub	sp, #36	; 0x24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e175      	b.n	8001b38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8164 	bne.w	8001b32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d00b      	beq.n	800188a <HAL_GPIO_Init+0x5e>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d007      	beq.n	800188a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800187e:	2b11      	cmp	r3, #17
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b12      	cmp	r3, #18
 8001888:	d130      	bne.n	80018ec <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 0201 	and.w	r2, r3, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x100>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b12      	cmp	r3, #18
 800192a:	d123      	bne.n	8001974 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	69b9      	ldr	r1, [r7, #24]
 8001970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0203 	and.w	r2, r3, #3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80be 	beq.w	8001b32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <HAL_GPIO_Init+0x320>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a64      	ldr	r2, [pc, #400]	; (8001b4c <HAL_GPIO_Init+0x320>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <HAL_GPIO_Init+0x320>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019ce:	4a60      	ldr	r2, [pc, #384]	; (8001b50 <HAL_GPIO_Init+0x324>)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a57      	ldr	r2, [pc, #348]	; (8001b54 <HAL_GPIO_Init+0x328>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d037      	beq.n	8001a6a <HAL_GPIO_Init+0x23e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_GPIO_Init+0x32c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_GPIO_Init+0x23a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <HAL_GPIO_Init+0x330>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d02b      	beq.n	8001a62 <HAL_GPIO_Init+0x236>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a54      	ldr	r2, [pc, #336]	; (8001b60 <HAL_GPIO_Init+0x334>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d025      	beq.n	8001a5e <HAL_GPIO_Init+0x232>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a53      	ldr	r2, [pc, #332]	; (8001b64 <HAL_GPIO_Init+0x338>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d01f      	beq.n	8001a5a <HAL_GPIO_Init+0x22e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_GPIO_Init+0x33c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d019      	beq.n	8001a56 <HAL_GPIO_Init+0x22a>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a51      	ldr	r2, [pc, #324]	; (8001b6c <HAL_GPIO_Init+0x340>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d013      	beq.n	8001a52 <HAL_GPIO_Init+0x226>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a50      	ldr	r2, [pc, #320]	; (8001b70 <HAL_GPIO_Init+0x344>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00d      	beq.n	8001a4e <HAL_GPIO_Init+0x222>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a4f      	ldr	r2, [pc, #316]	; (8001b74 <HAL_GPIO_Init+0x348>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <HAL_GPIO_Init+0x21e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4e      	ldr	r2, [pc, #312]	; (8001b78 <HAL_GPIO_Init+0x34c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d101      	bne.n	8001a46 <HAL_GPIO_Init+0x21a>
 8001a42:	2309      	movs	r3, #9
 8001a44:	e012      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a46:	230a      	movs	r3, #10
 8001a48:	e010      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	e00e      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a4e:	2307      	movs	r3, #7
 8001a50:	e00c      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a52:	2306      	movs	r3, #6
 8001a54:	e00a      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e008      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x240>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a7c:	4934      	ldr	r1, [pc, #208]	; (8001b50 <HAL_GPIO_Init+0x324>)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8a:	4b3c      	ldr	r3, [pc, #240]	; (8001b7c <HAL_GPIO_Init+0x350>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aae:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <HAL_GPIO_Init+0x350>)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_GPIO_Init+0x350>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad8:	4a28      	ldr	r2, [pc, #160]	; (8001b7c <HAL_GPIO_Init+0x350>)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_GPIO_Init+0x350>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_GPIO_Init+0x350>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_GPIO_Init+0x350>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b2c:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <HAL_GPIO_Init+0x350>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3301      	adds	r3, #1
 8001b36:	61fb      	str	r3, [r7, #28]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	f67f ae86 	bls.w	800184c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b40:	bf00      	nop
 8001b42:	3724      	adds	r7, #36	; 0x24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40013800 	.word	0x40013800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020c00 	.word	0x40020c00
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40021400 	.word	0x40021400
 8001b6c:	40021800 	.word	0x40021800
 8001b70:	40021c00 	.word	0x40021c00
 8001b74:	40022000 	.word	0x40022000
 8001b78:	40022400 	.word	0x40022400
 8001b7c:	40013c00 	.word	0x40013c00

08001b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b90:	787b      	ldrb	r3, [r7, #1]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001b9c:	e003      	b.n	8001ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	041a      	lsls	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	619a      	str	r2, [r3, #24]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b23      	ldr	r3, [pc, #140]	; (8001c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b20      	ldr	r3, [pc, #128]	; (8001c4c <HAL_PWREx_EnableOverDrive+0x98>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be2:	f7ff f9ad 	bl	8000f40 <HAL_GetTick>
 8001be6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001be8:	e009      	b.n	8001bfe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bea:	f7ff f9a9 	bl	8000f40 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bf8:	d901      	bls.n	8001bfe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e022      	b.n	8001c44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d1ee      	bne.n	8001bea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0f      	ldr	r2, [pc, #60]	; (8001c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c16:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c18:	f7ff f992 	bl	8000f40 <HAL_GetTick>
 8001c1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c1e:	e009      	b.n	8001c34 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c20:	f7ff f98e 	bl	8000f40 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c2e:	d901      	bls.n	8001c34 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e007      	b.n	8001c44 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c40:	d1ee      	bne.n	8001c20 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e29b      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8087 	beq.w	8001d86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c78:	4b96      	ldr	r3, [pc, #600]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d00c      	beq.n	8001c9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c84:	4b93      	ldr	r3, [pc, #588]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d112      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x62>
 8001c90:	4b90      	ldr	r3, [pc, #576]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9c:	d10b      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c9e:	4b8d      	ldr	r3, [pc, #564]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d06c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x130>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d168      	bne.n	8001d84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e275      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x7a>
 8001cc0:	4b84      	ldr	r3, [pc, #528]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a83      	ldr	r2, [pc, #524]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	e02e      	b.n	8001d2c <HAL_RCC_OscConfig+0xd8>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x9c>
 8001cd6:	4b7f      	ldr	r3, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a7e      	ldr	r2, [pc, #504]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a7b      	ldr	r2, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0xd8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0xc0>
 8001cfa:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a75      	ldr	r2, [pc, #468]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a72      	ldr	r2, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0xd8>
 8001d14:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6e      	ldr	r2, [pc, #440]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6b      	ldr	r2, [pc, #428]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f904 	bl	8000f40 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f900 	bl	8000f40 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e229      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0xe8>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f8f0 	bl	8000f40 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff f8ec 	bl	8000f40 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e215      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0x110>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d069      	beq.n	8001e66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d92:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d11c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x190>
 8001daa:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d116      	bne.n	8001de4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x17a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e1e9      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b41      	ldr	r3, [pc, #260]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	493d      	ldr	r1, [pc, #244]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	e040      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d023      	beq.n	8001e34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dec:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a38      	ldr	r2, [pc, #224]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff f8a2 	bl	8000f40 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e00:	f7ff f89e 	bl	8000f40 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1c7      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4929      	ldr	r1, [pc, #164]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
 8001e32:	e018      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e34:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff f87e 	bl	8000f40 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff f87a 	bl	8000f40 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e1a3      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d038      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d019      	beq.n	8001eae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7a:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7ff f85b 	bl	8000f40 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f857 	bl	8000f40 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e180      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x23a>
 8001eac:	e01a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff f841 	bl	8000f40 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f83d 	bl	8000f40 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d903      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e166      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
 8001ed4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed8:	4b92      	ldr	r3, [pc, #584]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ee      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80a4 	beq.w	800203a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef2:	4b8c      	ldr	r3, [pc, #560]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10d      	bne.n	8001f1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4b89      	ldr	r3, [pc, #548]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a88      	ldr	r2, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b86      	ldr	r3, [pc, #536]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f16:	2301      	movs	r3, #1
 8001f18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f1a:	4b83      	ldr	r3, [pc, #524]	; (8002128 <HAL_RCC_OscConfig+0x4d4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d118      	bne.n	8001f58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f26:	4b80      	ldr	r3, [pc, #512]	; (8002128 <HAL_RCC_OscConfig+0x4d4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a7f      	ldr	r2, [pc, #508]	; (8002128 <HAL_RCC_OscConfig+0x4d4>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7ff f805 	bl	8000f40 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7ff f801 	bl	8000f40 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b64      	cmp	r3, #100	; 0x64
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e12a      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4c:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_RCC_OscConfig+0x4d4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_RCC_OscConfig+0x31a>
 8001f60:	4b70      	ldr	r3, [pc, #448]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a6f      	ldr	r2, [pc, #444]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	e02d      	b.n	8001fca <HAL_RCC_OscConfig+0x376>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x33c>
 8001f76:	4b6b      	ldr	r3, [pc, #428]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a6a      	ldr	r2, [pc, #424]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
 8001f82:	4b68      	ldr	r3, [pc, #416]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4a67      	ldr	r2, [pc, #412]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8e:	e01c      	b.n	8001fca <HAL_RCC_OscConfig+0x376>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d10c      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x35e>
 8001f98:	4b62      	ldr	r3, [pc, #392]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a61      	ldr	r2, [pc, #388]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001f9e:	f043 0304 	orr.w	r3, r3, #4
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa4:	4b5f      	ldr	r3, [pc, #380]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	4a5e      	ldr	r2, [pc, #376]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb0:	e00b      	b.n	8001fca <HAL_RCC_OscConfig+0x376>
 8001fb2:	4b5c      	ldr	r3, [pc, #368]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	4a5b      	ldr	r2, [pc, #364]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbe:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	4a58      	ldr	r2, [pc, #352]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d015      	beq.n	8001ffe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd2:	f7fe ffb5 	bl	8000f40 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe ffb1 	bl	8000f40 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e0d8      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff0:	4b4c      	ldr	r3, [pc, #304]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0ee      	beq.n	8001fda <HAL_RCC_OscConfig+0x386>
 8001ffc:	e014      	b.n	8002028 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffe:	f7fe ff9f 	bl	8000f40 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002006:	f7fe ff9b 	bl	8000f40 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0c2      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ee      	bne.n	8002006 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202e:	4b3d      	ldr	r3, [pc, #244]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a3c      	ldr	r2, [pc, #240]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8002034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	f000 80ae 	beq.w	80021a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d06d      	beq.n	800212c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d14b      	bne.n	80020f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002058:	4b32      	ldr	r3, [pc, #200]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a31      	ldr	r2, [pc, #196]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 800205e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe ff6c 	bl	8000f40 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe ff68 	bl	8000f40 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e091      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207e:	4b29      	ldr	r3, [pc, #164]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69da      	ldr	r2, [r3, #28]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	019b      	lsls	r3, r3, #6
 800209a:	431a      	orrs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	085b      	lsrs	r3, r3, #1
 80020a2:	3b01      	subs	r3, #1
 80020a4:	041b      	lsls	r3, r3, #16
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b4:	071b      	lsls	r3, r3, #28
 80020b6:	491b      	ldr	r1, [pc, #108]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a18      	ldr	r2, [pc, #96]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 80020c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe ff3a 	bl	8000f40 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d0:	f7fe ff36 	bl	8000f40 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e05f      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x47c>
 80020ee:	e057      	b.n	80021a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 80020f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe ff20 	bl	8000f40 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe ff1c 	bl	8000f40 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e045      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_RCC_OscConfig+0x4d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x4b0>
 8002122:	e03d      	b.n	80021a0 <HAL_RCC_OscConfig+0x54c>
 8002124:	40023800 	.word	0x40023800
 8002128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800212c:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <HAL_RCC_OscConfig+0x558>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d030      	beq.n	800219c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d129      	bne.n	800219c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d122      	bne.n	800219c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800215c:	4013      	ands	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002162:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002164:	4293      	cmp	r3, r2
 8002166:	d119      	bne.n	800219c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	085b      	lsrs	r3, r3, #1
 8002174:	3b01      	subs	r3, #1
 8002176:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d10f      	bne.n	800219c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d107      	bne.n	800219c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e000      	b.n	80021a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800

080021b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0d0      	b.n	800236a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021c8:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d910      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 020f 	bic.w	r2, r3, #15
 80021de:	4965      	ldr	r1, [pc, #404]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b63      	ldr	r3, [pc, #396]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0b8      	b.n	800236a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d020      	beq.n	8002246 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002210:	4b59      	ldr	r3, [pc, #356]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a58      	ldr	r2, [pc, #352]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002216:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800221a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002228:	4b53      	ldr	r3, [pc, #332]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	4a52      	ldr	r2, [pc, #328]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 800222e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002232:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002234:	4b50      	ldr	r3, [pc, #320]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	494d      	ldr	r1, [pc, #308]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d040      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b47      	ldr	r3, [pc, #284]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d115      	bne.n	8002292 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e07f      	b.n	800236a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002272:	4b41      	ldr	r3, [pc, #260]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e073      	b.n	800236a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	4b3d      	ldr	r3, [pc, #244]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e06b      	b.n	800236a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b39      	ldr	r3, [pc, #228]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4936      	ldr	r1, [pc, #216]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022a4:	f7fe fe4c 	bl	8000f40 <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fe48 	bl	8000f40 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e053      	b.n	800236a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d210      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 020f 	bic.w	r2, r3, #15
 80022ea:	4922      	ldr	r1, [pc, #136]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e032      	b.n	800236a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4916      	ldr	r1, [pc, #88]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800232e:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002342:	f000 f821 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8002346:	4601      	mov	r1, r0
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_RCC_ClockConfig+0x1c8>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x1cc>)
 8002354:	5cd3      	ldrb	r3, [r2, r3]
 8002356:	fa21 f303 	lsr.w	r3, r1, r3
 800235a:	4a09      	ldr	r2, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1d0>)
 800235c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_ClockConfig+0x1d4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fda8 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40023c00 	.word	0x40023c00
 8002378:	40023800 	.word	0x40023800
 800237c:	080036c4 	.word	0x080036c4
 8002380:	20000000 	.word	0x20000000
 8002384:	20000004 	.word	0x20000004

08002388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	2300      	movs	r3, #0
 8002398:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800239e:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d007      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x32>
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d008      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x38>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 808d 	bne.w	80024ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b4b      	ldr	r3, [pc, #300]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80023b6:	60bb      	str	r3, [r7, #8]
      break;
 80023b8:	e08c      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ba:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023bc:	60bb      	str	r3, [r7, #8]
      break;
 80023be:	e089      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c0:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023ca:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d023      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d6:	4b42      	ldr	r3, [pc, #264]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	f04f 0400 	mov.w	r4, #0
 80023e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	ea03 0501 	and.w	r5, r3, r1
 80023ec:	ea04 0602 	and.w	r6, r4, r2
 80023f0:	4a3d      	ldr	r2, [pc, #244]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80023f2:	fb02 f106 	mul.w	r1, r2, r6
 80023f6:	2200      	movs	r2, #0
 80023f8:	fb02 f205 	mul.w	r2, r2, r5
 80023fc:	440a      	add	r2, r1
 80023fe:	493a      	ldr	r1, [pc, #232]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002400:	fba5 0101 	umull	r0, r1, r5, r1
 8002404:	1853      	adds	r3, r2, r1
 8002406:	4619      	mov	r1, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f04f 0400 	mov.w	r4, #0
 800240e:	461a      	mov	r2, r3
 8002410:	4623      	mov	r3, r4
 8002412:	f7fd ff11 	bl	8000238 <__aeabi_uldivmod>
 8002416:	4603      	mov	r3, r0
 8002418:	460c      	mov	r4, r1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e049      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	f04f 0400 	mov.w	r4, #0
 8002428:	f240 11ff 	movw	r1, #511	; 0x1ff
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	ea03 0501 	and.w	r5, r3, r1
 8002434:	ea04 0602 	and.w	r6, r4, r2
 8002438:	4629      	mov	r1, r5
 800243a:	4632      	mov	r2, r6
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	f04f 0400 	mov.w	r4, #0
 8002444:	0154      	lsls	r4, r2, #5
 8002446:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800244a:	014b      	lsls	r3, r1, #5
 800244c:	4619      	mov	r1, r3
 800244e:	4622      	mov	r2, r4
 8002450:	1b49      	subs	r1, r1, r5
 8002452:	eb62 0206 	sbc.w	r2, r2, r6
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f04f 0400 	mov.w	r4, #0
 800245e:	0194      	lsls	r4, r2, #6
 8002460:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002464:	018b      	lsls	r3, r1, #6
 8002466:	1a5b      	subs	r3, r3, r1
 8002468:	eb64 0402 	sbc.w	r4, r4, r2
 800246c:	f04f 0100 	mov.w	r1, #0
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	00e2      	lsls	r2, r4, #3
 8002476:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800247a:	00d9      	lsls	r1, r3, #3
 800247c:	460b      	mov	r3, r1
 800247e:	4614      	mov	r4, r2
 8002480:	195b      	adds	r3, r3, r5
 8002482:	eb44 0406 	adc.w	r4, r4, r6
 8002486:	f04f 0100 	mov.w	r1, #0
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	02a2      	lsls	r2, r4, #10
 8002490:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002494:	0299      	lsls	r1, r3, #10
 8002496:	460b      	mov	r3, r1
 8002498:	4614      	mov	r4, r2
 800249a:	4618      	mov	r0, r3
 800249c:	4621      	mov	r1, r4
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f04f 0400 	mov.w	r4, #0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	f7fd fec6 	bl	8000238 <__aeabi_uldivmod>
 80024ac:	4603      	mov	r3, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c1b      	lsrs	r3, r3, #16
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	3301      	adds	r3, #1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	60bb      	str	r3, [r7, #8]
      break;
 80024cc:	e002      	b.n	80024d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80024d0:	60bb      	str	r3, [r7, #8]
      break;
 80024d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d4:	68bb      	ldr	r3, [r7, #8]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	00f42400 	.word	0x00f42400
 80024e8:	017d7840 	.word	0x017d7840

080024ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f0:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f2:	681b      	ldr	r3, [r3, #0]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000000 	.word	0x20000000

08002504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002508:	f7ff fff0 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 800250c:	4601      	mov	r1, r0
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	0a9b      	lsrs	r3, r3, #10
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	4a03      	ldr	r2, [pc, #12]	; (8002528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002520:	4618      	mov	r0, r3
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40023800 	.word	0x40023800
 8002528:	080036d4 	.word	0x080036d4

0800252c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002530:	f7ff ffdc 	bl	80024ec <HAL_RCC_GetHCLKFreq>
 8002534:	4601      	mov	r1, r0
 8002536:	4b05      	ldr	r3, [pc, #20]	; (800254c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	0b5b      	lsrs	r3, r3, #13
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	4a03      	ldr	r2, [pc, #12]	; (8002550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002548:	4618      	mov	r0, r3
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	080036d4 	.word	0x080036d4

08002554 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d012      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800257c:	4b69      	ldr	r3, [pc, #420]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a68      	ldr	r2, [pc, #416]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002582:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002586:	6093      	str	r3, [r2, #8]
 8002588:	4b66      	ldr	r3, [pc, #408]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	4964      	ldr	r1, [pc, #400]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d017      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025ae:	4b5d      	ldr	r3, [pc, #372]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025bc:	4959      	ldr	r1, [pc, #356]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025cc:	d101      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d017      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ea:	4b4e      	ldr	r3, [pc, #312]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	494a      	ldr	r1, [pc, #296]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002608:	d101      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800260a:	2301      	movs	r3, #1
 800260c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002626:	2301      	movs	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 808b 	beq.w	800274e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b3a      	ldr	r3, [pc, #232]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	4a39      	ldr	r2, [pc, #228]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6413      	str	r3, [r2, #64]	; 0x40
 8002644:	4b37      	ldr	r3, [pc, #220]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002650:	4b35      	ldr	r3, [pc, #212]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a34      	ldr	r2, [pc, #208]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800265c:	f7fe fc70 	bl	8000f40 <HAL_GetTick>
 8002660:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7fe fc6c 	bl	8000f40 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e38d      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002676:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002682:	4b28      	ldr	r3, [pc, #160]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d035      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d02e      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026b6:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a1a      	ldr	r2, [pc, #104]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026c2:	4a18      	ldr	r2, [pc, #96]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d114      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fc34 	bl	8000f40 <HAL_GetTick>
 80026d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026da:	e00a      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe fc30 	bl	8000f40 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e34f      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0ee      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800270a:	d111      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800271a:	400b      	ands	r3, r1
 800271c:	4901      	ldr	r1, [pc, #4]	; (8002724 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
 8002722:	e00b      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002724:	40023800 	.word	0x40023800
 8002728:	40007000 	.word	0x40007000
 800272c:	0ffffcff 	.word	0x0ffffcff
 8002730:	4bb3      	ldr	r3, [pc, #716]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4ab2      	ldr	r2, [pc, #712]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002736:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800273a:	6093      	str	r3, [r2, #8]
 800273c:	4bb0      	ldr	r3, [pc, #704]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800273e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	49ad      	ldr	r1, [pc, #692]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800274a:	4313      	orrs	r3, r2
 800274c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d010      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800275a:	4ba9      	ldr	r3, [pc, #676]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800275c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002760:	4aa7      	ldr	r2, [pc, #668]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002766:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800276a:	4ba5      	ldr	r3, [pc, #660]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800276c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	49a2      	ldr	r1, [pc, #648]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002788:	4b9d      	ldr	r3, [pc, #628]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002796:	499a      	ldr	r1, [pc, #616]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027aa:	4b95      	ldr	r3, [pc, #596]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b8:	4991      	ldr	r1, [pc, #580]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027cc:	4b8c      	ldr	r3, [pc, #560]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027da:	4989      	ldr	r1, [pc, #548]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027ee:	4b84      	ldr	r3, [pc, #528]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4980      	ldr	r1, [pc, #512]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002810:	4b7b      	ldr	r3, [pc, #492]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002816:	f023 0203 	bic.w	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4978      	ldr	r1, [pc, #480]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002832:	4b73      	ldr	r3, [pc, #460]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002838:	f023 020c 	bic.w	r2, r3, #12
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002840:	496f      	ldr	r1, [pc, #444]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002854:	4b6a      	ldr	r3, [pc, #424]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	4967      	ldr	r1, [pc, #412]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002876:	4b62      	ldr	r3, [pc, #392]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	495e      	ldr	r1, [pc, #376]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002898:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a6:	4956      	ldr	r1, [pc, #344]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80028ba:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	494d      	ldr	r1, [pc, #308]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028dc:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ea:	4945      	ldr	r1, [pc, #276]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028fe:	4b40      	ldr	r3, [pc, #256]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002904:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290c:	493c      	ldr	r1, [pc, #240]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002920:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002926:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800292e:	4934      	ldr	r1, [pc, #208]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d011      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002942:	4b2f      	ldr	r3, [pc, #188]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002950:	492b      	ldr	r1, [pc, #172]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002960:	d101      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002962:	2301      	movs	r3, #1
 8002964:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002982:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002990:	491b      	ldr	r1, [pc, #108]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029b4:	4912      	ldr	r1, [pc, #72]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d8:	4909      	ldr	r1, [pc, #36]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00f      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	e002      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	4985      	ldr	r1, [pc, #532]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a18:	4b80      	ldr	r3, [pc, #512]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a28:	497c      	ldr	r1, [pc, #496]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d005      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a3e:	f040 80d6 	bne.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a42:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a75      	ldr	r2, [pc, #468]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fa77 	bl	8000f40 <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a56:	f7fe fa73 	bl	8000f40 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b64      	cmp	r3, #100	; 0x64
 8002a62:	d901      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e194      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a68:	4b6c      	ldr	r3, [pc, #432]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d021      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11d      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a88:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a8e:	0c1b      	lsrs	r3, r3, #16
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a96:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a9c:	0e1b      	lsrs	r3, r3, #24
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	019a      	lsls	r2, r3, #6
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	061b      	lsls	r3, r3, #24
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	071b      	lsls	r3, r3, #28
 8002abc:	4957      	ldr	r1, [pc, #348]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d004      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02e      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aee:	d129      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002af0:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	f003 0303 	and.w	r3, r3, #3
 8002afc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b04:	0f1b      	lsrs	r3, r3, #28
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	019a      	lsls	r2, r3, #6
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	071b      	lsls	r3, r3, #28
 8002b24:	493d      	ldr	r1, [pc, #244]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b2c:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b32:	f023 021f 	bic.w	r2, r3, #31
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	4937      	ldr	r1, [pc, #220]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01d      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b50:	4b32      	ldr	r3, [pc, #200]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b56:	0e1b      	lsrs	r3, r3, #24
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b64:	0f1b      	lsrs	r3, r3, #28
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	019a      	lsls	r2, r3, #6
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	071b      	lsls	r3, r3, #28
 8002b84:	4925      	ldr	r1, [pc, #148]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d011      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	019a      	lsls	r2, r3, #6
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	061b      	lsls	r3, r3, #24
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	071b      	lsls	r3, r3, #28
 8002bb4:	4919      	ldr	r1, [pc, #100]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc8:	f7fe f9ba 	bl	8000f40 <HAL_GetTick>
 8002bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bd0:	f7fe f9b6 	bl	8000f40 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0d7      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002be2:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	f040 80cd 	bne.w	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c02:	f7fe f99d 	bl	8000f40 <HAL_GetTick>
 8002c06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c08:	e00a      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c0a:	f7fe f999 	bl	8000f40 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b64      	cmp	r3, #100	; 0x64
 8002c16:	d903      	bls.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e0ba      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002c1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c20:	4b5e      	ldr	r3, [pc, #376]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c2c:	d0ed      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d02e      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d12a      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c56:	4b51      	ldr	r3, [pc, #324]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c64:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	0f1b      	lsrs	r3, r3, #28
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	019a      	lsls	r2, r3, #6
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	4944      	ldr	r1, [pc, #272]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c92:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	493d      	ldr	r1, [pc, #244]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d022      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cc0:	d11d      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cc2:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	0e1b      	lsrs	r3, r3, #24
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cd0:	4b32      	ldr	r3, [pc, #200]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	0f1b      	lsrs	r3, r3, #28
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	019a      	lsls	r2, r3, #6
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	041b      	lsls	r3, r3, #16
 8002cea:	431a      	orrs	r2, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	061b      	lsls	r3, r3, #24
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	071b      	lsls	r3, r3, #28
 8002cf6:	4929      	ldr	r1, [pc, #164]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d028      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	0e1b      	lsrs	r3, r3, #24
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	019a      	lsls	r2, r3, #6
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	431a      	orrs	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	071b      	lsls	r3, r3, #28
 8002d3e:	4917      	ldr	r1, [pc, #92]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	4911      	ldr	r1, [pc, #68]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fe f8ea 	bl	8000f40 <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d70:	f7fe f8e6 	bl	8000f40 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e007      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d8e:	d1ef      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800

08002da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e040      	b.n	8002e34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d106      	bne.n	8002dc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7fd fffe 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2224      	movs	r2, #36	; 0x24
 8002dcc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f82c 	bl	8002e3c <UART_SetConfig>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e022      	b.n	8002e34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 faca 	bl	8003390 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0201 	orr.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fb51 	bl	80034d4 <UART_CheckIdleState>
 8002e32:	4603      	mov	r3, r0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4bb1      	ldr	r3, [pc, #708]	; (8003130 <UART_SetConfig+0x2f4>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	6939      	ldr	r1, [r7, #16]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a9f      	ldr	r2, [pc, #636]	; (8003134 <UART_SetConfig+0x2f8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d121      	bne.n	8002f00 <UART_SetConfig+0xc4>
 8002ebc:	4b9e      	ldr	r3, [pc, #632]	; (8003138 <UART_SetConfig+0x2fc>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d816      	bhi.n	8002ef8 <UART_SetConfig+0xbc>
 8002eca:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <UART_SetConfig+0x94>)
 8002ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002eed 	.word	0x08002eed
 8002ed8:	08002ee7 	.word	0x08002ee7
 8002edc:	08002ef3 	.word	0x08002ef3
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e151      	b.n	800318a <UART_SetConfig+0x34e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e14e      	b.n	800318a <UART_SetConfig+0x34e>
 8002eec:	2304      	movs	r3, #4
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e14b      	b.n	800318a <UART_SetConfig+0x34e>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	e148      	b.n	800318a <UART_SetConfig+0x34e>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	bf00      	nop
 8002efe:	e144      	b.n	800318a <UART_SetConfig+0x34e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a8d      	ldr	r2, [pc, #564]	; (800313c <UART_SetConfig+0x300>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d134      	bne.n	8002f74 <UART_SetConfig+0x138>
 8002f0a:	4b8b      	ldr	r3, [pc, #556]	; (8003138 <UART_SetConfig+0x2fc>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b0c      	cmp	r3, #12
 8002f16:	d829      	bhi.n	8002f6c <UART_SetConfig+0x130>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0xe4>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f55 	.word	0x08002f55
 8002f24:	08002f6d 	.word	0x08002f6d
 8002f28:	08002f6d 	.word	0x08002f6d
 8002f2c:	08002f6d 	.word	0x08002f6d
 8002f30:	08002f61 	.word	0x08002f61
 8002f34:	08002f6d 	.word	0x08002f6d
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	08002f6d 	.word	0x08002f6d
 8002f40:	08002f5b 	.word	0x08002f5b
 8002f44:	08002f6d 	.word	0x08002f6d
 8002f48:	08002f6d 	.word	0x08002f6d
 8002f4c:	08002f6d 	.word	0x08002f6d
 8002f50:	08002f67 	.word	0x08002f67
 8002f54:	2300      	movs	r3, #0
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e117      	b.n	800318a <UART_SetConfig+0x34e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	77fb      	strb	r3, [r7, #31]
 8002f5e:	e114      	b.n	800318a <UART_SetConfig+0x34e>
 8002f60:	2304      	movs	r3, #4
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e111      	b.n	800318a <UART_SetConfig+0x34e>
 8002f66:	2308      	movs	r3, #8
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e10e      	b.n	800318a <UART_SetConfig+0x34e>
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	bf00      	nop
 8002f72:	e10a      	b.n	800318a <UART_SetConfig+0x34e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a71      	ldr	r2, [pc, #452]	; (8003140 <UART_SetConfig+0x304>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d120      	bne.n	8002fc0 <UART_SetConfig+0x184>
 8002f7e:	4b6e      	ldr	r3, [pc, #440]	; (8003138 <UART_SetConfig+0x2fc>)
 8002f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f88:	2b10      	cmp	r3, #16
 8002f8a:	d00f      	beq.n	8002fac <UART_SetConfig+0x170>
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d802      	bhi.n	8002f96 <UART_SetConfig+0x15a>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <UART_SetConfig+0x164>
 8002f94:	e010      	b.n	8002fb8 <UART_SetConfig+0x17c>
 8002f96:	2b20      	cmp	r3, #32
 8002f98:	d005      	beq.n	8002fa6 <UART_SetConfig+0x16a>
 8002f9a:	2b30      	cmp	r3, #48	; 0x30
 8002f9c:	d009      	beq.n	8002fb2 <UART_SetConfig+0x176>
 8002f9e:	e00b      	b.n	8002fb8 <UART_SetConfig+0x17c>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e0f1      	b.n	800318a <UART_SetConfig+0x34e>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e0ee      	b.n	800318a <UART_SetConfig+0x34e>
 8002fac:	2304      	movs	r3, #4
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e0eb      	b.n	800318a <UART_SetConfig+0x34e>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e0e8      	b.n	800318a <UART_SetConfig+0x34e>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	bf00      	nop
 8002fbe:	e0e4      	b.n	800318a <UART_SetConfig+0x34e>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a5f      	ldr	r2, [pc, #380]	; (8003144 <UART_SetConfig+0x308>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d120      	bne.n	800300c <UART_SetConfig+0x1d0>
 8002fca:	4b5b      	ldr	r3, [pc, #364]	; (8003138 <UART_SetConfig+0x2fc>)
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d00f      	beq.n	8002ff8 <UART_SetConfig+0x1bc>
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d802      	bhi.n	8002fe2 <UART_SetConfig+0x1a6>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <UART_SetConfig+0x1b0>
 8002fe0:	e010      	b.n	8003004 <UART_SetConfig+0x1c8>
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d005      	beq.n	8002ff2 <UART_SetConfig+0x1b6>
 8002fe6:	2bc0      	cmp	r3, #192	; 0xc0
 8002fe8:	d009      	beq.n	8002ffe <UART_SetConfig+0x1c2>
 8002fea:	e00b      	b.n	8003004 <UART_SetConfig+0x1c8>
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e0cb      	b.n	800318a <UART_SetConfig+0x34e>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e0c8      	b.n	800318a <UART_SetConfig+0x34e>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e0c5      	b.n	800318a <UART_SetConfig+0x34e>
 8002ffe:	2308      	movs	r3, #8
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e0c2      	b.n	800318a <UART_SetConfig+0x34e>
 8003004:	2310      	movs	r3, #16
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	bf00      	nop
 800300a:	e0be      	b.n	800318a <UART_SetConfig+0x34e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a4d      	ldr	r2, [pc, #308]	; (8003148 <UART_SetConfig+0x30c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d124      	bne.n	8003060 <UART_SetConfig+0x224>
 8003016:	4b48      	ldr	r3, [pc, #288]	; (8003138 <UART_SetConfig+0x2fc>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003024:	d012      	beq.n	800304c <UART_SetConfig+0x210>
 8003026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800302a:	d802      	bhi.n	8003032 <UART_SetConfig+0x1f6>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d007      	beq.n	8003040 <UART_SetConfig+0x204>
 8003030:	e012      	b.n	8003058 <UART_SetConfig+0x21c>
 8003032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003036:	d006      	beq.n	8003046 <UART_SetConfig+0x20a>
 8003038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800303c:	d009      	beq.n	8003052 <UART_SetConfig+0x216>
 800303e:	e00b      	b.n	8003058 <UART_SetConfig+0x21c>
 8003040:	2300      	movs	r3, #0
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e0a1      	b.n	800318a <UART_SetConfig+0x34e>
 8003046:	2302      	movs	r3, #2
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e09e      	b.n	800318a <UART_SetConfig+0x34e>
 800304c:	2304      	movs	r3, #4
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e09b      	b.n	800318a <UART_SetConfig+0x34e>
 8003052:	2308      	movs	r3, #8
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e098      	b.n	800318a <UART_SetConfig+0x34e>
 8003058:	2310      	movs	r3, #16
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	bf00      	nop
 800305e:	e094      	b.n	800318a <UART_SetConfig+0x34e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a39      	ldr	r2, [pc, #228]	; (800314c <UART_SetConfig+0x310>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d124      	bne.n	80030b4 <UART_SetConfig+0x278>
 800306a:	4b33      	ldr	r3, [pc, #204]	; (8003138 <UART_SetConfig+0x2fc>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003078:	d012      	beq.n	80030a0 <UART_SetConfig+0x264>
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307e:	d802      	bhi.n	8003086 <UART_SetConfig+0x24a>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d007      	beq.n	8003094 <UART_SetConfig+0x258>
 8003084:	e012      	b.n	80030ac <UART_SetConfig+0x270>
 8003086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800308a:	d006      	beq.n	800309a <UART_SetConfig+0x25e>
 800308c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003090:	d009      	beq.n	80030a6 <UART_SetConfig+0x26a>
 8003092:	e00b      	b.n	80030ac <UART_SetConfig+0x270>
 8003094:	2301      	movs	r3, #1
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e077      	b.n	800318a <UART_SetConfig+0x34e>
 800309a:	2302      	movs	r3, #2
 800309c:	77fb      	strb	r3, [r7, #31]
 800309e:	e074      	b.n	800318a <UART_SetConfig+0x34e>
 80030a0:	2304      	movs	r3, #4
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e071      	b.n	800318a <UART_SetConfig+0x34e>
 80030a6:	2308      	movs	r3, #8
 80030a8:	77fb      	strb	r3, [r7, #31]
 80030aa:	e06e      	b.n	800318a <UART_SetConfig+0x34e>
 80030ac:	2310      	movs	r3, #16
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	bf00      	nop
 80030b2:	e06a      	b.n	800318a <UART_SetConfig+0x34e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a25      	ldr	r2, [pc, #148]	; (8003150 <UART_SetConfig+0x314>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d124      	bne.n	8003108 <UART_SetConfig+0x2cc>
 80030be:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <UART_SetConfig+0x2fc>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80030c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030cc:	d012      	beq.n	80030f4 <UART_SetConfig+0x2b8>
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	d802      	bhi.n	80030da <UART_SetConfig+0x29e>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <UART_SetConfig+0x2ac>
 80030d8:	e012      	b.n	8003100 <UART_SetConfig+0x2c4>
 80030da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030de:	d006      	beq.n	80030ee <UART_SetConfig+0x2b2>
 80030e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030e4:	d009      	beq.n	80030fa <UART_SetConfig+0x2be>
 80030e6:	e00b      	b.n	8003100 <UART_SetConfig+0x2c4>
 80030e8:	2300      	movs	r3, #0
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e04d      	b.n	800318a <UART_SetConfig+0x34e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	77fb      	strb	r3, [r7, #31]
 80030f2:	e04a      	b.n	800318a <UART_SetConfig+0x34e>
 80030f4:	2304      	movs	r3, #4
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e047      	b.n	800318a <UART_SetConfig+0x34e>
 80030fa:	2308      	movs	r3, #8
 80030fc:	77fb      	strb	r3, [r7, #31]
 80030fe:	e044      	b.n	800318a <UART_SetConfig+0x34e>
 8003100:	2310      	movs	r3, #16
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	bf00      	nop
 8003106:	e040      	b.n	800318a <UART_SetConfig+0x34e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a11      	ldr	r2, [pc, #68]	; (8003154 <UART_SetConfig+0x318>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d139      	bne.n	8003186 <UART_SetConfig+0x34a>
 8003112:	4b09      	ldr	r3, [pc, #36]	; (8003138 <UART_SetConfig+0x2fc>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800311c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003120:	d027      	beq.n	8003172 <UART_SetConfig+0x336>
 8003122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003126:	d817      	bhi.n	8003158 <UART_SetConfig+0x31c>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01c      	beq.n	8003166 <UART_SetConfig+0x32a>
 800312c:	e027      	b.n	800317e <UART_SetConfig+0x342>
 800312e:	bf00      	nop
 8003130:	efff69f3 	.word	0xefff69f3
 8003134:	40011000 	.word	0x40011000
 8003138:	40023800 	.word	0x40023800
 800313c:	40004400 	.word	0x40004400
 8003140:	40004800 	.word	0x40004800
 8003144:	40004c00 	.word	0x40004c00
 8003148:	40005000 	.word	0x40005000
 800314c:	40011400 	.word	0x40011400
 8003150:	40007800 	.word	0x40007800
 8003154:	40007c00 	.word	0x40007c00
 8003158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315c:	d006      	beq.n	800316c <UART_SetConfig+0x330>
 800315e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003162:	d009      	beq.n	8003178 <UART_SetConfig+0x33c>
 8003164:	e00b      	b.n	800317e <UART_SetConfig+0x342>
 8003166:	2300      	movs	r3, #0
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e00e      	b.n	800318a <UART_SetConfig+0x34e>
 800316c:	2302      	movs	r3, #2
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e00b      	b.n	800318a <UART_SetConfig+0x34e>
 8003172:	2304      	movs	r3, #4
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e008      	b.n	800318a <UART_SetConfig+0x34e>
 8003178:	2308      	movs	r3, #8
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e005      	b.n	800318a <UART_SetConfig+0x34e>
 800317e:	2310      	movs	r3, #16
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	bf00      	nop
 8003184:	e001      	b.n	800318a <UART_SetConfig+0x34e>
 8003186:	2310      	movs	r3, #16
 8003188:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003192:	d17f      	bne.n	8003294 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003194:	7ffb      	ldrb	r3, [r7, #31]
 8003196:	2b08      	cmp	r3, #8
 8003198:	d85c      	bhi.n	8003254 <UART_SetConfig+0x418>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <UART_SetConfig+0x364>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031c5 	.word	0x080031c5
 80031a4:	080031e5 	.word	0x080031e5
 80031a8:	08003205 	.word	0x08003205
 80031ac:	08003255 	.word	0x08003255
 80031b0:	0800321d 	.word	0x0800321d
 80031b4:	08003255 	.word	0x08003255
 80031b8:	08003255 	.word	0x08003255
 80031bc:	08003255 	.word	0x08003255
 80031c0:	0800323d 	.word	0x0800323d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c4:	f7ff f99e 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 80031c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	005a      	lsls	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	441a      	add	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	fbb2 f3f3 	udiv	r3, r2, r3
 80031de:	b29b      	uxth	r3, r3
 80031e0:	61bb      	str	r3, [r7, #24]
        break;
 80031e2:	e03a      	b.n	800325a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e4:	f7ff f9a2 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 80031e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	005a      	lsls	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	441a      	add	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	b29b      	uxth	r3, r3
 8003200:	61bb      	str	r3, [r7, #24]
        break;
 8003202:	e02a      	b.n	800325a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	085a      	lsrs	r2, r3, #1
 800320a:	4b5f      	ldr	r3, [pc, #380]	; (8003388 <UART_SetConfig+0x54c>)
 800320c:	4413      	add	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6852      	ldr	r2, [r2, #4]
 8003212:	fbb3 f3f2 	udiv	r3, r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	61bb      	str	r3, [r7, #24]
        break;
 800321a:	e01e      	b.n	800325a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321c:	f7ff f8b4 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 8003220:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	005a      	lsls	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	441a      	add	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	fbb2 f3f3 	udiv	r3, r2, r3
 8003236:	b29b      	uxth	r3, r3
 8003238:	61bb      	str	r3, [r7, #24]
        break;
 800323a:	e00e      	b.n	800325a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	b29b      	uxth	r3, r3
 8003250:	61bb      	str	r3, [r7, #24]
        break;
 8003252:	e002      	b.n	800325a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
        break;
 8003258:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d916      	bls.n	800328e <UART_SetConfig+0x452>
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003266:	d212      	bcs.n	800328e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	b29b      	uxth	r3, r3
 800326c:	f023 030f 	bic.w	r3, r3, #15
 8003270:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	b29b      	uxth	r3, r3
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	b29a      	uxth	r2, r3
 800327e:	897b      	ldrh	r3, [r7, #10]
 8003280:	4313      	orrs	r3, r2
 8003282:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	897a      	ldrh	r2, [r7, #10]
 800328a:	60da      	str	r2, [r3, #12]
 800328c:	e070      	b.n	8003370 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	75fb      	strb	r3, [r7, #23]
 8003292:	e06d      	b.n	8003370 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003294:	7ffb      	ldrb	r3, [r7, #31]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d859      	bhi.n	800334e <UART_SetConfig+0x512>
 800329a:	a201      	add	r2, pc, #4	; (adr r2, 80032a0 <UART_SetConfig+0x464>)
 800329c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a0:	080032c5 	.word	0x080032c5
 80032a4:	080032e3 	.word	0x080032e3
 80032a8:	08003301 	.word	0x08003301
 80032ac:	0800334f 	.word	0x0800334f
 80032b0:	08003319 	.word	0x08003319
 80032b4:	0800334f 	.word	0x0800334f
 80032b8:	0800334f 	.word	0x0800334f
 80032bc:	0800334f 	.word	0x0800334f
 80032c0:	08003337 	.word	0x08003337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c4:	f7ff f91e 	bl	8002504 <HAL_RCC_GetPCLK1Freq>
 80032c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	085a      	lsrs	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	441a      	add	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032dc:	b29b      	uxth	r3, r3
 80032de:	61bb      	str	r3, [r7, #24]
        break;
 80032e0:	e038      	b.n	8003354 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032e2:	f7ff f923 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 80032e6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	085a      	lsrs	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	441a      	add	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	61bb      	str	r3, [r7, #24]
        break;
 80032fe:	e029      	b.n	8003354 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	085a      	lsrs	r2, r3, #1
 8003306:	4b21      	ldr	r3, [pc, #132]	; (800338c <UART_SetConfig+0x550>)
 8003308:	4413      	add	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6852      	ldr	r2, [r2, #4]
 800330e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003312:	b29b      	uxth	r3, r3
 8003314:	61bb      	str	r3, [r7, #24]
        break;
 8003316:	e01d      	b.n	8003354 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003318:	f7ff f836 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 800331c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	085a      	lsrs	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	441a      	add	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	b29b      	uxth	r3, r3
 8003332:	61bb      	str	r3, [r7, #24]
        break;
 8003334:	e00e      	b.n	8003354 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	b29b      	uxth	r3, r3
 800334a:	61bb      	str	r3, [r7, #24]
        break;
 800334c:	e002      	b.n	8003354 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	75fb      	strb	r3, [r7, #23]
        break;
 8003352:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	2b0f      	cmp	r3, #15
 8003358:	d908      	bls.n	800336c <UART_SetConfig+0x530>
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003360:	d204      	bcs.n	800336c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	e001      	b.n	8003370 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800337c:	7dfb      	ldrb	r3, [r7, #23]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3720      	adds	r7, #32
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	01e84800 	.word	0x01e84800
 800338c:	00f42400 	.word	0x00f42400

08003390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01a      	beq.n	80034a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800348e:	d10a      	bne.n	80034a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	605a      	str	r2, [r3, #4]
  }
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af02      	add	r7, sp, #8
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034e2:	f7fd fd2d 	bl	8000f40 <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d10e      	bne.n	8003514 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f82a 	bl	800355e <UART_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e020      	b.n	8003556 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b04      	cmp	r3, #4
 8003520:	d10e      	bne.n	8003540 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003522:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f814 	bl	800355e <UART_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e00a      	b.n	8003556 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2220      	movs	r2, #32
 800354a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356e:	e05d      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d059      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003578:	f7fd fce2 	bl	8000f40 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	429a      	cmp	r2, r3
 8003586:	d302      	bcc.n	800358e <UART_WaitOnFlagUntilTimeout+0x30>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11b      	bne.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800359c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e042      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d02b      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e2:	d123      	bne.n	800362c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2220      	movs	r2, #32
 8003612:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e00f      	b.n	800364c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	429a      	cmp	r2, r3
 8003648:	d092      	beq.n	8003570 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <__libc_init_array>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	4e0d      	ldr	r6, [pc, #52]	; (800368c <__libc_init_array+0x38>)
 8003658:	4c0d      	ldr	r4, [pc, #52]	; (8003690 <__libc_init_array+0x3c>)
 800365a:	1ba4      	subs	r4, r4, r6
 800365c:	10a4      	asrs	r4, r4, #2
 800365e:	2500      	movs	r5, #0
 8003660:	42a5      	cmp	r5, r4
 8003662:	d109      	bne.n	8003678 <__libc_init_array+0x24>
 8003664:	4e0b      	ldr	r6, [pc, #44]	; (8003694 <__libc_init_array+0x40>)
 8003666:	4c0c      	ldr	r4, [pc, #48]	; (8003698 <__libc_init_array+0x44>)
 8003668:	f000 f820 	bl	80036ac <_init>
 800366c:	1ba4      	subs	r4, r4, r6
 800366e:	10a4      	asrs	r4, r4, #2
 8003670:	2500      	movs	r5, #0
 8003672:	42a5      	cmp	r5, r4
 8003674:	d105      	bne.n	8003682 <__libc_init_array+0x2e>
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800367c:	4798      	blx	r3
 800367e:	3501      	adds	r5, #1
 8003680:	e7ee      	b.n	8003660 <__libc_init_array+0xc>
 8003682:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003686:	4798      	blx	r3
 8003688:	3501      	adds	r5, #1
 800368a:	e7f2      	b.n	8003672 <__libc_init_array+0x1e>
 800368c:	080036e4 	.word	0x080036e4
 8003690:	080036e4 	.word	0x080036e4
 8003694:	080036e4 	.word	0x080036e4
 8003698:	080036e8 	.word	0x080036e8

0800369c <memset>:
 800369c:	4402      	add	r2, r0
 800369e:	4603      	mov	r3, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memset+0xa>
 80036a4:	4770      	bx	lr
 80036a6:	f803 1b01 	strb.w	r1, [r3], #1
 80036aa:	e7f9      	b.n	80036a0 <memset+0x4>

080036ac <_init>:
 80036ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ae:	bf00      	nop
 80036b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b2:	bc08      	pop	{r3}
 80036b4:	469e      	mov	lr, r3
 80036b6:	4770      	bx	lr

080036b8 <_fini>:
 80036b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ba:	bf00      	nop
 80036bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036be:	bc08      	pop	{r3}
 80036c0:	469e      	mov	lr, r3
 80036c2:	4770      	bx	lr
